{"version":3,"sources":["utilities/ArrayUtilities.js","BaseApplication.js","shaders/basic_color/basic_color_vert.glsl","shaders/basic_color/basic_color_frag.glsl","materials/BaseShaderMaterial.js","CameraManager.js","Screen.js","Configuration.js","Time.js","KeyboardInput.js","Input.js","primitives/Sphere.js","editor/shaders/object_picker_vert.glsl","editor/shaders/object_picker_frag.glsl","Mesh.js","primitives/Arrow.js","SceneManager.js","utilities/MathUtilities.js","utilities/CameraUtilities.js","Capabilities.js","utilities/EasingFunctions.js","EventManager.js","components/AxisHelper.js","render_mode/BaseRender.js","RenderLayers.js","shaders/box_blur/compose_frag.glsl","shaders/box_blur/box_blur_frag.glsl","shaders/copy/copy_frag.glsl","shaders/copy/copy_vert.glsl","render_mode/OutlineRender.js","UI.js","materials/BlitMaterial.js","shaders/clear/clear_depth_normal_frag.glsl","materials/ClearDepthNormalMaterial.js","shaders/depth_normals/depth_normals_vert.glsl","shaders/depth_normals/depth_normals_frag.glsl","materials/DepthNormalMaterial.js","render_utilities/DepthAndNormalsRenderer.js","render_utilities/Blitter.js","Graphics.js","primitives/Cube.js","Debug.js","render_mode/NormalRender.js","utilities/ObjectUtilities.js","PerspectiveCamera.js","static_batcher/GeometryBatch.js","static_batcher/GeometryBatcher.js","RenderLoop.js","resource_loader/AbstractLoader.js","resource_loader/TextureLoader.js","resource_loader/GLTFLoader.js","resource_loader/DAELoader.js","resource_loader/TextLoader.js","resource_loader/CubemapLoader.js","resource_loader/AudioLoader.js","resource_loader/JSONLoader.js","resource_loader/OBJLoader.js","ResourceContainer.js","resource_loader/ResourceBatch.js","utilities/TimeUtilities.js","utilities/Validation.js","shaders/grid/grid_frag.glsl","shaders/grid/grid_vert.glsl","utilities/GeometryUtilities.js","components/Grid.js","Components.js","index.js"],"names":["ArrayUtilities","source","target","push","apply","array","size","items_left_count","length","i","clone","elem","index","indexOf","splice","BaseApplication","module","exports","ShaderMaterial","BaseShaderMaterial","THREE","vert","frag","uniforms","vertexShader","basic_vert","fragmentShader","basic_frag","_Color","value","Color","CameraManager","_current","undefined","camera","camera_manager","Screen","width","height","width_height","Vector2","screen_materials","native_width","native_height","pixel_size","x","y","_ScreenSize","vector2","multiplyScalar","window","devicePixelRatio","innerWidth","innerHeight","mat","Configuration","dpr","is_mobile","is_ios","is_ipad","vertex_image_unit_supported","min_zoom_distance","max_zoom_distance","max_zoom_distance_scale","zoom_speed","use_fxaa","use_ssaa","background_color","touch_sensitivity","zoom_sensitivity","spin_sensitivity","three_finger_rotation_speed","three_finger_allowed_x_rotation_offset","three_finger_allowed_y_rotation_offset","use_touch_gestures","texture_float_supported","use_ortographic","hover_enabled","rotation_enabled","transparency_amount","show_debug_sphere_on_floor_selection","show_debug_sphere_on_steps_in_floor","display_cleanup_log","navigation_speed_damping","navigation_speed","out_of_bounds_force","mouse_zoom_speed","touch_zoom_speed","json","configuration","Time","___time","Clock","__delta_time","__elapsed_time","__allocated_time","getDelta","getElapsedTime","delta_time","elapsed_time","time","KeyboardInput","ctrlz_pressed","ctrlz_fired","keys","document","onkeydown","on_key_down","bind","onkeyup","on_key_up","onkeypress","on_key_press","e","keyCode","ctrlKey","key","press_key","release_keys","pressed","fired","down","key_name","up","keyboard_input","Input","mouse_pos","last_mouse_pos","mouse_dir","__clicked_time","is_mouse_down","is_mouse_up","rotation_angle","_normalized_mouse_pos","left_mouse_button_down","left_mouse_button_pressed","left_mouse_button_released","middle_mouse_button_down","right_mouse_button_down","right_mouse_button_pressed","right_mouse_button_released","mousewheel","previous_scale","previous_rotation","previous_rotation_dirty","mouse_str","tmp_mouse_velocity","bounding_client","multitouch_active","tapped","initial_zoom_distance","zoom_center","zoom_started","touch_zoom","multi_touch_dir","wheel_delta","mac","pinching_with_trackpad","scrolling_with_trackpad","scrolling_with_mouse","double_click","canvas","rect","getBoundingClientRect","left","top","container","region","ZingTouch","Region","init","scope","set_mouse_pos","addEventListener","on_double_click","on_focus_lost","one_finger_pan","Pan","numInputs","register","event","detail","data","on_mouse_move","two_fingers_pan","set","change","three_fingers_pan","touch_zoom_delta","distance","last_zoom_distance","center","gesture","Gesture","end","inputs","state","element","on_mouse_up","start","on_mouse_down","on_mouse_wheel","preventDefault","clientX","clientY","ev","events","get_os","is_mac","console","log","deltaY","is_int","Math","abs","current","originalEvent","which","middle_mouse_button_released","rotation_delta","userAgent","navigator","platform","os","test","n","clear","normalized_mouse_pos","INPUT","Mesh","Sphere","radius","color","geometry","SphereBufferGeometry","material","MeshBasicMaterial","_selectable_material","__get_selectable_material","original_material","stored_layers","layers","mask","Arrow","dir","cone_height","cylinder_height","cylinder_geo","CylinderBufferGeometry","translate","cone_geometry","ConeBufferGeometry","buffer_geometry","BufferGeometryUtils","mergeBufferGeometries","rotateX","quaternion","setFromUnitVectors","Vector3","scale","z","SceneManager","Scene","name","scene","scene_manager","MathUtilities","from_range_start_value","from_range_end_value","to_range_start_value","to_range_end_value","min","max","rgb","r","round","toString","g","b","points","plane","projected_point","points_on_plane","projectPoint","from","to","t","elements","lerp","x1","x2","CameraUtilities","tmp_mat","Matrix4","tmp_vec","tmp_vec2","Plane","ray","Ray","tmp_size","tmp_unproj","applyQuaternion","NDC","v_fov","fov","PI","h_fov","atan","tan","aspect","distV","far","distH","normalize","plane_position","plane_normal","setFromNormalAndCoplanarPoint","get_forward_dir","isPerspectiveCamera","position","unproject_mouse_position","unproject","intersectPlane","zoom_scale","world_space_center","setFromPoints","camera_forward","project_points_on_plane","projected_points_center","box","Box3","getCenter","right","cross","inverse_mat","getInverse","applyMatrix4","getSize","projected_center","zoom","get_zoom_to_fit_rect","bb","isOrthographicCamera","obj_x","obj_y","object_aspect","aspect_ratio","object","getWorldPosition","project","bottom","updateProjectionMatrix","camera_utilities","Capabilities","max_anisotropy","vertex_texture_sampler_available","fp_textures_available","capabilities","EasingFunctions","sin","pow","sqrt","EventManager","queue","zoom_changed_evt","store_clickd_evt","point_selected_evt","config_changed","path_substep_completed","path_completed","go_to_store_requested_evt","resource_loaded_evt","service_clicked_evt","unit_pos_updated_evt","floor_changed_evt","on_enter_floor_navigation","on_exit_floor_navigation","on_enter_floor_selection","on_exit_floor_selection","on_enter_outside_navigation","on_exit_outside_navigation","step_selected_evt","payload","callback","fire","store_id","hit_data","step_number","step_index","resource","service","unit_data","floor_id","event_manager","Object3D","AxisHelper","blueAxisMat","LineBasicMaterial","depthFunc","AlwaysDepth","blueAxisGeo","Geometry","vertices","blueAxisLine","Line","renderOrder","greenAxisMat","greenAxisGeo","greenAxisLine","redAxisMat","linewidth","redAxisGeo","computeLineDistances","redAxisLine","add","BaseRender","context","renderer","RenderLayers","OutlineRender","webgl","main_rt","WebGLRenderTarget","rt1","rt2","compose_material","__get_compose_material","copy_material","__get_copy_material","box_blur_material","__get_box_blur_material","background_material","__get_background_material","copy_plane","PlaneGeometry","frustumCulled","copy_scene","w","h","setSize","_Screen","updateMatrix","updateMatrixWorld","enable","opaque","transparent","disable","outline","_renderer","setClearColor","clear_color","clearTarget","overrideMaterial","render","_MainTex","texture","_SampleDir","_Blur","copy_vert","copy_frag","depthTest","depthWrite","box_blur_frag","compose_frag","extensions","derivatives","Vector4","background_frag","autoClear","UI","ui_elements","_tmp_normalized_pos","autoUpdate","mesh","remove","copy","update","render_ui","current_clicked_element","resize","ui","BlitMaterial","frag_shader","vert_shader","defines","_Resolution","blending","NoBlending","ClearDepthNormalMaterial","clear_depth","clear_normal","_DepthNormal","DepthNormalMaterial","_FarPlane","DepthAndNormalsRenderer","RT","clear_depth_normal_mat","depth_normal_material","graphics","__resize_RT_if_necessary","blit_clear_with_material","far_plane","Blitter","_blit_scene","_blit_material","_blit_quad","PlaneBufferGeometry","_blit_camera","OrthographicCamera","src","dst","setRenderTarget","dst_RT","Graphics","blitter","no_render","current_render_mode","generateDepthNormalTexture","depth_and_normals_renderer","WebGLRenderer","antialias","preserveDrawingBuffer","alpha","setPixelRatio","get","domElement","getMaxAnisotropy","maxVertexTextures","floatVertexTextures","new_state","constructor","on_exit","on_enter","override_mat","__apply_override_material","buffer","readRenderTargetPixels","clear_stencil","clear_alpha","offsetWidth","offsetHeight","update_size","update_native_size","src_RT","blit_with_material","blit","blob_callback","ctx","old_width","old_height","divisions_x","parseInt","ceil","new_width","divisions_y","new_height","ctx_2D","setViewOffset","drawImage","toBlob","clearViewOffset","blob","link","createElement","download","href","URL","createObjectURL","click","onclick","requestAnimationFrame","revokeObjectURL","a","removeAttribute","render_target","Cube","segments","BoxGeometry","Debug","Vector3_one","Vector3_zero","canvas_renderer","rt_debug","axis","position_2d","fillStyle","fillRect","clearRect","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","geo","line","pos","cube","depth","distanceTo","sub","forward_dir","basic_color_vert","basic_color_frag","setFromCenterAndSize","helper","Box3Helper","sphere","SphereGeometry","side","DoubleSide","sphere1","curve","options","offset","draw_line","DEBUG","NormalRender","ObjectUtilities","xml","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","xml_to_json","old","PerspectiveCamera","near","GeometryBatch","batch_width","data_textures","object_names","zero_offset","write_offset","uniform_dirty_count","tmp_uploaded_data_count","needsUpdate","uniform_name","default_value_v3","src_tex","__create_rgb_texture","dst_tex","one_pixel_tex","new_data_tex","__add_data_texture","__flood_data_texture_rgb","default_value_v4","__create_rgba_texture","__flood_data_texture_rgba","__create_rgba_float_texture","object_name","vector3","use_r","use_g","use_b","obj_index","__get_object_index","data_texture","__get_data_texture","__set_pixel_rgb","one_pixel","last_accessed_index","dirty_count","vector4","use_a","__set_pixel_rgba","upload_budget","__partial_texture_data_upload","__full_texture_data_upload","texture_data","copyTextureToTexture","floor","image","v3","v4","Uint8Array","DataTexture","RGBFormat","RGBAFormat","Float32Array","RGBA","FloatType","conosle","error","src_texture","dst_texture","one_pixel_text","dispose","GeometryBatcher","batches","buffer_geometries","attr_accessor_uvs","texture_width","ceilPowerOfTwo","__init_uv_array","uv_index","vertex_count","getAttribute","count","buffer_attribute","BufferAttribute","setAttribute","upload_texture_data","uvs","geometry_batcher","RenderLoop","target_application","_frame_id","is_running","frames_passed","__update","post_start","on_pre_render","on_post_render","cancelAnimationFrame","AbstractLoader","resource_id","url","progress","has_finished","has_error","error_message","message","resource_container","TextureLoader","loader","load","set_resource","__update_progress","__loading_ended","__set_error","GLTFLoader","gltf","xhr","loaded","total","msg","DAELoader","ColladaLoader","TextLoader","FileLoader","CubemapLoader","CubeTextureLoader","urls","AudioLoader","listener","loop","volume","voluem","sound","Audio","audio","setBuffer","setLoop","setVolume","get_resource","JSONLoader","username","password","headers","btoa","fetch","then","__parse_to_json","__set_resource","response","OBJLoader","ResourceContainer","resources","fire_resource_loaded","ResourceBatch","batch_name","resource_loaders","print_error","finished","TimeUtilities","start_date","end_date","startDate","moment","parseZone","endDate","duration","diff","days","asDays","days_array","date","endOf","startOf","duration_in_seconds","asSeconds","absolute_start_date","absolute_end_date","Validation","Number","str","JSON","parse","GeometryUtilities","geometry_buffer","indices","positions","bar_coordinates","getX","getY","getZ","BufferGeometry","add_barycentric_attribute","non_indexed_geometry_buffer","Grid","grid_vert","grid_frag","plane_geometry","non_indexed_geometry","convert_to_non_indexed_geometry","rotation","Components"],"mappings":"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","file":"index.js","sourceRoot":"src","sourcesContent":["export default class ArrayUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n\r\n  static merge_from_to(source, target)\r\n  {\r\n    target.push.apply( target, source );\r\n  }\r\n\r\n  static expand_vec3_array(array, size)\r\n  {\r\n    let items_left_count = size - array.length;\r\n\r\n\t\tfor (let i = 0;i < items_left_count;i++)\r\n    {\r\n      array.push(array[i].clone());\r\n    }\r\n  }\r\n\r\n  static remove_elem(array, elem)\r\n  {\r\n    let index = array.indexOf(elem);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n","export default class BaseApplication\r\n{\r\n\tstart() {}\r\n\tpost_start() {}\r\n\tend() {}\r\n\tupdate() {}\r\n\ton_post_render() {}\r\n\ton_pre_render() {}\r\n\tresources_fully_loaded() {}\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n  vUv = uv;\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(_Color, 1.0);\\n}\";","import basic_vert from '/shaders/basic_color/basic_color_vert';\r\nimport basic_frag from '/shaders/basic_color/basic_color_frag';\r\n\r\nexport default class BaseShaderMaterial extends THREE.ShaderMaterial\r\n{\r\n\tconstructor(vert, frag, uniforms)\r\n\t{\r\n\r\n\t\tsuper({\r\n\t\t\tvertexShader: vert \t\t|| basic_vert,\r\n\t\t\tfragmentShader: frag \t|| basic_frag,\r\n\t\t\tuniforms: uniforms \t\t|| {\r\n\t\t\t\t_Color: {value: new THREE.Color(\"#FF0000\")}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n\r\n","class CameraManager {\r\n\tconstructor()\r\n\t{\r\n\t\tthis._current = undefined;\r\n\t}\r\n\r\n\tset current(camera)\r\n\t{\r\n\t\tthis._current = camera;\r\n\t}\r\n\r\n\tget current()\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n}\r\n\r\nconst camera_manager = new CameraManager();\r\nmodule.exports = camera_manager;\r\n","class Screen {\r\n\tconstructor()\r\n\t{\r\n\t\tthis.width = 1;\r\n\t\tthis.height = 1;\r\n\t\tthis.width_height = new THREE.Vector2(this.width, this.height);\r\n\r\n\t\tthis.screen_materials = [];\r\n\r\n\t\tthis.native_width = this.width;\r\n\t\tthis.native_height = this.height;\r\n\r\n\t\tthis.pixel_size = new THREE.Vector2(1/this.width, 1/this.height);\r\n\t}\r\n\r\n\tupdate_size(width, height)\r\n\t{\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.pixel_size = new THREE.Vector2(1/this.width, 1/this.height) ;\r\n\r\n\t\tthis.width_height.x = width  ;\r\n\t\tthis.width_height.y = height ;\r\n\r\n\t\tlet i = this.screen_materials.length;\r\n\t\twhile(i--)\r\n\t\t{\r\n\t\t\tthis.screen_materials[i].uniforms._ScreenSize.value = this.width_height;\r\n\t\t}\r\n\t}\r\n\r\n\tapply_pixel_density_v2(vector2)\r\n\t{\r\n\t\tvector2.multiplyScalar(1/window.devicePixelRatio);\r\n\r\n\t\treturn vector2;\r\n\t}\r\n\tapply_pixel_density(value)\r\n\t{\r\n\t\treturn value * (1/window.devicePixelRatio);\r\n\t}\r\n\tupdate_native_size()\r\n\t{\r\n\t\tthis.native_width = window.innerWidth;\r\n\t\tthis.native_height = window.innerHeight;\r\n\t}\r\n\r\n\tadd_screen_material(mat)\r\n\t{\r\n\t\tthis.screen_materials.push(mat);\r\n\t\tmat.uniforms._ScreenSize.value = this.width_height;\r\n\t}\r\n\tremove_screen_material(mat)\r\n\t{\r\n    let index = this.screen_materials.indexOf(mat);\r\n    if (index > -1) {\r\n      this.screen_materials.splice(index, 1);\r\n    }\r\n\t}\r\n\r\n\tget_pixel_size()\r\n\t{\r\n\t\treturn this.pixel_size;\r\n\t}\r\n\r\n\tget aspect_ratio()\r\n\t{\r\n\t\treturn this.width/this.height;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default new Screen();\r\n","/*\r\n\r\n  A configuration class used as a singleton\r\n\r\n*/\r\n\r\nclass Configuration {\r\n  constructor(parameters = {}) {\r\n\r\n    this.dpr = window.devicePixelRatio ? window.devicePixelRatio : 1;\r\n    this.is_mobile = false;\r\n    this.is_ios = false;\r\n    this.is_ipad = false;\r\n\r\n    this.vertex_image_unit_supported = true;\r\n\r\n    this.min_zoom_distance = 3000;\r\n\r\n    this.max_zoom_distance = 40000;\r\n    this.max_zoom_distance_scale = 1.1;\r\n    this.zoom_speed = 0.1;\r\n\r\n\r\n\r\n    this.use_fxaa = false;\r\n    this.use_ssaa = true;\r\n\r\n\r\n\r\n    this.background_color = new THREE.Color(0.768,0.768,0.768);\r\n\r\n\r\n\r\n\r\n    //TOUCH\r\n    this.touch_sensitivity = 1.5;\r\n    this.zoom_sensitivity = 0.7;\r\n    this.spin_sensitivity = 2;\r\n    this.three_finger_rotation_speed = 3;\r\n    this.three_finger_allowed_x_rotation_offset = 30;\r\n    this.three_finger_allowed_y_rotation_offset = 20;\r\n\r\n\r\n    this.use_touch_gestures = false;\r\n\r\n\r\n    this.texture_float_supported = false;\r\n\r\n    this.use_ortographic = true;\r\n\r\n    this.hover_enabled = false;\r\n    this.rotation_enabled = false;\r\n\r\n    this.transparency_amount = 0.2;\r\n\r\n    this.show_debug_sphere_on_floor_selection = false;\r\n    this.show_debug_sphere_on_steps_in_floor = false;\r\n    this.display_cleanup_log = false;\r\n\r\n\r\n    this.navigation_speed_damping = 0.74;\r\n    this.navigation_speed = 200;\r\n    this.out_of_bounds_force = 1.5;\r\n    this.mouse_zoom_speed = 0.05;\r\n    this.touch_zoom_speed = 0.5;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  from_json(json)\r\n  {\r\n\r\n\r\n  }\r\n}\r\n\r\nconst configuration = new Configuration();\r\nmodule.exports = configuration;\r\n","class Time\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.___time = new THREE.Clock();\r\n\t\tthis.__delta_time = 0;\r\n\t\tthis.__elapsed_time = 0;\r\n\t\tthis.__allocated_time = new THREE.Vector2(0,0);\r\n\t}\r\n\r\n\r\n\tget delta_time()\r\n\t{\r\n\t\treturn this.__delta_time < 0.4? this.__delta_time : 0.016;\r\n\t}\r\n\tget elapsed_time()\r\n\t{\r\n\t\treturn this.__elapsed_time;\r\n\t}\r\n\tget shader_time()\r\n\t{\r\n\t\tthis.__allocated_time.x = this.delta_time;\r\n\t\tthis.__allocated_time.y = this.elapsed_time;\r\n\t\treturn  this.__allocated_time;\r\n\t}\r\n\r\n\t__update()\r\n\t{\r\n\t\tthis.__delta_time = this.___time.getDelta();\r\n\t\tthis.__elapsed_time = this.___time.getElapsedTime();\r\n\t}\r\n}\r\n\r\nconst time = new Time();\r\nmodule.exports = time;\r\n\r\n","export class KeyboardInput\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.ctrlz_pressed = false;\r\n\t\tthis.ctrlz_fired = false;\r\n\r\n\t\tthis.keys = [];\r\n\t}\r\n\r\n\tinit()\r\n\t{\r\n\t\tdocument.onkeydown \t= this.on_key_down.bind(this);\r\n\t\tdocument.onkeyup \t\t= this.on_key_up.bind(this);\r\n\t\tdocument.onkeypress = this.on_key_press.bind(this);\r\n\t}\r\n\r\n\ton_key_down(e)\r\n\t{\r\n\t\tif(e.keyCode == 90 && e.ctrlKey && !this.ctrlz_fired)\r\n    {\r\n    \tthis.ctrlz_pressed = true;\r\n    \tthis.ctrlz_fired = true;\r\n    } \r\n    if(e.key)\r\n    {\r\n    \tthis.press_key(e.key);\r\n    }\r\n\t}\r\n\ton_key_press(e)\r\n\t{\r\n\t\t\r\n\t}\r\n\ton_key_up(e)\r\n\t{\r\n\t\tthis.release_keys();\r\n\t}\r\n\r\n\tclear()\r\n\t{\r\n\t\tthis.ctrlz_pressed = false;\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tthis.keys[i].pressed = false;\r\n\t\t}\r\n\t}\r\n\r\n\trelease_keys()\r\n\t{\r\n\t\tthis.ctrlz_fired = false;\r\n\t\t\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tthis.keys[i].fired = false;\r\n\t\t\tthis.keys[i].down = false;\r\n\t\t}\r\n\t}\r\n\r\n\tpress_key(key)\r\n\t{\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key && !this.keys[i].fired)\r\n\t\t\t{\r\n\t\t\t\tthis.keys[i].pressed = true;\r\n\t\t\t\tthis.keys[i].down = true;\r\n\t\t\t\tthis.keys[i].fired = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tkey_is_pressed(key)\r\n\t{\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key)\r\n\t\t\t{\r\n\t\t\t\treturn this.keys[i].pressed;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tkey_is_down(key)\r\n\t{\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key)\r\n\t\t\t{\r\n\t\t\t\treturn this.keys[i].down;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tregister_key(key)\r\n\t{\r\n\t\tthis.keys.push(\r\n\t\t{\r\n\t\t\tkey_name: key,\r\n\t\t\tpressed: false,\r\n\t\t\tdown: false,\r\n\t\t\tup: false,\r\n\t\t\tfired: false\r\n\r\n\t\t});\r\n\t}\r\n\tunregister_key(key_name)\r\n\t{\r\n\t\tlet key = undefined;\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key_name)\r\n\t\t\t\tkey = this.keys[i];\r\n\t\t}\r\n\r\n\t\tlet index = this.keys.indexOf(key);\r\n    if (index > -1) {\r\n      this.keys.splice(index, 1);\r\n    }\r\n\t}\r\n\r\n}\r\n\r\nconst keyboard_input = new KeyboardInput();\r\nmodule.exports = keyboard_input;","import Screen from '/Screen';\r\nimport Configuration from '/Configuration';\r\nimport Time from '/Time';\r\nimport KeyboardInput from '/KeyboardInput';\r\n\r\nclass Input {\r\n\tconstructor() {\r\n\t\tthis.mouse_pos = new THREE.Vector2();\r\n\t\tthis.last_mouse_pos = new THREE.Vector2();\r\n\t\tthis.mouse_dir = new THREE.Vector2();\r\n\r\n\r\n\t\tthis.__clicked_time = 0;\r\n\t\tthis.__elapsed_time = 0;\r\n\t\tthis.__delta_time = 0;\r\n\r\n\t\tthis.is_mouse_down = false;\r\n\t\tthis.is_mouse_up = false;\r\n\r\n\t\tthis.rotation_angle = 0;\r\n\r\n\t\tthis._normalized_mouse_pos = new THREE.Vector2(0, 0);\r\n\r\n\t\tthis.left_mouse_button_down = false;\r\n\t\tthis.left_mouse_button_pressed = false;\r\n\t\tthis.left_mouse_button_released = false;\r\n\t\tthis.middle_mouse_button_down = false;\r\n\t\tthis.right_mouse_button_down = false;\r\n\t\tthis.right_mouse_button_pressed = false;\r\n\t\tthis.right_mouse_button_released = false;\r\n\r\n\t\tthis.mousewheel = 0;\r\n\r\n\t\tthis.previous_scale = 0;\r\n\t\tthis.previous_rotation = 0;\r\n\t\tthis.previous_rotation_dirty = true;\r\n\r\n\t\tthis.mouse_str = \"mouse\";\r\n\r\n\t\tthis.tmp_mouse_velocity = new THREE.Vector2();\r\n\t\tthis.bounding_client = new THREE.Vector2();\r\n\r\n\t\tthis.multitouch_active = false;\r\n\r\n\t\tthis.tapped = false;\r\n\t\tthis.initial_zoom_distance = 100;\r\n\t\tthis.zoom_center = new THREE.Vector2();\r\n\t\tthis.zoom_started = false;\r\n\t\tthis.touch_zoom = 1;\r\n\r\n\t\tthis.multi_touch_dir = new THREE.Vector2();\r\n\t\tthis.wheel_delta = 0;\r\n\r\n\t\tthis.mac = 'mac';\r\n\t\tthis.pinching_with_trackpad = false;\r\n\t\tthis.scrolling_with_trackpad = false;\r\n\t\tthis.scrolling_with_mouse = false;\r\n\r\n\t\tthis.double_click = false;\r\n\r\n\t\tthis.canvas = undefined;\r\n\t}\r\n\r\n\tmouse_is_within_bounds() {\r\n\t\tlet rect = this.canvas.getBoundingClientRect();\r\n\r\n\t\treturn this.mouse_pos.x > rect.left &&\r\n\t\t\tthis.mouse_pos.x < rect.left + rect.width &&\r\n\t\t\tthis.mouse_pos.y > rect.top &&\r\n\t\t\tthis.mouse_pos.y < rect.top + rect.height;\r\n\t}\r\n\r\n\tinit(container, canvas) {\r\n\t\tthis.canvas = canvas;\r\n\r\n\t\tlet region = new ZingTouch.Region(container, false, false);\r\n\t\tKeyboardInput.init();\r\n\r\n\t\tlet scope = this;\r\n\r\n\t\tregion.bind(container, 'tap', function (e) {\r\n\t\t\tscope.tapped = true;\r\n\t\t\tscope.set_mouse_pos(e);\r\n\r\n\t\t});\r\n\r\n\t\twindow.addEventListener('dblclick', this.on_double_click.bind(this));\r\n\r\n\t\tcontainer.addEventListener('mouseleave', this.on_focus_lost.bind(this));\r\n\r\n\t\t// region.bind(container, 'pan', function(e){\r\n\t\t// \tscope.on_mouse_move(e);\r\n\t\t// \tconsole.log(\"PAN\");\r\n\t\t// });\r\n\t\tlet one_finger_pan = new ZingTouch.Pan({ numInputs: 1 });\r\n\t\tregion.register(\"one_finger_pan\", one_finger_pan);\r\n\t\tregion.bind(container, \"one_finger_pan\", (event) => {\r\n\t\t\tif (event.detail.data.length > 0) {\r\n\t\t\t\t// scope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\t// scope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t\tscope.on_mouse_move(event);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\tlet two_fingers_pan = new ZingTouch.Pan({ numInputs: 2 });\r\n\t\tregion.register(\"two_fingers_pan\", two_fingers_pan);\r\n\t\tregion.bind(container, \"two_fingers_pan\", (event) => {\r\n\t\t\tif (event.detail.data.length > 0) {\r\n\r\n\t\t\t\t// scope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\t// scope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t\tscope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\tscope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet three_fingers_pan = new ZingTouch.Pan({ numInputs: 3 });\r\n\t\tregion.register(\"three_fingers_pan\", three_fingers_pan);\r\n\t\tregion.bind(container, \"three_fingers_pan\", (event) => {\r\n\t\t\tif (event.detail.data.length > 0) {\r\n\t\t\t\tscope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\tscope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tregion.bind(container, 'distance', function (e) {\r\n\r\n\t\t\tif (!scope.zoom_started) {\r\n\t\t\t\tscope.zoom_started = true;\r\n\t\t\t\tscope.touch_zoom_delta = 0;\r\n\t\t\t\tscope.initial_zoom_distance = e.detail.distance;\r\n\t\t\t\tscope.last_zoom_distance = e.detail.distance;\r\n\r\n\t\t\t\tscope.zoom_center.set(e.detail.center.x, e.detail.center.y);\r\n\t\t\t\tscope.mouse_pos.set(e.detail.center.x, e.detail.center.y);\r\n\t\t\t}\r\n\t\t\tscope.touch_zoom_delta = e.detail.distance - scope.last_zoom_distance;\r\n\t\t\tscope.last_zoom_distance = e.detail.distance;\r\n\t\t\tscope.touch_zoom = 1;\r\n\t\t}, false);\r\n\r\n\t\tlet gesture = new ZingTouch.Gesture();\r\n\t\tgesture.end = (inputs, state, element) => { scope.on_mouse_up(inputs) }\r\n\t\tgesture.start = (inputs, state, element) => { scope.on_mouse_down(inputs) }\r\n\t\tregion.register('shortTap', gesture);\r\n\r\n\t\tregion.bind(container, 'shortTap', function (e) {\r\n\t\t});\r\n\r\n\t\twindow.addEventListener('wheel', this.on_mouse_wheel.bind(this))\r\n    container.addEventListener( 'contextmenu', (event)=>{event.preventDefault()}, false );\r\n\r\n\t\tcontainer.addEventListener(\"mousemove\", (event) => {\r\n\t\t\tthis.mouse_pos.x = event.clientX;\r\n\t\t\tthis.mouse_pos.y = event.clientY;\r\n\t\t\tthis.scrolling_with_mouse = false;\r\n\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t});\r\n\t}\r\n\r\n\tset_mouse_pos(ev) {\r\n\t\tthis.mouse_pos.x = ev.detail.events[0].clientX;\r\n\t\tthis.mouse_pos.y = ev.detail.events[0].clientY;\r\n\t}\r\n\r\n\tget normalized_mouse_pos() {\r\n\t\tthis._normalized_mouse_pos.x = (this.mouse_pos.x / Screen.width) * 2.0 - 1;\r\n\t\tthis._normalized_mouse_pos.y = -1 * ((this.mouse_pos.y / Screen.height) * 2.0 - 1);\r\n\t\treturn this._normalized_mouse_pos;\r\n\t}\r\n\r\n\tget NDC() {\r\n\t\treturn this.normalized_mouse_pos;\r\n\t}\r\n\r\n\tis_mac() {\r\n\t\treturn this.get_os() === this.mac;\r\n\t}\r\n\r\n\ton_double_click(event) {\r\n\t\tthis.double_click = true;\r\n\t}\r\n\r\n\ton_mouse_wheel(event) {\r\n\r\n\r\n\t\tthis.mouse_pos.x = event.clientX;\r\n\t\tthis.mouse_pos.y = event.clientY;\r\n\r\n\t\t// User is using a mac\r\n\t\tif (this.is_mac()) {\r\n\t\t\t// User is pinching\r\n\t\t\tif (event.ctrlKey) {\r\n\t\t\t\t// Negative values means pinch in.\r\n\t\t\t\t// Positive values means pinch out.\r\n\t\t\t\tconsole.log(\"Pinching with a touchpad\", event.deltaY)\r\n\t\t\t\tthis.pinching_with_trackpad = true;\r\n\t\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\t\tthis.scrolling_with_mouse = false;\r\n\t\t\t\t// User is scrolling\r\n\t\t\t} else {\r\n\t\t\t\t// User is using the touchpad\r\n\t\t\t\tif (this.is_int(event.deltaY)) {\r\n\t\t\t\t\t// Negative values means scroll up\r\n\t\t\t\t\t// Positive values means scroll down\r\n\t\t\t\t\t// console.log(\"Scrolling with a touchpad\", (event.deltaY))\r\n\t\t\t\t\t// 350 is aprox the maximum value of deltaY on touchpad scroll\r\n\t\t\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t\t\t\tthis.scrolling_with_trackpad = true;\r\n\t\t\t\t\tthis.scrolling_with_mouse = false;\r\n\r\n\t\t\t\t\tthis.wheel_delta = 1 - (event.deltaY / 350) * 2.0 - 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Negative values means scroll up\r\n\t\t\t\t\t// Positive values means scroll down\r\n\t\t\t\t\t// console.log(\"Scrolling with a mouse\", event.deltaY)\r\n\t\t\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\t\t\tthis.scrolling_with_mouse = true;\r\n\r\n\t\t\t\t\tthis.wheel_delta = event.deltaY / Math.abs(event.deltaY);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//probably windows\r\n\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\tthis.scrolling_with_mouse = true;\r\n\r\n\t\t\tthis.wheel_delta = event.deltaY / Math.abs(event.deltaY);\r\n\t\t}\r\n\t}\r\n\r\n\ton_mouse_down(inputs) {\r\n\t\tthis.mouse_pos.x = inputs[0].current.clientX;\r\n\t\tthis.mouse_pos.y = inputs[0].current.clientY;\r\n\r\n\t\tthis.multitouch_active = inputs.length > 1;\r\n\r\n\t\tthis.mouse_dir.x = 0;\r\n\t\tthis.mouse_dir.y = 0;\r\n\r\n\r\n\t\tthis.__clicked_time = this.__elapsed_time;\r\n\t\tthis.is_mouse_down = true;\r\n\t\tthis.is_mouse_up = false;\r\n\r\n\t\tswitch (inputs[0].current.originalEvent.which) {\r\n\t\t\tcase 1:\r\n\t\t\t\tthis.left_mouse_button_down = true;\r\n\t\t\t\tthis.left_mouse_button_pressed = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: this.middle_mouse_button_down = true; break;\r\n\t\t\tcase 3:\r\n\t\t\t\tthis.right_mouse_button_down = true;\r\n\t\t\t\tthis.right_mouse_button_pressed = true;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: this.left_mouse_button_down = true; this.left_mouse_button_pressed = true; break;\r\n\t\t}\r\n\r\n\r\n\t\tthis.wheel_delta = 0;\r\n\t\tthis.previous_scale = 0;\r\n\t\tthis.previous_rotation = 0;\r\n\r\n\r\n\t}\r\n\r\n\tmouse_clicked() {\r\n\t\treturn this.tapped;\r\n\t}\r\n\r\n\ton_mouse_up(inputs) {\r\n\t\t// this.left_mouse_button_released = true;\r\n\t\tthis.multitouch_active = inputs ? (inputs.length > 1) : false;\r\n\t\tthis.is_mouse_up = true;\r\n\t\tthis.zoom_started = false;\r\n\t\tthis.touch_zoom = 1;\r\n\t\tthis.mouse_dir.x = 0;\r\n\t\tthis.mouse_dir.y = 0;\r\n\t\tthis.previous_scale = 0;\r\n\t\tthis.previous_rotation = 0;\r\n\t\tthis.wheel_delta = 0;\r\n\r\n\t\tthis.left_mouse_button_down = false;\r\n\t\tthis.middle_mouse_button_down = false;\r\n\t\tthis.right_mouse_button_down = false;\r\n\t\tif (inputs) {\r\n\t\t\tswitch (inputs[0].current.originalEvent.which) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.left_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.middle_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.right_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.left_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.is_mouse_down = false;\r\n\t\tthis.previous_rotation_dirty = true;\r\n\t\tthis.rotation_delta = 0;\r\n\t}\r\n\r\n\r\n\ton_focus_lost() {\r\n\t\tthis.on_mouse_up();\r\n\t\tthis.left_mouse_button_released = true;\r\n\t\tthis.middle_mouse_button_released = true;\r\n\t\tthis.right_mouse_button_released = true;\r\n\t\tthis.left_mouse_button_released = true;\r\n\r\n\t}\r\n\r\n\ttime_since_last_mouse_down() {\r\n\t\treturn this.__elapsed_time - this.__clicked_time;\r\n\t}\r\n\r\n\ton_mouse_move(event) {\r\n\t\tif (event.detail.data.length > 0) {\r\n\t\t\tthis.set_mouse_pos(event);\r\n\t\t\tthis.mouse_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t// this.mouse_dir.x *=  Screen.height / Screen.width;\r\n\r\n\t\t\t// this.mouse_dir.multiplyScalar(this.__delta_time/window.devicePixelRatio);\r\n\t\t}\r\n\t}\r\n\r\n\tget_os() {\r\n\t\tvar userAgent = window.navigator.userAgent,\r\n\t\t\tplatform = window.navigator.platform,\r\n\t\t\tmacosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\r\n\t\t\twindowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\r\n\t\t\tiosPlatforms = ['iPhone', 'iPad', 'iPod'],\r\n\t\t\tos = null;\r\n\r\n\t\tif (macosPlatforms.indexOf(platform) !== -1) {\r\n\t\t\tos = 'mac';\r\n\t\t} else if (iosPlatforms.indexOf(platform) !== -1) {\r\n\t\t\tos = 'ios';\r\n\t\t} else if (windowsPlatforms.indexOf(platform) !== -1) {\r\n\t\t\tos = 'windows';\r\n\t\t} else if (/Android/.test(userAgent)) {\r\n\t\t\tos = 'android';\r\n\t\t} else if (!os && /Linux/.test(platform)) {\r\n\t\t\tos = 'linux';\r\n\t\t}\r\n\r\n\t\treturn os;\r\n\t}\r\n\r\n\tis_int(n) {\r\n\t\treturn n % 1 === 0;\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\tthis.__elapsed_time = Time.elapsed_time;\r\n\t\tthis.__delta_time = Time.delta_time;\r\n\t\tthis.is_mouse_up = false;\r\n\t\tthis.wheel_delta = 0;\r\n\t\tthis.rotation_delta = 0;\r\n\r\n\t\tthis.double_click = false;\r\n\r\n\r\n\t\tthis.tapped = false;\r\n\t\tthis.mouse_dir.multiplyScalar(0);\r\n\t\tthis.multi_touch_dir.multiplyScalar(0);\r\n\t\tthis.left_mouse_button_pressed = false;\r\n\t\tthis.left_mouse_button_released = false;\r\n\r\n\t\tthis.right_mouse_button_pressed = false;\r\n\t\tthis.right_mouse_button_released = false;\r\n\t\tKeyboardInput.clear();\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst INPUT = new Input();\r\nmodule.exports = INPUT;\r\n","export default class Sphere extends THREE.Mesh\r\n{\r\n\tconstructor(radius, color)\r\n\t{\r\n    color = color || \"#FF0000\";\r\n    radius = radius || 1;\r\n    let geometry = new THREE.SphereBufferGeometry( radius, 64, 64);\r\n    let material = new THREE.MeshBasicMaterial( {color: color} );\r\n\t\tsuper(geometry, material);\r\n\t}\r\n}","module.exports=\"#define GLSLIFY 1\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n  //gl_Position.zw -= 0.1;\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(_Color, 1.0);\\n}\";","import vert from '/editor/shaders/object_picker_vert';\r\nimport frag from '/editor/shaders/object_picker_frag';\r\nexport default class Mesh extends THREE.Mesh\r\n{\r\n\tconstructor(geometry, material)\r\n\t{\r\n\t\tsuper(geometry, material);\r\n\r\n\t\tthis._selectable_material = this.__get_selectable_material();\r\n\t\tthis.original_material = this.material;\r\n\t\tthis.stored_layers = this.layers.mask;\r\n\t}\r\n\r\n\t__get_selectable_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n\t\t\tuniforms: {\r\n\t\t\t\t_Color: {value: new THREE.Color()}\r\n\t\t\t},\r\n\t\t\tvertexShader: vert,\r\n      fragmentShader: frag\r\n\t\t});\r\n\t}\r\n\r\n\trestore_material()\r\n\t{\r\n\t\tthis.material = this.original_material;\r\n\t}\r\n\r\n\tstore_layer_state()\r\n\t{\r\n\t\tthis.stored_layers = this.layers.mask;\r\n\t}\r\n\trestore_layer_state()\r\n\t{\r\n\t\tthis.layers.mask = this.stored_layers;\r\n\t}\r\n\r\n\tget selectable_material()\r\n\t{\r\n\t\treturn this._selectable_material;\r\n\t}\r\n}\r\n","import Mesh from '/Mesh';\r\n\r\nexport default class Arrow extends Mesh\r\n{\r\n\tconstructor(color, length, dir)\r\n\t{\r\n\t\tcolor = color || \"#FF0000\";\r\n\t\tlength = length || 1;\r\n\r\n\t\tlet cone_height = 0.4;\r\n\t\tlet cylinder_height = length - cone_height;\r\n\t\tlet cylinder_geo = new THREE.CylinderBufferGeometry( 0.01, 0.01, cylinder_height, 32 );\r\n\t\tcylinder_geo.translate(0,cylinder_height/2,0);\r\n\t\tlet cone_geometry = new THREE.ConeBufferGeometry( 0.1, cone_height, 32 );\r\n\t\tcone_geometry.translate(0, cylinder_height+cone_height/2, 0);\r\n\t  let buffer_geometry = THREE.BufferGeometryUtils.mergeBufferGeometries([cylinder_geo, cone_geometry]);\r\n\t  buffer_geometry.rotateX(3.14/2);\r\n    let material = new THREE.MeshBasicMaterial( {color: color} );\r\n\t\tsuper(buffer_geometry, material);\r\n\r\n\t\tif(dir)\r\n\t\t\tthis.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,1), dir);\r\n\t}\r\n\r\n\tset dir(dir)\r\n\t{\r\n\t\tthis.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,1), dir);\r\n\t}\r\n\tset length(value)\r\n\t{\r\n\t\tthis.scale.z = value;\r\n\t}\r\n}\r\n","class SceneManager\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis._current = new THREE.Scene();\r\n\t\tthis._current.name = \"default_scene\";\r\n\r\n\t}\r\n\r\n\tadd_scene(name)\r\n\t{\r\n\r\n\t}\r\n\r\n\tget current()\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tset current(scene)\r\n\t{\r\n\t\tthis._current = scene;\r\n\t}\r\n}\r\n\r\nconst scene_manager = new SceneManager();\r\nmodule.exports = scene_manager;","export default class MathUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n\tstatic linear_map(value,\r\n             from_range_start_value,\r\n             from_range_end_value,\r\n             to_range_start_value,\r\n             to_range_end_value)\r\n  {\r\n      return ((value - from_range_start_value)/ (from_range_end_value - from_range_start_value)) * (to_range_end_value - to_range_start_value) + to_range_start_value;\r\n  }\r\n\r\n  static between(value, min, max)\r\n  {\r\n\t\treturn (value >= min && value <= max)\r\n\r\n  }\r\n\r\n  static rgb_to_hex(rgb) {\r\n    rgb.r = Math.round(rgb.r * 255).toString(16);\r\n    rgb.g = Math.round(rgb.g * 255).toString(16);\r\n    rgb.b = Math.round(rgb.b * 255).toString(16);\r\n\r\n    if (rgb.r.length == 1)\r\n      rgb.r = \"0\" + rgb.r;\r\n    if (rgb.g.length == 1)\r\n      rgb.g = \"0\" + rgb.g;\r\n    if (rgb.b.length == 1)\r\n      rgb.b = \"0\" + rgb.b;\r\n\r\n    return \"#\" + rgb.r + rgb.g + rgb.b;\r\n  }\r\n\r\n  static project_points_on_plane(points, plane)\r\n  {\r\n    let projected_point = new THREE.Vector3();\r\n    let points_on_plane = [];\r\n    for(let i=0; i< points.length; i++)\r\n    {\r\n      plane.projectPoint(points[i], projected_point);\r\n      points_on_plane.push(projected_point.clone());\r\n    }\r\n\r\n    return points_on_plane;\r\n  }\r\n\r\n  static matrix4_lerp(from,to,target, t)\r\n  {\r\n    for(let i=0; i< 16; i++)\r\n    {\r\n      target.elements[i] = THREE.Math.lerp(from.elements[i], to.elements[i], t);\r\n    }\r\n  }\r\n\r\n  static equals(x1, x2) {\r\n    return Math.abs(x1 - x2) < 0.000001\r\n  }\r\n}\r\n","import CameraManager from '/CameraManager';\r\nimport Input from '/Input';\r\nimport Sphere from '/primitives/Sphere';\r\nimport Arrow from '/primitives/Arrow';\r\nimport SceneManager from '/SceneManager';\r\nimport MathUtilities from '/utilities/MathUtilities';\r\nimport Screen from '/Screen';\r\n\r\nclass CameraUtilities\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.tmp_mat = new THREE.Matrix4();\r\n\t\tthis.tmp_vec = new THREE.Vector3(0,0,1);\r\n\t\tthis.tmp_vec2 = new THREE.Vector3(0,0,0);\r\n\t\tthis.plane = new THREE.Plane();\r\n\t\tthis.ray = new THREE.Ray();\r\n\r\n    this.tmp_size = new THREE.Vector3();\r\n    this.tmp_unproj = new THREE.Vector3();\r\n\t}\r\n\r\n  get_up_dir(camera) {\r\n    camera = camera || CameraManager.current;\r\n    this.tmp_vec.set(0, 1, 0);\r\n    this.tmp_vec.applyQuaternion(camera.quaternion);\r\n\r\n    return this.tmp_vec;\r\n  }\r\n\tget_forward_dir(camera)\r\n\t{\r\n    camera = camera || CameraManager.current;\r\n\t\tthis.tmp_vec.set(0,0,1);\r\n\t\tthis.tmp_vec.applyQuaternion(camera.quaternion);\r\n\r\n\t\treturn this.tmp_vec;\r\n\r\n\t}\r\n\tget_right_dir(camera)\r\n\t{\r\n    camera = camera || CameraManager.current;\r\n\t\tthis.tmp_vec.set(1,0,0);\r\n  \t\tthis.tmp_vec.applyQuaternion(camera.quaternion);\r\n  \t\treturn this.tmp_vec;\r\n\r\n\t}\r\n\r\n\tunproject_mouse_position(NDC, camera)\r\n  {\r\n    camera = camera || CameraManager.current;\r\n    let v_fov = (camera.fov/2) * Math.PI/180;\r\n    let h_fov = (2 * Math.atan(Math.tan(v_fov) * camera.aspect))/2;\r\n\r\n\r\n    let distV = Math.tan(v_fov) * camera.far;\r\n    let distH = Math.tan(h_fov) * camera.far;\r\n\r\n    this.tmp_vec.set(distH * NDC.x , distV * NDC.y, -camera.far).normalize();\r\n\r\n    return this.tmp_vec.applyQuaternion(camera.quaternion);\r\n  }\r\n\r\n  get_plane_intersection(plane_position, plane_normal, NDC, camera)\r\n  {\r\n    camera = camera || CameraManager.current;\r\n    NDC = NDC || Input.normalized_mouse_pos;\r\n\r\n\t\tthis.plane.setFromNormalAndCoplanarPoint(plane_normal || this.get_forward_dir(camera), plane_position);\r\n    if(camera.isPerspectiveCamera)\r\n    {\r\n      this.ray.set(camera.position, this.unproject_mouse_position(NDC, camera));\r\n    }\r\n    else\r\n    {\r\n      this.tmp_unproj.set(NDC.x, NDC.y, 1).unproject(camera);\r\n      this.ray.set(camera.position, this.tmp_unproj);\r\n    }\r\n\r\n    this.ray.intersectPlane(this.plane, this.tmp_vec2);\r\n    return this.tmp_vec2;\r\n  }\r\n\r\n\r\n\r\n\r\n  fit_points_on_camera(points, zoom_scale = 1)\r\n  {\r\n    let points_sphere = new THREE.Sphere().setFromPoints(points);\r\n    let world_space_center = points_sphere.center;\r\n    let camera_forward = this.get_forward_dir(CameraManager.current).clone();\r\n\r\n    let plane = new THREE.Plane().setFromNormalAndCoplanarPoint(camera_forward, world_space_center);\r\n\r\n\r\n\r\n    let points_on_plane = MathUtilities.project_points_on_plane(points, plane)\r\n\r\n    let projected_points_center = new THREE.Vector3();\r\n    let box =  new THREE.Box3().setFromPoints(points_on_plane);\r\n    box.getCenter(projected_points_center);\r\n\r\n\r\n    let up = new THREE.Vector3(0,1,0).applyQuaternion(CameraManager.current.quaternion)\r\n    let right = up.clone().cross(camera_forward).normalize();\r\n    let mat = new THREE.Matrix4().set(  right.x, up.x, camera_forward.x, world_space_center.x,\r\n                                        right.y, up.y, camera_forward.y, world_space_center.y,\r\n                                        right.z, up.z, camera_forward.z, world_space_center.z,\r\n                                              0,    0,                0,        1);\r\n\r\n    let inverse_mat = new THREE.Matrix4().getInverse(mat);\r\n    for(let i=0; i< points_on_plane.length; i++)\r\n    {\r\n      points_on_plane[i].applyMatrix4(inverse_mat);\r\n    }\r\n\r\n\r\n    let size = new THREE.Vector3();\r\n    box =  new THREE.Box3().setFromPoints(points_on_plane);\r\n    box.getSize(size);\r\n    size.multiplyScalar(zoom_scale);\r\n    let projected_center = new THREE.Vector3();\r\n    box.getCenter(projected_center);\r\n\r\n\r\n    return {\r\n      position: projected_points_center,\r\n      zoom: this.get_zoom_to_fit_rect(size.x/2, size.y/2)\r\n    }\r\n\r\n  }\r\n\r\n  get_zoom_to_fit_rect(width,height)\r\n  {\r\n    let v_fov = (CameraManager.current.fov/2) * Math.PI/180;\r\n    let h_fov = (2 * Math.atan(Math.tan(v_fov) * CameraManager.current.aspect))/2;\r\n\r\n    let distV = height / Math.tan(v_fov);\r\n    let distH = width / Math.tan(h_fov);\r\n\r\n    return Math.max(Math.abs(distH), Math.abs(distV));\r\n  }\r\n\r\n  get_zoom_to_fit_box(bb, camera)\r\n  {\r\n    if(camera.isOrthographicCamera)\r\n    {\r\n      bb.getSize(this.tmp_size);\r\n\r\n      let obj_x = this.tmp_size.x;\r\n      let obj_y = this.tmp_size.y;\r\n      let object_aspect = obj_x / obj_y;\r\n      if(Screen.aspect_ratio / object_aspect > 1)\r\n      {\r\n        return Screen.height/obj_y;\r\n      }\r\n      else\r\n      {\r\n        return Screen.width/obj_x;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      // return this.fit_points_on_camera([bb.min, bb.max], 1).zoom;\r\n      let size = new THREE.Vector3();\r\n      bb.getSize(size);\r\n      return this.get_zoom_to_fit_rect(size.x, size.y);\r\n\r\n    }\r\n  }\r\n\r\n  get_html_screen_pos(object, camera)\r\n  {\r\n    object.getWorldPosition(this.tmp_vec);\r\n    this.tmp_vec.project(camera);\r\n\r\n    this.tmp_vec.x = (this.tmp_vec.x * 0.5 + 0.5) * (Screen.width);\r\n    this.tmp_vec.y = (1-(this.tmp_vec.y * 0.5 + 0.5)) * Screen.height;\r\n    return this.tmp_vec;\r\n  }\r\n\r\n  update_projection(camera)\r\n  {\r\n    camera.left   = -Screen.width/2;\r\n    camera.right  = Screen.width/2;\r\n    camera.top    = Screen.height/2;\r\n    camera.bottom = -Screen.height/2;\r\n    camera.aspect = Screen.aspect_ratio;\r\n    camera.updateProjectionMatrix(true);\r\n  }\r\n}\r\n\r\nconst camera_utilities = new CameraUtilities();\r\nmodule.exports = camera_utilities;\r\n","class Capabilities\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.max_anisotropy = 0;\r\n\t\tthis.vertex_texture_sampler_available = false;\r\n\t\tthis.fp_textures_available = false;\r\n\t}\r\n}\r\n\r\nconst capabilities = new Capabilities();\r\nmodule.exports = capabilities;\r\n","export default class EasingFunctions\r\n{\r\n\tconstructor(){}\r\n\r\n\tstatic ease_out_sine(x) {\r\n\t\treturn Math.sin(x * 3.14 / 2);\r\n\t}\r\n\r\n\tstatic ease_in_out_cubic(x) {\r\n\t\treturn x < 0.5 ?\r\n\t\t\t4 * x * x * x :\r\n\t\t\t1 - Math.pow(-2 * x + 2, 3) / 2;\r\n\t}\r\n\r\n\tstatic ease_out_cubic (x) {\r\n\t\treturn 1 - Math.pow(1 - x, 3);\r\n\t}\r\n\r\n\tstatic ease_in_out_quint (x) {\r\n\t\treturn x < 0.5 ?\r\n\t\t\t16 * x * x * x * x * x :\r\n\t\t\t1 - Math.pow(-2 * x + 2, 5) / 2;\r\n\t}\r\n\r\n\tstatic ease_out_quint (x) {\r\n\t\treturn 1 - Math.pow(1 - x, 5);\r\n\t}\r\n\r\n\tstatic ease_in_out_circ (x) {\r\n\t\treturn x < 0.5 ?\r\n\t\t\t(1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 :\r\n\t\t\t(Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;\r\n\t}\r\n\r\n\tstatic ease_out_quad (x) {\r\n\t\treturn 1 - (1 - x) * (1 - x);\r\n\t}\r\n\r\n}","class EventManager\r\n{\r\n\r\n    constructor()\r\n    {\r\n        this.queue = {};\r\n\r\n        this.zoom_changed_evt           = \"zoom_changed\";\r\n        this.store_clickd_evt           = \"store_clicked\";\r\n        this.point_selected_evt         = \"point_selected\";\r\n        this.config_changed             = \"config_changed\";\r\n\r\n        this.path_substep_completed     = \"path_substep_completed\";\r\n        this.path_completed             = \"path_completed\";\r\n        this.go_to_store_requested_evt  = \"go_to_store_requested\";\r\n\r\n        this.resource_loaded_evt        = \"resource_loaded\";\r\n        this.service_clicked_evt        = \"service_clicked\";\r\n        this.unit_pos_updated_evt       = \"unit_position_updated\";\r\n\r\n        this.floor_changed_evt          = \"floor_changed\";\r\n\r\n        this.on_enter_floor_navigation  = \"on_enter_floor_navigation\";\r\n        this.on_exit_floor_navigation   = \"on_exit_floor_navigation\";\r\n\r\n        this.on_enter_floor_selection   = \"on_enter_floor_selection\";\r\n        this.on_exit_floor_selection    = \"on_exit_floor_selection\";\r\n\r\n        this.on_enter_outside_navigation  = \"on_enter_outside_navigation\";\r\n        this.on_exit_outside_navigation   = \"on_exit_outside_navigation\";\r\n\r\n        this.step_selected_evt = \"step_selected\";\r\n\r\n\r\n        \r\n    }\r\n\r\n    fire(event, payload)\r\n    {\r\n        let queue = this.queue[event];\r\n\r\n        if (queue === undefined) {\r\n            return;\r\n        }\r\n        let i = queue.length;\r\n        while (i--) {\r\n            queue[i](payload);\r\n        }\r\n\r\n    }\r\n\r\n    on(event, callback)\r\n    {\r\n        if (typeof this.queue[event] === 'undefined') \r\n        {\r\n            this.queue[event] = [];\r\n        }\r\n\r\n        this.queue[event].push(callback);\r\n    }\r\n\r\n    fire_zoom_changed(zoom)\r\n    {\r\n        this.fire(this.zoom_changed_evt, zoom);\r\n    }\r\n    fire_store_selected(store_id)\r\n    {\r\n        this.fire(this.store_clickd_evt, store_id);\r\n    }\r\n    fire_point_selected(hit_data)\r\n    {\r\n        this.fire(this.point_selected_evt, hit_data);\r\n    }\r\n    fire_config_changed()\r\n    {\r\n        this.fire(this.config_changed);\r\n    }\r\n    fire_path_substep_completed(step_number)\r\n    {\r\n        this.fire(this.path_substep_completed, step_number);\r\n    }\r\n    fire_path_completed()\r\n    {\r\n        this.fire(this.path_completed);\r\n    }\r\n    fire_step_selected(step_index)\r\n    {\r\n        this.fire(this.step_selected_evt, step_index);\r\n    }\r\n\r\n    fire_go_to_store_requested(store_id)\r\n    {\r\n        this.fire(this.go_to_store_requested_evt, store_id);\r\n    }\r\n\r\n    fire_resource_loaded(resource)\r\n    {\r\n        this.fire(this.resource_loaded_evt, resource);\r\n    }\r\n\r\n    fire_service_clicked(service)\r\n    {\r\n        this.fire(this.service_clicked_evt, service);\r\n    }\r\n    fire_unit_position_updated(unit_data)\r\n    {\r\n        this.fire(this.unit_pos_updated_evt, unit_data);\r\n    }\r\n\r\n    fire_floor_switched(floor_id)\r\n    {\r\n        this.fire(this.floor_changed_evt, floor_id);\r\n    }\r\n\r\n    fire_on_enter_floor_navigation(state)\r\n    {\r\n        this.fire(this.on_enter_floor_navigation, state);\r\n    }\r\n\r\n    fire_on_exit_floor_navigation(state)\r\n    {\r\n        this.fire(this.on_exit_floor_navigation, state);\r\n    }\r\n\r\n    fire_on_enter_floor_selection(state)\r\n    {\r\n        this.fire(this.on_enter_floor_selection,state);\r\n    }\r\n\r\n    fire_on_exit_floor_selection(state)\r\n    {\r\n        this.fire(this.on_exit_floor_selection,state);\r\n    }\r\n    \r\n    fire_on_enter_outside_navigation(state)\r\n    {\r\n        this.fire(this.on_enter_outside_navigation,state);\r\n    }\r\n\r\n    fire_on_exit_outside_navigation(state)\r\n    {\r\n        this.fire(this.on_exit_outside_navigation,state);\r\n    }\r\n\r\n\r\n}\r\n\r\nconst event_manager = new EventManager();\r\nmodule.exports = event_manager;","\r\nexport default class AxisHelper extends THREE.Object3D {\r\n  constructor(scale = 1.0) {\r\n    super();\r\n\r\n    const blueAxisMat = new THREE.LineBasicMaterial({ color: 0x4444ff, depthFunc: THREE.AlwaysDepth });\r\n    const blueAxisGeo = new THREE.Geometry();\r\n    blueAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\r\n    blueAxisGeo.vertices.push(new THREE.Vector3(0, 0, 1000));\r\n    const blueAxisLine = new THREE.Line(blueAxisGeo, blueAxisMat);\r\n    blueAxisLine.renderOrder = 50000;\r\n\r\n    const greenAxisMat = new THREE.LineBasicMaterial({ color: 0x44ff44, depthFunc: THREE.AlwaysDepth });\r\n    const greenAxisGeo = new THREE.Geometry();\r\n    greenAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\r\n    greenAxisGeo.vertices.push(new THREE.Vector3(0, 1000, 0));\r\n    const greenAxisLine = new THREE.Line(greenAxisGeo, greenAxisMat);\r\n    greenAxisLine.renderOrder = 50000;\r\n\r\n    const redAxisMat = new THREE.LineBasicMaterial({ linewidth: 100, color: 0xff4444, depthFunc: THREE.AlwaysDepth });\r\n    const redAxisGeo = new THREE.Geometry();\r\n    redAxisGeo.computeLineDistances();\r\n    redAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\r\n    redAxisGeo.vertices.push(new THREE.Vector3(1000, 0, 0));\r\n    const redAxisLine = new THREE.Line(redAxisGeo, redAxisMat);\r\n    redAxisLine.renderOrder = 50000;\r\n    this.renderOrder = 100000;\r\n    this.add(blueAxisLine);\r\n    this.add(greenAxisLine);\r\n    this.add(redAxisLine);\r\n    this.scale.set(scale, scale, scale);\r\n \r\n  }\r\n\r\n  update() {\r\n  }\r\n\r\n  dispose() {\r\n\r\n  }\r\n}\r\n","export default class BaseRender\r\n{\r\n\tconstructor()\r\n\t{\r\n\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\ton_enter(context, renderer)\r\n\t{\r\n\r\n\t}\r\n\r\n\ton_exit(context, renderer)\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\tresize()\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n}\r\n"," \r\nexport default class RenderLayers {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  static get opaque()            { return 0; }\r\n  static get transparent()       { return 1; }\r\n  static get outline()       \t\t { return 2; }\r\n  static get selectable()\t\t\t\t { return 3; }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform sampler2D _Blur;\\nuniform vec2 _Screen;\\nvarying vec2 vUv;\\n\\nfloat aastep(float threshold, float value) {\\n  #ifdef GL_OES_standard_derivatives\\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\\n  #else\\n    return step(threshold, value);\\n  #endif  \\n}\\n\\nvoid main()\\n{\\n\\tvec2 pixel_size = 1.0/_Screen;\\n\\n\\tvec4 color = texture2D( _MainTex, vUv);\\n\\tfloat mask = 1.0 - color.a;\\n\\n\\tfloat blur = texture2D( _Blur, vUv).a;\\n\\n  // gl_FragColor = vec4(mask,mask,mask,0.0);\\n  // gl_FragColor = color;\\n\\n\\tgl_FragColor = vec4(mix(color.rgb, mix(color.rgb, vec3(1.,0.,0.),aastep(0.076, blur)), mask), 1.0);\\n}\\n\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform vec2 _Resolution;\\nuniform vec2 _SampleDir;\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n\\n\\tvec3 sum = vec3(0.,0.,0.);\\n\\tvec2 dir = (0.5/_Resolution) * _SampleDir;\\n\\tfloat _Distance = 2.0;\\n\\tsum += texture2D( _MainTex, vUv + dir * -4. * _Distance ).rgb * 0.0525;\\n\\tsum += texture2D( _MainTex, vUv + dir * -3. * _Distance ).rgb * 0.075;\\n\\tsum += texture2D( _MainTex, vUv + dir * -2. * _Distance ).rgb * 0.110;\\n\\tsum += texture2D( _MainTex, vUv + dir * -1. * _Distance ).rgb * 0.150;\\n\\tsum += texture2D( _MainTex, vUv + dir *  0. * _Distance ).rgb * 0.225;\\n\\tsum += texture2D( _MainTex, vUv + dir *  1. * _Distance ).rgb * 0.150;\\n\\tsum += texture2D( _MainTex, vUv + dir *  2. * _Distance ).rgb * 0.110;\\n\\tsum += texture2D( _MainTex, vUv + dir *  3. * _Distance ).rgb * 0.075;\\n\\tsum += texture2D( _MainTex, vUv + dir *  4. * _Distance ).rgb * 0.0525;\\n\\tgl_FragColor = vec4(sum, 1.0);\\n\\n}\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\n\\nvarying vec2 vUv;\\nvoid main()\\n{\\n\\tgl_FragColor = texture2D(_MainTex, vUv);\\n}\";","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\nvoid main()\\n{\\n\\tgl_Position = vec4(uv * 2.0 - 1.0, 1.0, 1.0);\\n\\tvUv = uv;\\n}\";","import Screen from '/Screen';\r\nimport RenderLayers from '/RenderLayers';\r\n\r\nimport compose_frag from '/shaders/box_blur/compose_frag';\r\nimport box_blur_frag from '/shaders/box_blur/box_blur_frag';\r\nimport copy_frag from '/shaders/copy/copy_frag';\r\nimport copy_vert from '/shaders/copy/copy_vert';\r\nimport background_frag from '/shaders/basic_color/basic_color_frag';\r\n\r\nexport default class OutlineRender\r\n{\r\n\r\n\tconstructor(webgl)\r\n\t{\r\n\t\tthis.main_rt \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\t\tthis.rt1\t\t \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\t\tthis.rt2\t\t \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\r\n\r\n    this.compose_material \t\t= this.__get_compose_material();\r\n    this.copy_material \t\t\t\t= this.__get_copy_material();\r\n    this.box_blur_material \t\t= this.__get_box_blur_material();\r\n    this.background_material \t= this.__get_background_material();\r\n\r\n\t\tthis.copy_plane = new THREE.Mesh( new THREE.PlaneGeometry(1,1), this.copy_material );\r\n\t\tthis.copy_plane.frustumCulled = false;\r\n\t\tthis.copy_scene = new THREE.Scene();\r\n\t\tthis.copy_scene.add(this.copy_plane);\r\n\r\n\t}\r\n\r\n\tresize(w,h)\r\n\t{\r\n\t\tthis.main_rt.setSize(w,h);\r\n\t\tthis.rt1.setSize(w,h);\r\n\t\tthis.rt2.setSize(w,h);\r\n\t\tthis.box_blur_material.uniforms._Screen.value.set(w,h);\r\n\t\tthis.compose_material.uniforms._Screen.value.set(w,h);\r\n\t}\r\n\r\n\r\n\trender(webgl)\r\n\t{\r\n\t\twebgl.camera.updateMatrix();\r\n\t\twebgl.camera.updateMatrixWorld();\r\n\r\n\t\twebgl.camera.layers.enable(RenderLayers.opaque);\r\n\t\twebgl.camera.layers.enable(RenderLayers.transparent);\r\n\t\twebgl.camera.layers.disable(RenderLayers.outline);\r\n\r\n\t\t//render scene\r\n\t\twebgl._renderer.setClearColor(webgl.clear_color, 0);\r\n\t\twebgl._renderer.clearTarget(this.main_rt,true,true,true);\r\n\r\n\t\tthis.copy_scene.overrideMaterial = this.background_material;\r\n\t\tthis.background_material.uniforms._Color.value.set(webgl.clear_color.r, webgl.clear_color.g, webgl.clear_color.b, 0);\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.main_rt, false);\r\n\r\n\r\n\t\twebgl._renderer.render(webgl.scene, webgl.camera, this.main_rt, false);\r\n\r\n\r\n\r\n\r\n\t\t//horizontal blur\r\n\t\tthis.box_blur_material.uniforms._MainTex.value = this.main_rt.texture;\r\n\t\tthis.box_blur_material.uniforms._SampleDir.value.set(1,0);\r\n\r\n\t\tthis.copy_scene.overrideMaterial = this.box_blur_material;\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.rt1, false);\r\n\r\n\t\t//vertical blur\r\n\t\tthis.box_blur_material.uniforms._SampleDir.value.set(0,1);\r\n\t\tthis.box_blur_material.uniforms._MainTex.value = this.rt1.texture;\r\n\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.rt2, false);\r\n\r\n\r\n\t\t//compose\r\n\t\tthis.copy_scene.overrideMaterial = this.compose_material;\r\n\t\tthis.compose_material.uniforms._MainTex.value = this.main_rt.texture;\r\n\t\tthis.compose_material.uniforms._Blur.value = this.rt2.texture;\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, undefined, false);\r\n\t\tthis.copy_scene.overrideMaterial = undefined;\r\n\t}\r\n\r\n\t__get_copy_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _MainTex: \t\t\t{value : undefined}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: copy_frag,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n\t}\r\n\r\n\t__get_box_blur_material()\r\n\t{\r\n \t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _MainTex: \t\t\t{value : undefined},\r\n        _SampleDir: \t\t{value : new THREE.Vector2()},\r\n        _Screen: \t\t\t\t{value : new THREE.Vector2(Screen.width, Screen.height)}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: box_blur_frag,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n\t}\r\n\r\n\t__get_compose_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _MainTex: \t\t\t{value : undefined},\r\n        _Blur: \t\t\t\t\t{value : undefined},\r\n        _Screen: \t\t\t\t{value : new THREE.Vector2(Screen.width, Screen.height)}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: compose_frag,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      extensions: {\r\n      \tderivatives: true\r\n      }\r\n    });\r\n\t}\r\n\r\n\t__get_background_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _Color: \t\t\t\t{value : new THREE.Vector4(0,0,0,0)}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: background_frag,\r\n      depthTest: true,\r\n      depthWrite: false\r\n\r\n    });\r\n\t}\r\n\r\n\ton_enter(webgl)\r\n\t{\r\n\t\twebgl._renderer.autoClear = false;\r\n\t}\r\n\r\n\ton_exit(webgl)\r\n\t{\r\n\t\twebgl._renderer.autoClear = true;\r\n\t}\r\n}\r\n","import Input from '/Input';\r\n\r\nclass UI\r\n{\r\n\r\n    constructor()\r\n    {\r\n        this.ui_elements = [];\r\n        this._tmp_normalized_pos = new THREE.Vector2();\r\n        this.scene = new THREE.Scene();\r\n        this.scene.autoUpdate = false;\r\n        this.scene.frustumCulled = false;\r\n    }\r\n\r\n    add_clickable_element(elem)\r\n    {\r\n        this.ui_elements.push(elem);\r\n        this.scene.add(elem.mesh);\r\n    }\r\n    remove_clickable_element(elem)\r\n    {\r\n        let index = this.ui_elements.indexOf(elem);\r\n        if (index > -1) {\r\n          this.ui_elements.splice(index, 1);\r\n        }\r\n\r\n        this.scene.remove(elem.mesh);\r\n    }\r\n\r\n    update()\r\n    {\r\n        this._tmp_normalized_pos.copy(Input.normalized_mouse_pos);\r\n        for(let i=0; i< this.ui_elements.length; i++)\r\n        {\r\n            this.ui_elements[i].update(this._tmp_normalized_pos)\r\n        }\r\n    }\r\n\r\n    render(renderer)\r\n    {\r\n        renderer.render_ui(this.scene);\r\n    }\r\n\r\n    clear()\r\n    {\r\n        this.current_clicked_element = undefined\r\n    }\r\n\r\n    resize()\r\n    {\r\n        for(let i=0; i< this.ui_elements.length; i++)\r\n        {\r\n            this.ui_elements[i].resize()\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nconst ui = new UI();\r\nmodule.exports = ui;\r\n","import vert from '/shaders/copy/copy_vert';\r\nimport frag from '/shaders/copy/copy_frag';\r\n\r\nexport default class BlitMaterial extends THREE.ShaderMaterial\r\n{\r\n\tconstructor(frag_shader, vert_shader, defines)\r\n\t{\r\n\t\tsuper({\r\n\t\t\tuniforms: {\r\n\t\t\t\t_MainTex: {value: null},\r\n        _Resolution:{value: new THREE.Vector2(0,0)}\r\n\t\t\t},\r\n\t\t\tdefines: defines || {},\r\n\t\t\tvertexShader: vert_shader || vert,\r\n\t\t\tfragmentShader: frag_shader || frag,\r\n\t\t\tdepthWrite: false,\r\n      blending: THREE.NoBlending,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      depthFunc: THREE.AlwaysDepth\r\n\t\t});\r\n\t}\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nuniform vec4 _DepthNormal;\\nvec2 EncodeFloatRG( float v )\\n{\\n    vec2 kEncodeMul = vec2(1.0, 255.0);\\n    float kEncodeBit = 1.0/255.0;\\n    vec2 enc = kEncodeMul * v;\\n    enc = fract (enc);\\n    enc.x -= enc.y * kEncodeBit;\\n    return enc;\\n}\\n\\nvec2 EncodeNormal (vec3 n)\\n{\\n    float scale = 1.7777;\\n    vec2 enc = n.xy / (n.z+1.0);\\n    enc /= scale;\\n    enc = enc*0.5+0.5;\\n    return enc;\\n}\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(EncodeFloatRG(_DepthNormal.x), EncodeNormal(normalize(_DepthNormal.yzw)));  \\n}\";","import BlitMaterial from '/materials/BlitMaterial';\r\nimport frag from '/shaders/clear/clear_depth_normal_frag';\r\n\r\nexport default class ClearDepthNormalMaterial extends BlitMaterial\r\n{\r\n\tconstructor(clear_depth, clear_normal)\r\n\t{\r\n\t\tsuper(frag);\r\n\t\tthis.uniforms._DepthNormal = {value: new THREE.Vector4(clear_depth, clear_normal.x, clear_normal.y, clear_normal.z)};\r\n\t}\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\nvarying vec3 v_pos;\\n\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  v_normal \\t= (modelViewMatrix * vec4(normal, 0.0)).xyz;\\n  v_pos \\t\\t= (modelViewMatrix * vec4( pos, 1.0 )).xyz;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n}\";","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\nvarying vec3 v_pos;\\n\\nuniform float _FarPlane;\\n\\nvec2 EncodeFloatRG( float v )\\n{\\n    vec2 kEncodeMul = vec2(1.0, 255.0);\\n    float kEncodeBit = 1.0/255.0;\\n    vec2 enc = kEncodeMul * v;\\n    enc = fract (enc);\\n    enc.x -= enc.y * kEncodeBit;\\n    return enc;\\n}\\n\\nvec2 EncodeNormal (vec3 n)\\n{\\n    float scale = 1.7777;\\n    vec2 enc = n.xy / (n.z+1.0);\\n    enc /= scale;\\n    enc = enc*0.5+0.5;\\n    return enc;\\n}\\n\\nvoid main()\\n{\\n\\tgl_FragColor = vec4(EncodeFloatRG(length(v_pos.z)/_FarPlane), EncodeNormal(normalize(v_normal)));\\t\\n}\\n\\n\";","import vert from '/shaders/depth_normals/depth_normals_vert';\r\nimport frag from '/shaders/depth_normals/depth_normals_frag';\r\n\r\nexport default class DepthNormalMaterial extends THREE.ShaderMaterial\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper({\r\n      uniforms: {\r\n      \t_FarPlane: {value: 1}\r\n      },\r\n      vertexShader: vert,\r\n      fragmentShader: frag\r\n    });\r\n\t}\r\n\r\n\tset far_plane(value)\r\n\t{\r\n\t\tthis.uniforms._FarPlane.value = value;\r\n\t}\r\n\r\n}\r\n","import CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\n\r\nimport ClearDepthNormalMaterial from '/materials/ClearDepthNormalMaterial';\r\nimport DepthNormalMaterial from '/materials/DepthNormalMaterial';\r\n\r\nexport default class DepthAndNormalsRenderer\r\n{\r\n\tconstructor()\r\n\t{\r\n    this.RT = new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\r\n    this.clear_depth_normal_mat = new ClearDepthNormalMaterial(1, new THREE.Vector3(0,0,1));\r\n    this.depth_normal_material = new DepthNormalMaterial();\r\n\t}\r\n\r\n\r\n\trender(graphics)\r\n\t{\r\n\t\tthis.__resize_RT_if_necessary();\r\n\r\n\r\n    graphics.clear(this.RT, undefined, true,true)\r\n\r\n    graphics.blit_clear_with_material(this.RT, this.clear_depth_normal_mat);\r\n\r\n    this.depth_normal_material.far_plane = CameraManager.current.far;\r\n\r\n    graphics.render(undefined, undefined, this.RT, this.depth_normal_material);\r\n\r\n\t}\r\n\r\n  __resize_RT_if_necessary()\r\n  {\r\n    if(this.RT.width !== Screen.width || this.RT.height !== Screen.height)\r\n    {\r\n      this.RT.setSize(Screen.width, Screen.height);\r\n    }\r\n  }\r\n\r\n\tget render_target()\r\n\t{\r\n\t\treturn this.RT;\r\n\t}\r\n\r\n}\r\n","import BlitMaterial from '/materials/BlitMaterial';\r\n\r\nexport default class Blitter\r\n{\r\n\r\n  constructor(renderer)\r\n  {\r\n      this.renderer = renderer;\r\n      this._blit_scene = new THREE.Scene();\r\n      this._blit_material = new BlitMaterial();\r\n      this._blit_quad = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry( 1, 1 ),this._blit_material );\r\n      this._blit_scene.add( this._blit_quad );\r\n      this._blit_camera = new THREE.OrthographicCamera( -1, 1, 1, -1, -10000, 10000 );\r\n\r\n  }\r\n\r\n\r\n  blit(src, dst)\r\n  {\r\n    this._blit_quad.material = this._blit_material;\r\n    this._blit_quad.material.uniforms._MainTex.value = src.texture;\r\n    this._blit_quad.material.uniforms._Resolution.value.set(src.width, src.height);\r\n\r\n    this.renderer.setRenderTarget(dst === undefined? null : dst);\r\n\r\n    this.renderer.render( this._blit_scene,\r\n                          this._blit_camera);\r\n  }\r\n\r\n  blit_with_material(src, dst, mat)\r\n  {\r\n    this._blit_quad.material = mat;\r\n    this._blit_quad.material.uniforms._MainTex.value = src.texture;\r\n    this._blit_quad.material.uniforms._Resolution.value.set(src.width, src.height);\r\n\r\n    this.renderer.setRenderTarget(dst === undefined? null : dst);\r\n\r\n    this.renderer.render( this._blit_scene,\r\n                          this._blit_camera );\r\n  }\r\n\r\n  blit_clear_with_material(dst_RT, mat)\r\n  {\r\n    this._blit_quad.material = mat;\r\n\r\n    this.renderer.setRenderTarget(dst_RT === undefined? null : dst_RT);\r\n\r\n    this.renderer.render( this._blit_scene, this._blit_camera);\r\n  }\r\n\r\n}\r\n","import Configuration from           '/Configuration';\r\nimport BaseRender from   '/render_mode/BaseRender';\r\nimport OutlineRender from           '/render_mode/OutlineRender';\r\nimport Screen from '/Screen';\r\nimport CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport UI from '/UI';\r\nimport Capabilities from '/Capabilities';\r\nimport DepthAndNormalsRenderer from '/render_utilities/DepthAndNormalsRenderer';\r\nimport Blitter from '/render_utilities/Blitter';\r\n\r\nclass Graphics {\r\n\r\n\r\n  constructor() {\r\n    this._renderer = undefined;\r\n    this.blitter = undefined;\r\n    this.canvas = undefined;\r\n    this.no_render = undefined;\r\n    this.current_render_mode = undefined;\r\n    this.generateDepthNormalTexture = false;\r\n    this.depth_and_normals_renderer = undefined;\r\n  }\r\n\r\n  init(canvas) {\r\n    this._renderer = new THREE.WebGLRenderer({\r\n      antialias: true,\r\n      preserveDrawingBuffer: true,\r\n      alpha: true,\r\n      canvas: canvas\r\n    });\r\n\r\n    this._renderer.autoClear = false;\r\n\r\n    this._renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n\t\tthis._renderer.extensions.get( 'ANGLE_instanced_arrays' )\r\n\r\n    this.blitter = new Blitter(this._renderer);\r\n\r\n    this.canvas = this._renderer.domElement;\r\n\r\n    this.no_render = new BaseRender();\r\n\r\n    this.current_render_mode = this.no_render;\r\n\r\n    Capabilities.max_anisotropy = this._renderer.capabilities.getMaxAnisotropy();\r\n    Capabilities.vertex_texture_sampler_available = this._renderer.capabilities.maxVertexTextures > 0;\r\n    Capabilities.fp_textures_available = this._renderer.capabilities.floatVertexTextures;\r\n\r\n    this.generateDepthNormalTexture = false;\r\n\r\n    this.depth_and_normals_renderer = new DepthAndNormalsRenderer();\r\n\r\n  }\r\n\r\n  get dom_element()\r\n  {\r\n    return this._renderer.domElement;\r\n  }\r\n\r\n  get depth_normals_RT()\r\n  {\r\n    return this.depth_and_normals_renderer.render_target;\r\n  }\r\n\r\n\r\n  set_state(new_state)\r\n  {\r\n    console.log(\"VIEWAPI - map render mode switch to: \" + new_state.constructor.name);\r\n\r\n    this.current_render_mode.on_exit(this, this._renderer);\r\n    this.current_render_mode = new_state;\r\n    this.current_render_mode.on_enter(this, this._renderer);\r\n  }\r\n\r\n  update() {\r\n    if(this.generateDepthNormalTexture)\r\n    {\r\n      this.depth_and_normals_renderer.render(this);\r\n    }\r\n\r\n    if(CameraManager.current)\r\n    {\r\n      CameraManager.current.aspect = Screen.aspect_ratio;\r\n\r\n      CameraManager.current.updateProjectionMatrix();\r\n\r\n      CameraManager.current.updateMatrix();\r\n      CameraManager.current.updateMatrixWorld(true);\r\n      this.current_render_mode.render();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render(scene, camera, RT, override_mat)\r\n  {\r\n    this.__apply_override_material(scene, override_mat);\r\n\r\n    this._renderer.setRenderTarget(RT === undefined? null : RT);\r\n    this._renderer.render(scene  || SceneManager.current,\r\n                          camera || CameraManager.current);\r\n\r\n    this.__apply_override_material(scene, undefined);\r\n\r\n\r\n  }\r\n\r\n  __apply_override_material(scene, mat)\r\n  {\r\n    if(scene)\r\n      scene.overrideMaterial = mat;\r\n    else\r\n      SceneManager.current.overrideMaterial = mat;\r\n  }\r\n\r\n  readback_RT(RT, buffer)\r\n  {\r\n    this._renderer.readRenderTargetPixels( RT, 0, 0, RT.width, RT.height, buffer);\r\n  }\r\n\r\n  clear(RT, camera, clear_depth, clear_stencil)\r\n  {\r\n    this._renderer.setRenderTarget(RT === undefined? null : RT);\r\n\r\n    if(camera)\r\n    {\r\n      this._renderer.setClearColor(camera.clear_color, camera.clear_alpha);\r\n    }\r\n\r\n    this._renderer.clear( camera?         true : false, // clear color\r\n                          clear_depth?    true : false,\r\n                          clear_stencil?  true : false);\r\n  }\r\n\r\n  render_ui(scene)\r\n  {\r\n    this._renderer.render(scene, CameraManager.current)\r\n  }\r\n\r\n\r\n\r\n  on_resize() {\r\n\r\n    let width  = this.canvas.offsetWidth;\r\n    let height = this.canvas.offsetHeight;\r\n    Screen.update_size(width, height);\r\n    Screen.update_native_size()\r\n\r\n    this._renderer.setSize(width,height, false);\r\n\r\n    UI.resize();\r\n    this.current_render_mode.resize(width,height);\r\n\r\n  }\r\n\r\n\r\n  blit(src_RT, dst_RT, mat)\r\n  {\r\n    if(mat)\r\n      this.blitter.blit_with_material(src_RT, dst_RT, mat);\r\n    else\r\n      this.blitter.blit(src_RT, dst_RT);\r\n  }\r\n\r\n  blit_clear_with_material(dst_RT, mat)\r\n  {\r\n    this.blitter.blit_clear_with_material(dst_RT, mat);\r\n  }\r\n\r\n\r\n  take_screenshot(blob_callback)\r\n  {\r\n\r\n    const ctx = this;\r\n\r\n\r\n    let old_width = Screen.width;\r\n    let old_height = Screen.height;\r\n\r\n    let new_width = 4096;\r\n    let new_height = 4096;\r\n\r\n    let tile_width = 1024;\r\n    let tile_height = 1024;\r\n\r\n    let divisions_x = parseInt(Math.ceil(new_width / tile_width));\r\n    let divisions_y = parseInt(Math.ceil(new_height / tile_height));\r\n\r\n    Screen.update_size(tile_width, tile_height);\r\n\r\n    this._renderer.setPixelRatio(1);\r\n\r\n    this._renderer.setSize(tile_width ,tile_height, false);\r\n\r\n    this.ctx_2D.canvas.width  = new_width;\r\n    this.ctx_2D.canvas.height = new_height;\r\n\r\n    CameraManager.current.aspect = Screen.aspect_ratio;\r\n    CameraManager.current.updateMatrix();\r\n    CameraManager.current.updateMatrixWorld(true);\r\n\r\n    for(let x = 0; x < divisions_x; x++)\r\n    {\r\n      for(let y = 0; y < divisions_y; y++)\r\n      {\r\n\r\n        CameraManager.current.setViewOffset( new_width,             new_height,\r\n                                             Screen.width*x,         Screen.height*y,\r\n                                             Screen.width,            Screen.height);\r\n        this.current_render_mode.render();\r\n\r\n        this.ctx_2D.drawImage(this._renderer.domElement, Screen.width*x, Screen.height*y);\r\n      }\r\n    }\r\n\r\n    // transform the result canvas into a blob\r\n    // from them the callback turns into a ULR and download it\r\n    this.ctx_2D.canvas.toBlob(blob_callback,\"image/png;base64;\");\r\n\r\n    CameraManager.current.clearViewOffset();\r\n    Screen.update_size(old_width,old_height);\r\n    this._renderer.setPixelRatio(window.devicePixelRatio);\r\n    this._renderer.setSize(old_width,old_height, false);\r\n\r\n    CameraManager.current.aspect = Screen.aspect_ratio;\r\n    CameraManager.current.updateMatrix();\r\n    CameraManager.current.updateMatrixWorld(true);\r\n\r\n  }\r\n\r\n  download_screenshot (blob) {\r\n    console.log(\"el blob\", blob);\r\n    let link = document.createElement('a');\r\n    link.download = \"Snapshot.png\";\r\n\r\n    link.href = URL.createObjectURL(blob);\r\n    link.click()\r\n\r\n    link.onclick = function() {\r\n      requestAnimationFrame(function() {\r\n        URL.revokeObjectURL(a.href);\r\n      });\r\n      a.removeAttribute('href')\r\n    };\r\n\r\n  }\r\n\r\n}\r\n\r\nconst graphics = new Graphics();\r\nmodule.exports = graphics;\r\n\r\n","import Mesh from '/Mesh';\r\n\r\nexport default class Cube extends Mesh\r\n{\r\n\tconstructor(size, segments, color)\r\n\t{\r\n\t\tsize \t\t\t= size || new THREE.Vector3(1,1,1);\r\n\t\tsegments \t= segments || new THREE.Vector3(1,1,1);\r\n    color \t\t= color || 0xff0000;\r\n    let geometry = new THREE.BoxGeometry( size.x, size.y, size.z, segments.x, segments.y, segments.z);\r\n    let material = new THREE.MeshBasicMaterial( {color: color} );\r\n\t\tsuper(geometry, material);\r\n\t}\r\n}\r\n","import AxisHelper from '/components/AxisHelper';\r\nimport basic_color_vert from '/shaders/basic_color/basic_color_vert';\r\nimport basic_color_frag from '/shaders/basic_color/basic_color_frag';\r\nimport SceneManager from '/SceneManager';\r\nimport Graphics from '/Graphics';\r\nimport Cube from '/primitives/Cube';\r\nimport Sphere from '/primitives/Sphere';\r\n\r\nclass Debug {\r\n  constructor() {\r\n    this.Vector3_one = new THREE.Vector3(1,1,1);\r\n    this.Vector3_zero = new THREE.Vector3(0,0,0);\r\n    this.canvas_renderer = undefined;\r\n\r\n    this.rt_debug = undefined;\r\n  }\r\n\r\n  init(webgl)\r\n  {\r\n    this.webgl = webgl;\r\n\r\n    this.ctx = undefined;\r\n\r\n    // var cln = webgl.dom.cloneNode(false);\r\n    // cln.id = \"canvas_debug\";\r\n    // $(cln).css(\"position\", \"absolute\");\r\n    // webgl.dom.parentElement.insertBefore(cln, webgl.dom);\r\n    // this.ctx = cln.getContext('2d');\r\n\r\n    // this.ctx.clearRect(0, 0, cln.width, cln.height);\r\n    // this.ctx.fillStyle =  \"rgba(255, 0, 0, 1)\";\r\n\r\n  }\r\n\r\n  draw_axis()\r\n  {\r\n    let axis = new AxisHelper();\r\n    SceneManager.current.add(axis);\r\n    return axis;\r\n  }\r\n\r\n  set_debug_RT(RT)\r\n  {\r\n    this.rt_debug = RT;\r\n  }\r\n\r\n  draw_rectangle(position_2d, width, height, color)\r\n  {\r\n    width  = width || 100;\r\n    height = height || 100;\r\n    this.ctx.fillStyle =  color || \"rgba(255, 0, 0, 1)\";\r\n    this.ctx.fillRect(position_2d.x - width/2,\r\n                      (this.ctx.canvas.height - position_2d.y) - height/2,width,height);\r\n\r\n  }\r\n\r\n  clear()\r\n  {\r\n    if(this.ctx)\r\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n  }\r\n\r\n  draw_line_2D(from, to, color)\r\n  {\r\n    this.ctx.strokeStyle =  color ||\"rgba(255, 0, 0, 1)\";\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(from.x, from.y);\r\n    this.ctx.lineTo(to.x, to.y);\r\n    this.ctx.closePath();\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  draw_line(from, to, color)\r\n  {\r\n    color = color || 0xff0000;\r\n    let mat = new THREE.LineBasicMaterial({ color: color });\r\n    let geo = new THREE.Geometry();\r\n    geo.vertices.push(from);\r\n    geo.vertices.push(to);\r\n    let line = new THREE.Line(geo, mat);\r\n    SceneManager.current.add(line);\r\n    return line;\r\n  }\r\n  draw_cube(pos, size, color)\r\n  {\r\n    size = size || 1;\r\n    color = color || 0xff0000;\r\n    pos = pos || new THREE.Vector3();\r\n\r\n    var cube = new Cube(new THREE.Vector3(size, size, size), undefined, color );\r\n    cube.position.copy(pos);\r\n    SceneManager.current.add( cube );\r\n    return cube;\r\n  }\r\n  draw_oriented_cube(from, to, height = 1, color = \"#FF0000\", depth = 0.1)\r\n  {\r\n  \tlet size = from.distanceTo(to);\r\n    let cube = new Cube(new THREE.Vector3(depth, height, size), undefined, color );\r\n\r\n  \tlet center = to.clone().sub(from).multiplyScalar(0.5);\r\n\t\tlet forward_dir = center.clone().normalize();\r\n\t\tcenter.add(from);\r\n\r\n\t\tcube.position.copy(center);\r\n\r\n\r\n\t\tlet up = new THREE.Vector3(0,1,0);\r\n  \tlet forward = forward_dir.clone();\r\n  \tlet right = forward.clone().cross(up);\r\n\r\n  \t// cube.quaternion.setFromRotationMatrix(new THREE.Matrix4().makeBasis(right,up,forward));\r\n  \tcube.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,-1), forward_dir);\r\n\r\n    SceneManager.current.add( cube );\r\n    return cube;\r\n  }\r\n  draw_plane(width, height, color)\r\n  {\r\n    var geometry = new THREE.PlaneGeometry( width, height );\r\n    let material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _Color: {value : new THREE.Vector4(0,1,0, 0.2)},\r\n      },\r\n      vertexShader: basic_color_vert,\r\n      fragmentShader: basic_color_frag,\r\n      transparent: true,\r\n      depthWrite: false\r\n    });\r\n\r\n    var plane = new THREE.Mesh( geometry, material );\r\n    plane.renderOrder = -10000\r\n    SceneManager.current.add(plane);\r\n    return plane;\r\n  }\r\n  draw_empty_cube(pos, size,color)\r\n  {\r\n    size = size || 1;\r\n    color = color || 0xff0000;\r\n\r\n    let box = new THREE.Box3().setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(size, size, size));\r\n    let helper = new THREE.Box3Helper( box, color );\r\n    helper.position.copy(pos || new THREE.Vector3());\r\n    return helper;\r\n  }\r\n  draw_sphere(pos, size, color)\r\n  {\r\n    size = size || 1;\r\n    color = color || 0xff0000;\r\n    pos = pos || new THREE.Vector3();\r\n\r\n    var sphere = new Sphere(size, color );\r\n    sphere.position.copy(pos);\r\n    SceneManager.current.add( sphere );\r\n    return sphere;\r\n  }\r\n  draw_sphere_helper(sphere, color)\r\n  {\r\n    color = color || 0xff0000;\r\n    var geometry = new THREE.SphereGeometry( sphere.radius, 32, 32 );\r\n    var material = new THREE.MeshBasicMaterial( {color: color, side: THREE.DoubleSide} );\r\n    var sphere = new THREE.Mesh( geometry, material );\r\n    SceneManager.current.add(sphere);\r\n  }\r\n\r\n  draw_math_sphere(sphere)\r\n  {\r\n    var geometry = new THREE.SphereGeometry( sphere.radius, 32, 32 );\r\n    let material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _Color: {value : new THREE.Vector4(1,0,0, 0.2)},\r\n      },\r\n      vertexShader: basic_color_vert,\r\n      fragmentShader: basic_color_frag,\r\n      transparent: true\r\n    });\r\n    // var material = new THREE.MeshBasicMaterial( {color: 0xff0000, transparent = true} );\r\n    var sphere1 = new THREE.Mesh( geometry, material );\r\n    sphere1.position.copy(sphere.center);\r\n    SceneManager.current.add(sphere1)\r\n  }\r\n\r\n  draw_bounding_box(bb)\r\n  {\r\n    var helper = new THREE.Box3Helper( bb, 0xffff00 );\r\n    SceneManager.current.add( helper );\r\n  }\r\n\r\n  draw_curve(curve, options)\r\n  {\r\n    let offset = new THREE.Vector3(0,0, 0);\r\n    if(options)\r\n      offset.y = options.offset || 0;\r\n\r\n    for(let i=0; i< curve.length-1; i++)\r\n    {\r\n      this.draw_line(curve[i].clone().add(offset), curve[i+1].clone().add(offset));\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst DEBUG = new Debug();\r\nmodule.exports = DEBUG;\r\n","import CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\nimport BaseRender from '/render_mode/BaseRender';\r\nimport Graphics from '/Graphics';\r\n\r\nexport default class NormalRender extends BaseRender\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\r\n\trender()\r\n\t{\r\n\t\tGraphics.clear(undefined, CameraManager.current, true, true);\r\n\r\n\t\tGraphics.render(SceneManager.current, CameraManager.current);\r\n\t}\r\n\r\n}\r\n","export default class ObjectUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n  // Changes XML to JSON\r\n  static xml_to_json(xml) {\r\n\r\n    // Create the return object\r\n    var obj = {};\r\n\r\n    if (xml.nodeType == 1) { // element\r\n      // do attributes\r\n      if (xml.attributes.length > 0) {\r\n        obj[\"@attributes\"] = {};\r\n        for (var j = 0; j < xml.attributes.length; j++) {\r\n          var attribute = xml.attributes.item(j);\r\n          obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\r\n        }\r\n      }\r\n    } else if (xml.nodeType == 3) { // text\r\n      obj = xml.nodeValue;\r\n    }\r\n\r\n    // do children\r\n    if (xml.hasChildNodes()) {\r\n      for (var i = 0; i < xml.childNodes.length; i++) {\r\n        var item = xml.childNodes.item(i);\r\n        var nodeName = item.nodeName;\r\n        if (typeof (obj[nodeName]) == \"undefined\") {\r\n          obj[nodeName] = this.xml_to_json(item);\r\n        } else {\r\n          if (typeof (obj[nodeName].push) == \"undefined\") {\r\n            var old = obj[nodeName];\r\n            obj[nodeName] = [];\r\n            obj[nodeName].push(old);\r\n          }\r\n          obj[nodeName].push(this.xml_to_json(item));\r\n        }\r\n      }\r\n    }\r\n    return obj;\r\n  };\r\n\r\n}\r\n\r\n","export default class PerspectiveCamera extends THREE.PerspectiveCamera\r\n{\r\n\tconstructor(fov, aspect, near, far)\r\n\t{\r\n\t\tsuper(fov, aspect, near, far);\r\n\r\n\t\tthis.clear_color = new THREE.Color(\"#000000\");\r\n\t\tthis.clear_alpha = 1;\r\n\t}\r\n}","export default class GeometryBatch\r\n{\r\n\tconstructor(geometry, batch_width)\r\n\t{\r\n\t\tthis.geometry = geometry;\r\n\r\n\t\tthis.material = undefined;\r\n\t\tthis.uniforms = {};\r\n\t\tthis.batch_width = batch_width;\r\n\r\n\t\tthis.data_textures = [];\r\n\r\n\t\tthis.object_names = undefined;\r\n\r\n\r\n\t\tthis.zero_offset = new THREE.Vector2();\r\n\t\tthis.write_offset = new THREE.Vector2();\r\n\r\n\t\tthis.uniform_dirty_count = 0;\r\n\r\n\t\tthis.tmp_uploaded_data_count = 0;\r\n\r\n\t}\r\n\r\n\tinit(object_names, vert_shader, frag_shader)\r\n\t{\r\n\t\tthis.material = new THREE.ShaderMaterial({\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: vert_shader,\r\n\t\t\tfragmentShader: frag_shader\r\n\t\t});\r\n\t\tthis.object_names = object_names;\r\n\r\n\t}\r\n\r\n\tadd_global_uniform(name, data)\r\n\t{\r\n\t\tthis.uniforms[name] = {value: data};\r\n\t\tthis.material.needsUpdate = true;\r\n\t}\r\n\tset_global_uniform(name, data)\r\n\t{\r\n\t\tthis.uniforms[name].value = data;\r\n\t}\r\n\r\n\tadd_object_uniform_v3(uniform_name, default_value_v3)\r\n\t{\r\n\t\tlet src_tex \t\t= this.__create_rgb_texture(this.batch_width);\r\n\t\tlet dst_tex \t\t= this.__create_rgb_texture(this.batch_width);\r\n\t\tlet one_pixel_tex = this.__create_rgb_texture(1);\r\n\r\n\r\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\r\n\r\n\t\tif(default_value_v3)\r\n\t\t\tthis.__flood_data_texture_rgb(new_data_tex, default_value_v3);\r\n\t\r\n\t}\r\n\r\n\tadd_object_uniform_v4(uniform_name, default_value_v4)\r\n\t{\r\n\t\tlet src_tex \t\t= this.__create_rgba_texture(this.batch_width);\r\n\t\tlet dst_tex \t\t= this.__create_rgba_texture(this.batch_width);\r\n\t\tlet one_pixel_tex = this.__create_rgba_texture(1);\r\n\r\n\r\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\r\n\r\n\t\tif(default_value_v4)\r\n\t\t\tthis.__flood_data_texture_rgba(new_data_tex, default_value_v4);\r\n\t\r\n\t}\r\n\r\n\tadd_object_uniform_v4_float(uniform_name, default_value_v4)\r\n\t{\r\n\t\tlet src_tex \t\t= this.__create_rgba_float_texture(this.batch_width);\r\n\t\tlet dst_tex \t\t= this.__create_rgba_float_texture(this.batch_width);\r\n\t\tlet one_pixel_tex = this.__create_rgba_float_texture(1);\r\n\r\n\r\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\r\n\r\n\t\tif(default_value_v4)\r\n\t\t\tthis.__flood_data_texture_rgba(new_data_tex, default_value_v4);\r\n\t\r\n\t}\r\n\r\n\tset_object_uniform_v3(object_name, uniform_name, vector3, use_r, use_g, use_b)\r\n\t{\r\n\t\tlet obj_index = this.__get_object_index(object_name);\r\n\t\tlet data_texture = this.__get_data_texture(uniform_name);\r\n\r\n\t\tthis.__set_pixel_rgb(data_texture.src, obj_index, vector3, use_r, use_g, use_b);\r\n\t\tthis.__set_pixel_rgb(data_texture.one_pixel, 0\t, vector3, use_r, use_g, use_b);\r\n\r\n\t\tdata_texture.last_accessed_index = obj_index;\r\n\r\n\t\tdata_texture.dirty_count++; \r\n\t}\r\n\r\n\tset_object_uniform_v4(object_name, uniform_name, vector4, use_r, use_g, use_b, use_a)\r\n\t{\r\n\t\tlet obj_index = this.__get_object_index(object_name);\r\n\t\tlet data_texture = this.__get_data_texture(uniform_name);\r\n\r\n\t\tthis.__set_pixel_rgba(data_texture.src, obj_index, vector4, use_r, use_g, use_b, use_a);\r\n\t\tthis.__set_pixel_rgba(data_texture.one_pixel, 0, vector4, use_r, use_g, use_b, use_a);\r\n\t\tdata_texture.last_accessed_index = obj_index;\r\n\r\n\t\tdata_texture.dirty_count++; \r\n\t}\r\n\r\n\r\n\tupload_texture_data(renderer, upload_budget)\r\n\t{\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tif(upload_budget > 0 && this.data_textures[i].dirty_count > 0)\r\n\t\t\t{\r\n\t\t\t\tif(this.data_textures[i].dirty_count === 1)\r\n\t\t\t\t\tthis.__partial_texture_data_upload(renderer, this.data_textures[i]);\r\n\t\t\t\tif(this.data_textures[i].dirty_count > 1)\r\n\t\t\t\t\tthis.__full_texture_data_upload(renderer, this.data_textures[i]);\r\n\r\n\t\t\t\tthis.data_textures[i].dirty_count = 0;\r\n\r\n\t\t\t\tupload_budget--;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tget_uniform_dirty_count()\r\n\t{\r\n\t\tthis.uniform_dirty_count = 0;\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tif(this.data_textures[i].dirty_count > 0)\r\n\t\t\t\tthis.uniform_dirty_count++;\r\n\t\t}\r\n\t\treturn this.uniform_dirty_count;\r\n\t}\r\n\r\n\r\n\t__full_texture_data_upload(renderer, texture_data)\r\n\t{\r\n\t\t// console.log(\"full texture update of\"+ texture_data.name);\r\n\t\ttexture_data.dst.needsUpdate = true;\r\n\t\trenderer.copyTextureToTexture(\r\n\t\t\t\t\tthis.zero_offset, \r\n\t\t\t\t\ttexture_data.src, \r\n\t\t\t\t\ttexture_data.dst\r\n\t\t\t);\r\n\t}\r\n\t__partial_texture_data_upload(renderer, texture_data)\r\n\t{\r\n\t\t// console.log(\"partial texture update\"+ texture_data.name);\r\n\t\tlet index = texture_data.last_accessed_index;\r\n\t\tif(index === -1)\r\n\t\t\treturn;\r\n\t\t\r\n  \tthis.write_offset.y = Math.floor(index/this.batch_width);\r\n  \tthis.write_offset.x = index - this.batch_width*this.write_offset.y;\r\n\t\trenderer.copyTextureToTexture(\r\n\t\t\tthis.write_offset, \r\n\t\t\ttexture_data.one_pixel, \r\n\t\t\ttexture_data.dst\r\n\t\t);\r\n\t}\r\n\r\n\tget_mesh()\r\n\t{\r\n\t\treturn new THREE.Mesh(this.geometry, this.material);\r\n\t}\r\n\r\n\t__set_pixel_rgb(data_texture, index, vector3, use_r, use_g, use_b)\r\n\t{\r\n\t\tif(use_r)\r\n\t\t\tdata_texture.image.data[index*3+0] = vector3.x;\t    \r\n\t\tif(use_g)\r\n\t\t\tdata_texture.image.data[index*3+1] = vector3.y;\t    \r\n\t\tif(use_b)\r\n\t\t\tdata_texture.image.data[index*3+2] = vector3.z;\t\r\n\t}\r\n\t__set_pixel_rgba(data_texture, index, vector4, use_r, use_g, use_b, use_a)\r\n\t{\r\n\t\tif(use_r)\r\n\t\t\tdata_texture.image.data[index*4+0] = vector4.x;\t    \r\n\t\tif(use_g)\r\n\t\t\tdata_texture.image.data[index*4+1] = vector4.y;\t    \r\n\t\tif(use_b)\r\n\t\t\tdata_texture.image.data[index*4+2] = vector4.z;\t\r\n\t\tif(use_a)\r\n\t\t\tdata_texture.image.data[index*4+3] = vector4.w;\r\n\t}\r\n\r\n\t__flood_data_texture_rgb(data_texture, v3)\r\n\t{\r\n\t\tfor(let i=0; i< this.batch_width * this.batch_width; i++)\r\n\t\t{\r\n\t\t\tthis.__set_pixel_rgb(data_texture.src, i, v3, true, true, true);\r\n\t\t\tdata_texture.dirty_count++;\r\n\t\t}\r\n\t}\r\n\r\n\t__flood_data_texture_rgba(data_texture, v4)\r\n\t{\r\n\t\tfor(let i=0; i< this.batch_width * this.batch_width; i++)\r\n\t\t{\r\n\t\t\tthis.__set_pixel_rgba(data_texture.src, i, v4, true, true, true, true);\r\n\t\t\tdata_texture.dirty_count++;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t__create_rgb_texture(width)\r\n\t{\r\n\t\tlet data = new Uint8Array( 3 * width * width );\r\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBFormat );\r\n\t}\r\n\t__create_rgba_texture(width)\r\n\t{\r\n\t\tlet data = new Uint8Array( 4 * width * width );\r\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBAFormat );\r\n\t}\r\n\r\n\t__create_rgba_float_texture(width)\r\n\t{\r\n\t\tlet data = new Float32Array( 4 * width * width );\r\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBA, THREE.FloatType );\r\n\t}\r\n\r\n\t__get_data_texture(uniform_name)\r\n\t{\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tif(this.data_textures[i].name === uniform_name)\r\n\t\t\t\treturn this.data_textures[i];\r\n\t\t}\r\n\t\tconosle.error(\"Data texture \"+uniform_name+\" does not exist\");\r\n\t\treturn undefined;\r\n\t}\r\n\t__get_object_index(name)\r\n\t{\r\n\t\tfor(let i=0; i< this.object_names.length; i++)\r\n\t\t{\r\n\t\t\tif(this.object_names[i] === name)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t\tconsole.error(\"the name \"+name+\" is not contained in this batch\");\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t__add_data_texture(uniform_name, src_texture, dst_texture, one_pixel_text)\r\n\t{\r\n\t\tdst_texture.needsUpdate = true;\r\n\r\n\t\tthis.data_textures.push({\r\n\t\t\tname: uniform_name,\r\n\t\t\tsrc: src_texture, \r\n\t\t\tdst: dst_texture,\r\n\t\t\tone_pixel: one_pixel_text,\r\n\t\t\tlast_accessed_index: -1,\r\n\t\t\tdirty_count: 0\r\n\t\t});\r\n\r\n\t\tthis.uniforms[uniform_name] = {value: dst_texture};\r\n\t\treturn this.data_textures[this.data_textures.length-1];\r\n\t}\r\n\r\n\tdispose()\r\n\t{\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tthis.data_textures[i].src.dispose();\r\n\t\t\tthis.data_textures[i].dst.dispose();\r\n\t\t\tthis.data_textures[i].one_pixel.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n}","import GeometryBatch from '/static_batcher/GeometryBatch'\r\n\r\nclass GeometryBatcher\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.batches = [];\r\n\t}\r\n\r\n\tbatch(buffer_geometries)\r\n\t{\r\n\t  let attr_accessor_uvs = [];\r\n\t  let texture_width = THREE.Math.ceilPowerOfTwo(Math.sqrt(buffer_geometries.length));\r\n\t  // console.log(\"Store count: \" + buffer_geometries.length + \", Texture size: \" +texture_width);\r\n\r\n\t  this.__init_uv_array(attr_accessor_uvs, texture_width);\r\n\r\n\r\n\t  let uv_index = 0;\r\n\r\n\t  for(let i=0; i< buffer_geometries.length; i++)\r\n\t  {\r\n\t    let vertex_count = buffer_geometries[i].getAttribute('position').count;\r\n\t    let y = Math.floor(i/texture_width);\r\n\t    let x = i - texture_width*y;\r\n\t    for(let count = 0; count < vertex_count; count++)\r\n\t    {\r\n\r\n\t      attr_accessor_uvs[uv_index] = (x/texture_width) + 0.5/texture_width;\r\n\t      attr_accessor_uvs[uv_index+1] = (y/texture_width) + 0.5/texture_width;\r\n\t      uv_index+=2;\r\n\t    }\r\n\t  }\r\n\r\n\t  let buffer_attribute = new THREE.BufferAttribute( new Float32Array( attr_accessor_uvs ), 2);\r\n\t  let buffer_geometry = THREE.BufferGeometryUtils.mergeBufferGeometries(buffer_geometries);\r\n\t  buffer_geometry.setAttribute( 'attr_accessor_uv', buffer_attribute);\r\n\r\n\t  this.batches.push(new GeometryBatch(buffer_geometry, texture_width));\r\n\t  return this.batches[this.batches.length-1];\r\n\r\n\t}\r\n\r\n\tupload_texture_data(renderer)\r\n\t{\r\n\t\tfor(let i=0; i< this.batches.length; i++)\r\n\t\t{\r\n\t\t\tthis.batches[i].upload_texture_data(renderer, 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t__init_uv_array(uvs, texture_width)\r\n\t{\r\n\t\tfor(let i=0; i< texture_width*texture_width*2; i++)\r\n\t  {\r\n\t    uvs.push(0);\r\n\t  }\r\n\t}\r\n}\r\n\r\n\r\nconst geometry_batcher = new GeometryBatcher();\r\nmodule.exports = geometry_batcher;\r\n","import Time from '/Time';\r\nimport Input from '/Input';\r\nimport UI from '/UI';\r\nimport Debug from '/Debug';\r\nimport GeometryBatcher from '/static_batcher/GeometryBatcher';\r\nimport BaseApplication from '/BaseApplication';\r\n\r\nexport default class RenderLoop {\r\n\r\n  constructor(target_application, renderer) {\r\n\r\n    target_application = target_application || new BaseApplication();\r\n\r\n    this._frame_id = -1;\r\n\r\n    this.target_application = target_application;\r\n    this.renderer = renderer;\r\n\r\n    this.is_running = true;\r\n    this.frames_passed = 0;\r\n\r\n  }\r\n\r\n  update() {\r\n\r\n    if(!this.is_running)\r\n      return;\r\n\r\n    Time.__update();\r\n    Debug.clear();\r\n\r\n    //###### START CYCLE ######\r\n    if (this.frames_passed === 5) {\r\n      this.target_application.post_start();\r\n    }\r\n\r\n    this.target_application.update();\r\n\r\n    this.target_application.on_pre_render();\r\n\r\n    this.renderer.update();     // render scene\r\n    UI.update();                // update after new camera matrix has been calculated\r\n    UI.render(this.renderer);   // render ui layer on top\r\n\r\n    this.target_application.on_post_render();\r\n\r\n    if(Debug.rt_debug)\r\n      this.renderer.blit(Debug.rt_debug);\r\n    //###### END  CYCLE #######\r\n    Input.clear();\r\n    UI.clear();\r\n\r\n    //   GeometryBatcher.upload_texture_data(this.renderer);\r\n\r\n    this._frame_id = requestAnimationFrame(this.update.bind(this));\r\n    this.frames_passed++;\r\n  }\r\n\r\n  start() {\r\n    this.target_application.start();\r\n    this.update();\r\n    this.is_running = true;\r\n\r\n\r\n  }\r\n\r\n  stop() {\r\n    this.is_running = false;\r\n    this.target_application.end();\r\n\r\n    cancelAnimationFrame(this._frame_id);\r\n  }\r\n}\r\n","export default class AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tthis.progress = 0;\r\n\t\tthis.resource_id = resource_id;\r\n\t\tthis.url = url;\r\n\r\n\t\tthis.has_finished = false;\r\n\t\tthis.has_error = false;\r\n\t\tthis.error_message = \"none\";\r\n\t}\r\n\r\n\t__update_progress(value)\r\n\t{\r\n\t\tthis.progress = value;\r\n\t}\r\n\t__loading_ended()\r\n\t{\r\n\t\tthis.has_finished = true;\r\n\t}\r\n\t__set_error(message)\r\n\t{\r\n\t\tthis.has_error = true;\r\n\t\tthis.error_message = message;\r\n\t}\r\n\r\n\tprint_error()\r\n\t{\r\n\t\tconsole.error(\"Error while loading \"+this.resource_id+\"\\n\\t path: \"+this.url+\"\\n\\t\\t\"+this.error_message);\r\n\t}\r\n\r\n\tload(resource_container) {\r\n\r\n\t}\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class TextureLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.TextureLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (image)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, image);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\t() => {\r\n\t\t\t\tctx.__set_error(\"Image could not  be loaded. Maybe wrong name or path, I don't know\" + '¯\\\\_(ツ)_/¯');\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class GLTFLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.GLTFLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (gltf)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, gltf);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\t(xhr) =>{\r\n\t\t\t\tctx.__update_progress(xhr.loaded/xhr.total);\r\n\t\t\t},\r\n\t\t\t(msg) => {\r\n\t\t\t\tctx.__set_error(msg +\"\\n\\n\\t If the error says something about unexpected token < in JSON then the probably the problem is related to the file not being found. Check the name and path of the resource\");\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class DAELoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.ColladaLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (gltf)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, gltf);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\t(xhr) =>{\r\n\t\t\t\tctx.__update_progress(xhr.loaded/xhr.total);\r\n\t\t\t},\r\n\t\t\t(msg) => {\r\n\t\t\t\tctx.__set_error(msg +\"\\n\\n\\t If the error says something about unexpected token < in JSON then the probably the problem is related to the file not being found. Check the name and path of the resource\");\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class TextLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.FileLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (gltf)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, gltf);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\t(xhr) =>{\r\n\t\t\t\tctx.__update_progress(xhr.loaded/xhr.total);\r\n\t\t\t},\r\n\t\t\t(msg) => {\r\n\t\t\t\tctx.__set_error(msg);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class CubemapLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.CubeTextureLoader();\r\n\r\n\t\tthis.urls = [];\r\n\t\tthis.urls.push(url);\r\n\t\tthis.urls.push(url);\r\n\t\tthis.urls.push(url);\r\n\t\tthis.urls.push(url);\r\n\t\tthis.urls.push(url);\r\n\t\tthis.urls.push(url);\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.urls, (image)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, image);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\t(error) => {\r\n\t\t\t\tctx.__set_error(\"Image could not  be loaded. Maybe wrong name or path, I don't know\" + '¯\\\\_(ツ)_/¯', error);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class AudioLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url, listener, loop, volume)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.AudioLoader();\r\n\t\tthis.loop = loop;\r\n\t\tthis.listener = listener;\r\n\t\tthis.voluem = volume;\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\t\tlet sound = new THREE.Audio(this.listener);\r\n\r\n\t\tthis.loader.load(this.url, (audio)=> {\r\n\t\t\tsound.setBuffer(audio);\r\n\t\t\tsound.setLoop(this.loop);\r\n\t\t\tsound.setVolume(this.voluem);\r\n\r\n\t\t\tresource_container.set_resource(ctx.resource_id, sound);\r\n\r\n\t\t\tif (!resource_container.get_resource('audio_listener')) {\r\n\t\t\t\tresource_container.set_resource('audio_listener', this.listener);\r\n\t\t\t}\r\n\r\n\t\t\tctx.__update_progress(1);\r\n\t\t\tctx.__loading_ended()\r\n\t\t},\r\n\t\tundefined,\r\n\t\t(error) => {\r\n\t\t\tctx.__set_error(\"Audio could not be loaded. Maybe wrong name or path, I don't know\" + '¯\\\\_(ツ)_/¯', error);\r\n\t\t\tctx.__loading_ended()\r\n\t\t});\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class JSONLoader extends AbstractLoader {\r\n\tconstructor(resource_id, url, username, password) {\r\n\t\tsuper(resource_id, url);\r\n\r\n\t\tthis.loader = new THREE.FileLoader();\r\n\t\tthis.username = username;\r\n\t\tthis.password = password;\r\n\t\tthis.resource_container = undefined;\r\n\t}\r\n\r\n\tload(resource_container) {\r\n\t\t// let headers = new Headers();\r\n\t\tlet headers = {};\r\n\t\tthis.resource_container = resource_container;\r\n\r\n\t\tif (this.username !== undefined && this.password !== undefined) {\r\n\t\t\theaders['Authorization'] = `Basic ${btoa(`${this.username}:${this.password}`)}`\r\n\t\t}\r\n\r\n\t\tfetch(this.url, { headers: headers })\r\n\t\t\t.then(this.__parse_to_json.bind(this))\r\n\t\t\t.then(this.__set_resource.bind(this))\r\n\t}\r\n\r\n\t__parse_to_json(response) {\r\n\t\treturn response.json();\r\n\t}\r\n\r\n\t__set_resource(data) {\r\n\t\tthis.resource_container.set_resource(this.resource_id, data);\r\n\r\n\t\tthis.__update_progress(1);\r\n\t\tthis.__loading_ended();\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class OBJLoader extends AbstractLoader {\r\n    constructor(resource_id, url) {\r\n        super(resource_id, url);\r\n        this.loader = new THREE.OBJLoader();\r\n    }\r\n\r\n    load(resource_container) {\r\n        let ctx = this;\r\n\r\n        this.loader.load(this.url, (gltf) => {\r\n            resource_container.set_resource(ctx.resource_id, gltf);\r\n            ctx.__update_progress(1);\r\n            ctx.__loading_ended()\r\n        },\r\n            (xhr) => {\r\n                ctx.__update_progress(xhr.loaded / xhr.total);\r\n            },\r\n            (msg) => {\r\n                ctx.__set_error(msg + \"\\n\\n\\t If the error says something about unexpected token < in JSON then probably the problem is related to the file not being found. Check the name and path of the resource\");\r\n                ctx.__loading_ended()\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","import EventManager from '/EventManager';\r\n\r\nclass ResourceContainer\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.resources = {};\r\n\t}\r\n\r\n\tset_resource(name, resource)\r\n\t{\r\n\t\tthis.resources[name] = resource;\r\n\t\tEventManager.fire_resource_loaded({name: name, value: resource});\r\n\t}\r\n\r\n\tget_resource(name)\r\n\t{\r\n\t\treturn this.resources[name];\r\n\t}\r\n\tget(name)\r\n\t{\r\n\t\treturn this.resources[name];\r\n\t}\r\n\r\n}\r\n\r\nconst resource_container = new ResourceContainer();\r\nmodule.exports = resource_container;\r\n","import TextureLoader from '/resource_loader/TextureLoader';\r\nimport GLTFLoader from '/resource_loader/GLTFLoader';\r\nimport DAELoader from '/resource_loader/DAELoader';\r\nimport TextLoader from '/resource_loader/TextLoader';\r\nimport CubemapLoader from '/resource_loader/CubemapLoader';\r\nimport AudioLoader from '/resource_loader/AudioLoader';\r\nimport JSONLoader from '/resource_loader/JSONLoader';\r\nimport OBJLoader from '/resource_loader/OBJLoader';\r\nimport ResourceContainer from '/ResourceContainer';\r\n\r\nexport default class ResourceBatch\r\n{\r\n\tconstructor(batch_name)\r\n\t{\r\n\t\tthis.resource_loaders = [];\r\n\t\tthis.batch_name = batch_name || \"unnamed batch\";\r\n\t}\r\n\r\n\tadd_texture(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new TextureLoader(resource_id, url));\r\n\t}\r\n\r\n\tadd_gltf(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new GLTFLoader(resource_id, url));\r\n\t}\r\n\tadd_dae(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new DAELoader(resource_id, url));\r\n\t}\r\n\tadd_obj(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new OBJLoader(resource_id, url));\r\n\t}\r\n\tadd_text(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new TextLoader(resource_id, url));\r\n\t}\r\n\tadd_cubemap(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new CubemapLoader(resource_id, url));\r\n\t}\r\n\tadd_audio(resource_id, url, listener, loop, volume) {\r\n\t\tthis.resource_loaders.push(new AudioLoader(resource_id, url, listener, loop, volume));\r\n\t}\r\n\tadd_json(resource_id, url, username, password) {\r\n\t\tthis.resource_loaders.push(new JSONLoader(resource_id, url, username, password));\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tthis.resource_loaders[i].load(resource_container || ResourceContainer);\r\n\t\t}\r\n\t}\r\n\r\n\tget loading_finished()\r\n\t{\r\n\t\tlet finished = true;\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tfinished = finished && this.resource_loaders[i].has_finished;\r\n\t\t}\r\n\t\treturn finished;\r\n\t}\r\n\r\n\tget has_errors()\r\n\t{\r\n\t\tlet has_error = false;\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\thas_error = has_error || this.resource_loaders[i].has_error;\r\n\t\t}\r\n\t\treturn has_error;\r\n\t}\r\n\r\n\tprint_errors()\r\n\t{\r\n\t\tconsole.error(\"Batch <\"+this.batch_name+\"> could not load successfully\")\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tif(this.resource_loaders[i].has_error)\r\n\t\t\t\tthis.resource_loaders[i].print_error();\r\n\t\t}\r\n\t}\r\n\r\n\tget_progress()\r\n\t{\r\n\t\tlet progress = 0;\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tprogress+=this.resource_loaders[i].progress;\r\n\t\t}\r\n\t\treturn progress/this.resource_loaders.length;\r\n\t}\r\n}\r\n","// This class helps with parsing an entire recording that spans several days, into one-day recordings\r\n// that start at 0:00:00 and ends at 23:59:59, except for the first and last day of a recording range\r\nexport default class TimeUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n\r\n  static get full_day_ms()\r\n  {\r\n    return 86400000;\r\n  }\r\n\r\n  static get_days_between(start_date, end_date)\r\n  {\r\n  \t// \tlet startDate = moment.parseZone(\"2020-03-15T18:31:23.623794-04:00\");\r\n\t\t// let endDate \t= moment.parseZone(\"2020-03-23T12:17:06.815451-04:00\");\r\n  \tlet startDate = moment.parseZone(start_date);\r\n\t\tlet endDate \t= moment.parseZone(end_date);\r\n\t\tlet duration  = moment.duration(endDate.diff(startDate));\r\n    let days \t\t\t= Math.ceil(duration.asDays());\r\n\r\n\t\tlet start,end;\r\n\t\tlet days_array = [];\r\n\r\n    for(let i = 0; i<=days; i++){\r\n\r\n      if(startDate.date() === endDate.date())\r\n      {\r\n        start = startDate;\r\n        end = endDate;\r\n      }\r\n      else\r\n      {\r\n        if(i == 0){\r\n          start = startDate;\r\n          end = moment(startDate).endOf(\"day\");\r\n        }else if(i == days){\r\n          start = moment(endDate).startOf('day');\r\n          end = endDate;\r\n        } else {\r\n          start = moment(startDate).add('days', i).startOf('day');\r\n          end = moment(startDate).add('days', i).endOf('day');\r\n        }\r\n      }\r\n\r\n\r\n\t\t  days_array.push({\r\n\t\t  \tstart: moment(start),\r\n\t\t  \tend: moment(end),\r\n\t\t  \tduration_in_seconds: moment.duration(moment(end).diff(moment(start))).asSeconds(),\r\n        absolute_start_date: start_date,\r\n        absolute_end_date: end_date\r\n\t\t  })\r\n\r\n\t\t}\r\n\r\n\t\treturn days_array;\r\n  }\r\n\r\n}\r\n\r\n","export default class Validation\r\n{\r\n\tconstructor(){}\r\n\r\n  static is_int(n) {\r\n    return Number(n) === n && n % 1 === 0;\r\n  }\r\n\r\n  static is_float(n) {\r\n    return Number(n) === n && n % 1 !== 0;\r\n  }\r\n\r\n  static is_json(str)\r\n  {\r\n    try {\r\n      JSON.parse(str);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvarying vec3 vBarycentric;\\n\\nfloat edgeFactor(vec3 baryc ){\\n    vec3 d = fwidth(baryc);\\n    vec3 a3 = smoothstep(vec3(0.0), d*1.5, baryc);\\n    return min(min(a3.x, a3.y), a3.z);\\n}\\n\\nvoid main()\\n{\\t\\n\\tfloat alpha = edgeFactor(vBarycentric + vec3(1. , 1., 0.));\\n\\tgl_FragColor.rgb = mix(_Color, vec3(0.), alpha);\\n\\tgl_FragColor.a = 1.0 - alpha;\\n\\tgl_FragColor.a *= 0.2;\\n}\";","module.exports=\"#define GLSLIFY 1\\nattribute vec3 barycentric;\\nvarying vec3 vBarycentric;\\nvoid main()\\n{\\n\\n  mat4 VP = projectionMatrix * viewMatrix;\\n  vec3 pos = (modelMatrix * vec4(position, 1.0)).xyz;\\n  gl_Position = VP * vec4(pos, 1.0);\\n  vBarycentric = barycentric;\\n}\";","export default class GeometryUtilities\r\n{\r\n\tstatic convert_to_non_indexed_geometry(geometry_buffer)\r\n\t{\r\n\t\tlet indices = geometry_buffer.index;\r\n\t\tlet positions = geometry_buffer.getAttribute(\"position\");\r\n\r\n\t\tlet bar_coordinates = [];\r\n\t\tlet vertices = [];\r\n\r\n\t\tfor(let i=0; i< indices.count; i+=3)\r\n\t\t{\r\n\t\t\t// VERTEX 1\r\n\t\t\tvertices.push(positions.getX(indices.array[i+0]));\r\n\t\t\tvertices.push(positions.getY(indices.array[i+0]));\r\n\t\t\tvertices.push(positions.getZ(indices.array[i+0]));\r\n\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\r\n\t\t\t// VERTEX 2\r\n\r\n\t\t\tvertices.push(positions.getX(indices.array[i+1]));\r\n\t\t\tvertices.push(positions.getY(indices.array[i+1]));\r\n\t\t\tvertices.push(positions.getZ(indices.array[i+1]));\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\r\n\t\t\t// VERTEX 3\r\n\r\n\t\t\tvertices.push(positions.getX(indices.array[i+2]));\r\n\t\t\tvertices.push(positions.getY(indices.array[i+2]));\r\n\t\t\tvertices.push(positions.getZ(indices.array[i+2]));\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\r\n\r\n\t\t}\r\n\r\n\t\tlet geometry = new THREE.BufferGeometry();\r\n\t\t// geometry.setAttribute('barycentric', new THREE.BufferAttribute( new Float32Array(bar_coordinates), 3 ));\r\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );\r\n\t\tGeometryUtilities.add_barycentric_attribute(geometry);\r\n\t\treturn geometry;\r\n\t}\r\n\r\n\tstatic add_barycentric_attribute(non_indexed_geometry_buffer)\r\n\t{\r\n\t\tlet bar_coordinates = [];\r\n\t\tlet positions = non_indexed_geometry_buffer.getAttribute(\"position\");\r\n\r\n\t\tfor(let i=0; i< positions.count; i+=3)\r\n\t\t{\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\r\n\t\t}\r\n\t\tnon_indexed_geometry_buffer.setAttribute('barycentric', new THREE.BufferAttribute( new Float32Array(bar_coordinates), 3 ));\r\n\t}\r\n}\r\n","import grid_frag from '/shaders/grid/grid_frag';\r\nimport grid_vert from '/shaders/grid/grid_vert';\r\nimport GeometryUtilities from '/utilities/GeometryUtilities';\r\n\r\nexport default class Grid extends THREE.Mesh {\r\n\tconstructor()\r\n\t{\r\n\r\n\t\tlet material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n      \t_Color: {value: new THREE.Color(\"#919191\")}\r\n      },\r\n      vertexShader: grid_vert,\r\n      fragmentShader: grid_frag,\r\n      extensions: {derivatives: true},\r\n      transparent: true,\r\n      depthWrite: false\r\n    });\r\n\r\n\r\n    let plane_geometry = new THREE.PlaneBufferGeometry( 100, 100, 100,100 );\r\n\r\n\t\tlet non_indexed_geometry = GeometryUtilities.convert_to_non_indexed_geometry(plane_geometry);\r\n\r\n\t\tsuper(non_indexed_geometry, material);\r\n\r\n\t\tthis.rotation.x = -3.14/2;\r\n\t}\r\n\r\n}\r\n","import Grid from '/components/Grid';\r\nexport default {\r\n  Grid: Grid\r\n}\r\n","import ArrayUtilities from '/utilities/ArrayUtilities.js';\r\nimport BaseApplication from '/BaseApplication';\r\nimport BaseShaderMaterial from '/materials/BaseShaderMaterial';\r\nimport CameraManager from '/CameraManager';\r\nimport CameraUtilities from '/utilities/CameraUtilities';\r\nimport Capabilities from '/Capabilities';\r\nimport Configuration from '/Configuration';\r\nimport EasingFunctions from '/utilities/EasingFunctions';\r\nimport EventManager from '/EventManager';\r\nimport Debug from '/Debug';\r\nimport Graphics from '/Graphics';\r\nimport Input from '/Input';\r\nimport MathUtilities from '/utilities/MathUtilities';\r\nimport NormalRender from '/render_mode/NormalRender';\r\nimport ObjectUtilities from '/utilities/ObjectUtilities';\r\nimport PerspectiveCamera from '/PerspectiveCamera';\r\nimport RenderLoop from '/RenderLoop';\r\nimport ResourceBatch from '/resource_loader/ResourceBatch';\r\nimport ResourceContainer from '/ResourceContainer';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\nimport Time from '/Time';\r\nimport TimeUtilities from '/utilities/TimeUtilities';\r\nimport Validation from '/utilities/Validation';\r\nimport Components from '/Components';\r\n\r\nmodule.exports = {\r\n  ArrayUtilities: ArrayUtilities,\r\n  BaseApplication: BaseApplication,\r\n  BaseShaderMaterial: BaseShaderMaterial,\r\n  CameraManager: CameraManager,\r\n  CameraUtilities: CameraUtilities,\r\n  Capabilities: Capabilities,\r\n  Configuration: Configuration,\r\n  EasingFunctions: EasingFunctions,\r\n  EventManager: EventManager,\r\n  Debug: Debug,\r\n  Graphics: Graphics,\r\n  Input: Input,\r\n  MathUtilities: MathUtilities,\r\n  NormalRender: NormalRender,\r\n  ObjectUtilities: ObjectUtilities,\r\n  PerspectiveCamera: PerspectiveCamera,\r\n  RenderLoop: RenderLoop,\r\n  ResourceBatch: ResourceBatch,\r\n  ResourceContainer: ResourceContainer,\r\n  SceneManager: SceneManager,\r\n  Screen: Screen,\r\n  Time: Time,\r\n  TimeUtilities: TimeUtilities,\r\n  Validation: Validation,\r\n  Components: Components\r\n}\r\n"]}