{"version":3,"sources":["Configuration.js","render_mode/BaseRender.js","Screen.js","RenderLayers.js","shaders/box_blur/compose_frag.glsl","shaders/box_blur/box_blur_frag.glsl","shaders/copy/copy_frag.glsl","shaders/copy/copy_vert.glsl","shaders/basic_color/basic_color_frag.glsl","render_mode/OutlineRender.js","CameraManager.js","SceneManager.js","Time.js","KeyboardInput.js","Input.js","UI.js","Capabilities.js","materials/BlitMaterial.js","shaders/clear/clear_depth_normal_frag.glsl","materials/ClearDepthNormalMaterial.js","shaders/depth_normals/depth_normals_vert.glsl","shaders/depth_normals/depth_normals_frag.glsl","materials/DepthNormalMaterial.js","render_utilities/DepthAndNormalsRenderer.js","render_utilities/Blitter.js","Graphics.js","components/AxisHelper.js","shaders/basic_color/basic_color_vert.glsl","editor/shaders/object_picker_vert.glsl","editor/shaders/object_picker_frag.glsl","Mesh.js","primitives/Cube.js","primitives/Sphere.js","Debug.js","static_batcher/GeometryBatch.js","static_batcher/GeometryBatcher.js","BaseApplication.js","RenderLoop.js","index.js"],"names":["Configuration","dpr","window","devicePixelRatio","is_mobile","is_ios","vertex_image_unit_supported","min_zoom_distance","max_zoom_distance","max_zoom_distance_scale","zoom_speed","use_fxaa","use_ssaa","background_color","THREE","Color","touch_sensitivity","zoom_sensitivity","spin_sensitivity","three_finger_rotation_speed","three_finger_allowed_x_rotation_offset","three_finger_allowed_y_rotation_offset","use_touch_gestures","texture_float_supported","use_ortographic","hover_enabled","rotation_enabled","transparency_amount","show_debug_sphere_on_floor_selection","show_debug_sphere_on_steps_in_floor","display_cleanup_log","navigation_speed_damping","navigation_speed","out_of_bounds_force","mouse_zoom_speed","touch_zoom_speed","json","configuration","module","exports","BaseRender","context","renderer","Screen","width","height","width_height","Vector2","screen_materials","native_width","native_height","pixel_size","x","y","i","length","uniforms","_ScreenSize","value","vector2","multiplyScalar","innerWidth","innerHeight","mat","push","index","indexOf","splice","RenderLayers","OutlineRender","webgl","main_rt","WebGLRenderTarget","rt1","rt2","compose_material","__get_compose_material","copy_material","__get_copy_material","box_blur_material","__get_box_blur_material","background_material","__get_background_material","copy_plane","Mesh","PlaneGeometry","frustumCulled","copy_scene","Scene","add","w","h","setSize","_Screen","set","camera","updateMatrix","updateMatrixWorld","layers","enable","opaque","transparent","disable","outline","_renderer","setClearColor","clear_color","clearTarget","overrideMaterial","_Color","r","g","b","render","scene","_MainTex","texture","_SampleDir","_Blur","undefined","ShaderMaterial","vertexShader","copy_vert","fragmentShader","copy_frag","depthTest","depthWrite","box_blur_frag","compose_frag","extensions","derivatives","Vector4","background_frag","autoClear","CameraManager","_current","camera_manager","SceneManager","name","scene_manager","Time","___time","Clock","__delta_time","__elapsed_time","__allocated_time","getDelta","getElapsedTime","delta_time","elapsed_time","time","KeyboardInput","ctrlz_pressed","ctrlz_fired","keys","document","onkeydown","on_key_down","bind","onkeyup","on_key_up","onkeypress","on_key_press","e","keyCode","ctrlKey","key","press_key","release_keys","pressed","fired","down","key_name","up","keyboard_input","Input","mouse_pos","last_mouse_pos","mouse_dir","__clicked_time","is_mouse_down","is_mouse_up","rotation_angle","_normalized_mouse_pos","left_mouse_button_down","left_mouse_button_pressed","left_mouse_button_released","middle_mouse_button_down","right_mouse_button_down","right_mouse_button_pressed","right_mouse_button_released","mousewheel","previous_scale","previous_rotation","previous_rotation_dirty","mouse_str","tmp_mouse_velocity","bounding_client","multitouch_active","tapped","initial_zoom_distance","zoom_center","zoom_started","touch_zoom","multi_touch_dir","wheel_delta","mac","pinching_with_trackpad","scrolling_with_trackpad","scrolling_with_mouse","double_click","canvas","rect","getBoundingClientRect","left","top","container","region","ZingTouch","Region","init","scope","set_mouse_pos","addEventListener","on_double_click","on_focus_lost","one_finger_pan","Pan","numInputs","register","event","detail","data","on_mouse_move","two_fingers_pan","change","three_fingers_pan","touch_zoom_delta","distance","last_zoom_distance","center","gesture","Gesture","end","inputs","state","element","on_mouse_up","start","on_mouse_down","on_mouse_wheel","clientX","clientY","ev","events","get_os","is_mac","console","log","deltaY","is_int","Math","abs","current","originalEvent","which","middle_mouse_button_released","rotation_delta","userAgent","navigator","platform","os","test","n","clear","normalized_mouse_pos","INPUT","UI","ui_elements","_tmp_normalized_pos","autoUpdate","elem","mesh","remove","copy","update","render_ui","current_clicked_element","resize","ui","Capabilities","max_anisotropy","vertex_texture_sampler_available","fp_textures_available","capabilities","BlitMaterial","frag_shader","vert_shader","defines","_Resolution","vert","frag","blending","NoBlending","AlwaysDepth","ClearDepthNormalMaterial","clear_depth","clear_normal","_DepthNormal","z","DepthNormalMaterial","_FarPlane","DepthAndNormalsRenderer","RT","clear_depth_normal_mat","Vector3","depth_normal_material","graphics","__resize_RT_if_necessary","blit_clear_with_material","far_plane","far","Blitter","_blit_scene","_blit_material","_blit_quad","PlaneBufferGeometry","_blit_camera","OrthographicCamera","src","dst","material","setRenderTarget","dst_RT","Graphics","blitter","dom","no_render","current_render_mode","generateDepthNormalTexture","depth_and_normals_renderer","WebGLRenderer","antialias","preserveDrawingBuffer","alpha","setPixelRatio","min","max","get","domElement","getMaxAnisotropy","maxVertexTextures","floatVertexTextures","id","on_resize","new_state","constructor","on_exit","on_enter","aspect","aspect_ratio","updateProjectionMatrix","override_mat","__apply_override_material","buffer","readRenderTargetPixels","clear_stencil","clear_alpha","offsetWidth","offsetHeight","update_size","update_native_size","src_RT","blit_with_material","blit","blob_callback","ctx","old_width","old_height","divisions_x","parseInt","ceil","new_width","divisions_y","new_height","ctx_2D","setViewOffset","drawImage","toBlob","clearViewOffset","blob","link","createElement","download","href","URL","createObjectURL","click","onclick","requestAnimationFrame","revokeObjectURL","a","removeAttribute","render_target","Object3D","AxisHelper","scale","blueAxisMat","LineBasicMaterial","color","depthFunc","blueAxisGeo","Geometry","vertices","blueAxisLine","Line","renderOrder","greenAxisMat","greenAxisGeo","greenAxisLine","redAxisMat","linewidth","redAxisGeo","computeLineDistances","redAxisLine","geometry","_selectable_material","__get_selectable_material","original_material","stored_layers","mask","Cube","size","segments","BoxGeometry","MeshBasicMaterial","Sphere","radius","SphereBufferGeometry","Debug","Vector3_one","Vector3_zero","canvas_renderer","rt_debug","axis","position_2d","fillStyle","fillRect","clearRect","from","to","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","geo","line","pos","cube","position","depth","distanceTo","clone","sub","forward_dir","normalize","cross","quaternion","setFromUnitVectors","basic_color_vert","basic_color_frag","plane","box","Box3","setFromCenterAndSize","helper","Box3Helper","sphere","SphereGeometry","side","DoubleSide","sphere1","bb","curve","options","offset","draw_line","DEBUG","GeometryBatch","batch_width","data_textures","object_names","zero_offset","write_offset","uniform_dirty_count","tmp_uploaded_data_count","needsUpdate","uniform_name","default_value_v3","src_tex","__create_rgb_texture","dst_tex","one_pixel_tex","new_data_tex","__add_data_texture","__flood_data_texture_rgb","default_value_v4","__create_rgba_texture","__flood_data_texture_rgba","__create_rgba_float_texture","object_name","vector3","use_r","use_g","use_b","obj_index","__get_object_index","data_texture","__get_data_texture","__set_pixel_rgb","one_pixel","last_accessed_index","dirty_count","vector4","use_a","__set_pixel_rgba","upload_budget","__partial_texture_data_upload","__full_texture_data_upload","texture_data","copyTextureToTexture","floor","image","v3","v4","Uint8Array","DataTexture","RGBFormat","RGBAFormat","Float32Array","RGBA","FloatType","conosle","error","src_texture","dst_texture","one_pixel_text","dispose","GeometryBatcher","batches","buffer_geometries","attr_accessor_uvs","texture_width","ceilPowerOfTwo","sqrt","__init_uv_array","uv_index","vertex_count","getAttribute","count","buffer_attribute","BufferAttribute","buffer_geometry","BufferGeometryUtils","mergeBufferGeometries","addAttribute","upload_texture_data","uvs","geometry_batcher","BaseApplication","RenderLoop","target_application","_frame_id","is_running","__update","on_pre_render","on_post_render","cancelAnimationFrame"],"mappings":"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","file":"index.js","sourceRoot":"src","sourcesContent":["/*\n\n  A configuration class used as a singleton\n\n*/\n\nclass Configuration {\n  constructor(parameters = {}) {\n\n    this.dpr = window.devicePixelRatio ? window.devicePixelRatio : 1;\n    this.is_mobile = false;\n    this.is_ios = false;\n\n    this.vertex_image_unit_supported = true;\n\n    this.min_zoom_distance = 3000;\n\n    this.max_zoom_distance = 40000;\n    this.max_zoom_distance_scale = 1.1;\n    this.zoom_speed = 0.1;\n\n\n\n    this.use_fxaa = false;\n    this.use_ssaa = true;\n\n\n\n    this.background_color = new THREE.Color(0.768,0.768,0.768);\n\n\n\n\n    //TOUCH\n    this.touch_sensitivity = 1.5;\n    this.zoom_sensitivity = 0.7;\n    this.spin_sensitivity = 2;\n    this.three_finger_rotation_speed = 3;\n    this.three_finger_allowed_x_rotation_offset = 30;\n    this.three_finger_allowed_y_rotation_offset = 20;\n\n\n    this.use_touch_gestures = false;\n\n\n    this.texture_float_supported = false;\n\n    this.use_ortographic = true;\n\n    this.hover_enabled = false;\n    this.rotation_enabled = false;\n\n    this.transparency_amount = 0.2;\n\n    this.show_debug_sphere_on_floor_selection = false;\n    this.show_debug_sphere_on_steps_in_floor = false;\n    this.display_cleanup_log = false;\n\n\n    this.navigation_speed_damping = 0.74;\n    this.navigation_speed = 200;\n    this.out_of_bounds_force = 1.5;\n    this.mouse_zoom_speed = 0.05;\n    this.touch_zoom_speed = 0.5;\n\n\n  }\n\n\n\n\n\n\n  from_json(json)\n  {\n\n\n  }\n}\n\nconst configuration = new Configuration();\nmodule.exports = configuration;\n","export default class BaseRender\n{\n\tconstructor()\n\t{\n\n\t}\n\n\trender()\n\t{\n\t\t\n\t}\n\n\ton_enter(context, renderer)\n\t{\n\n\t}\n\n\ton_exit(context, renderer)\n\t{\n\t\t\n\t}\n\n\tresize()\n\t{\n\t\t\n\t}\n\n}\n","class Screen {\n\tconstructor()\n\t{\n\t\tthis.width = 1;\n\t\tthis.height = 1;\n\t\tthis.width_height = new THREE.Vector2(this.width, this.height);\n\n\t\tthis.screen_materials = [];\n\n\t\tthis.native_width = this.width;\n\t\tthis.native_height = this.height;\n\n\t\tthis.pixel_size = new THREE.Vector2(1/this.width, 1/this.height);\n\t}\n\n\tupdate_size(width, height)\n\t{\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.pixel_size = new THREE.Vector2(1/this.width, 1/this.height) ;\n\n\t\tthis.width_height.x = width  ;\n\t\tthis.width_height.y = height ;\n\n\t\tlet i = this.screen_materials.length;\n\t\twhile(i--)\n\t\t{\n\t\t\tthis.screen_materials[i].uniforms._ScreenSize.value = this.width_height;\n\t\t}\n\t}\n\n\tapply_pixel_density_v2(vector2)\n\t{\n\t\tvector2.multiplyScalar(1/window.devicePixelRatio);\n\n\t\treturn vector2;\n\t}\n\tapply_pixel_density(value)\n\t{\n\t\treturn value * (1/window.devicePixelRatio);\n\t}\n\tupdate_native_size()\n\t{\n\t\tthis.native_width = window.innerWidth;\n\t\tthis.native_height = window.innerHeight;\n\t}\n\n\tadd_screen_material(mat)\n\t{\n\t\tthis.screen_materials.push(mat);\n\t\tmat.uniforms._ScreenSize.value = this.width_height;\n\t}\n\tremove_screen_material(mat)\n\t{\n    let index = this.screen_materials.indexOf(mat);\n    if (index > -1) {\n      this.screen_materials.splice(index, 1);\n    }\n\t}\n\n\tget_pixel_size()\n\t{\n\t\treturn this.pixel_size;\n\t}\n\n\tget aspect_ratio()\n\t{\n\t\treturn this.width/this.height;\n\t}\n\n\n}\n\nexport default new Screen();\n"," \nexport default class RenderLayers {\n  constructor() {\n\n  }\n\n  static get opaque()            { return 0; }\n  static get transparent()       { return 1; }\n  static get outline()       \t\t { return 2; }\n  static get selectable()\t\t\t\t { return 3; }\n\n\n}\n\n\n\n","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform sampler2D _Blur;\\nuniform vec2 _Screen;\\nvarying vec2 vUv;\\n\\nfloat aastep(float threshold, float value) {\\n  #ifdef GL_OES_standard_derivatives\\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\\n  #else\\n    return step(threshold, value);\\n  #endif  \\n}\\n\\nvoid main()\\n{\\n\\tvec2 pixel_size = 1.0/_Screen;\\n\\n\\tvec4 color = texture2D( _MainTex, vUv);\\n\\tfloat mask = 1.0 - color.a;\\n\\n\\tfloat blur = texture2D( _Blur, vUv).a;\\n\\n  // gl_FragColor = vec4(mask,mask,mask,0.0);\\n  // gl_FragColor = color;\\n\\n\\tgl_FragColor = vec4(mix(color.rgb, mix(color.rgb, vec3(1.,0.,0.),aastep(0.076, blur)), mask), 1.0);\\n}\\n\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform vec2 _Resolution;\\nuniform vec2 _SampleDir;\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n\\n\\tvec3 sum = vec3(0.,0.,0.);\\n\\tvec2 dir = (0.5/_Resolution) * _SampleDir;\\n\\tfloat _Distance = 2.0;\\n\\tsum += texture2D( _MainTex, vUv + dir * -4. * _Distance ).rgb * 0.0525;\\n\\tsum += texture2D( _MainTex, vUv + dir * -3. * _Distance ).rgb * 0.075;\\n\\tsum += texture2D( _MainTex, vUv + dir * -2. * _Distance ).rgb * 0.110;\\n\\tsum += texture2D( _MainTex, vUv + dir * -1. * _Distance ).rgb * 0.150;\\n\\tsum += texture2D( _MainTex, vUv + dir *  0. * _Distance ).rgb * 0.225;\\n\\tsum += texture2D( _MainTex, vUv + dir *  1. * _Distance ).rgb * 0.150;\\n\\tsum += texture2D( _MainTex, vUv + dir *  2. * _Distance ).rgb * 0.110;\\n\\tsum += texture2D( _MainTex, vUv + dir *  3. * _Distance ).rgb * 0.075;\\n\\tsum += texture2D( _MainTex, vUv + dir *  4. * _Distance ).rgb * 0.0525;\\n\\tgl_FragColor = vec4(sum, 1.0);\\n\\n}\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\n\\nvarying vec2 vUv;\\nvoid main()\\n{\\n\\tgl_FragColor = texture2D(_MainTex, vUv);\\n}\";","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\nvoid main()\\n{\\n\\tgl_Position = vec4(uv * 2.0 - 1.0, 1.0, 1.0);\\n\\tvUv = uv;\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(_Color, 1.0);\\n}\";","import Screen from '/Screen';\nimport RenderLayers from '/RenderLayers';\n\nimport compose_frag from '/shaders/box_blur/compose_frag';\nimport box_blur_frag from '/shaders/box_blur/box_blur_frag';\nimport copy_frag from '/shaders/copy/copy_frag';\nimport copy_vert from '/shaders/copy/copy_vert';\nimport background_frag from '/shaders/basic_color/basic_color_frag';\n\nexport default class OutlineRender\n{\n\n\tconstructor(webgl)\n\t{\n\t\tthis.main_rt \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\n\t\tthis.rt1\t\t \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\n\t\tthis.rt2\t\t \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\n\n\n    this.compose_material \t\t= this.__get_compose_material();\n    this.copy_material \t\t\t\t= this.__get_copy_material();\n    this.box_blur_material \t\t= this.__get_box_blur_material();\n    this.background_material \t= this.__get_background_material();\n\n\t\tthis.copy_plane = new THREE.Mesh( new THREE.PlaneGeometry(1,1), this.copy_material );\n\t\tthis.copy_plane.frustumCulled = false;\n\t\tthis.copy_scene = new THREE.Scene();\n\t\tthis.copy_scene.add(this.copy_plane);\n\n\t}\n\n\tresize(w,h)\n\t{\n\t\tthis.main_rt.setSize(w,h);\n\t\tthis.rt1.setSize(w,h);\n\t\tthis.rt2.setSize(w,h);\n\t\tthis.box_blur_material.uniforms._Screen.value.set(w,h);\n\t\tthis.compose_material.uniforms._Screen.value.set(w,h);\n\t}\n\n\n\trender(webgl)\n\t{\n\t\twebgl.camera.updateMatrix();\n\t\twebgl.camera.updateMatrixWorld();\n\n\t\twebgl.camera.layers.enable(RenderLayers.opaque);\n\t\twebgl.camera.layers.enable(RenderLayers.transparent);\n\t\twebgl.camera.layers.disable(RenderLayers.outline);\n\n\t\t//render scene\n\t\twebgl._renderer.setClearColor(webgl.clear_color, 0);\n\t\twebgl._renderer.clearTarget(this.main_rt,true,true,true);\n\n\t\tthis.copy_scene.overrideMaterial = this.background_material;\n\t\tthis.background_material.uniforms._Color.value.set(webgl.clear_color.r, webgl.clear_color.g, webgl.clear_color.b, 0);\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.main_rt, false);\n\n\n\t\twebgl._renderer.render(webgl.scene, webgl.camera, this.main_rt, false);\n\n\n\n\n\t\t//horizontal blur\n\t\tthis.box_blur_material.uniforms._MainTex.value = this.main_rt.texture;\n\t\tthis.box_blur_material.uniforms._SampleDir.value.set(1,0);\n\n\t\tthis.copy_scene.overrideMaterial = this.box_blur_material;\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.rt1, false);\n\n\t\t//vertical blur\n\t\tthis.box_blur_material.uniforms._SampleDir.value.set(0,1);\n\t\tthis.box_blur_material.uniforms._MainTex.value = this.rt1.texture;\n\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.rt2, false);\n\n\n\t\t//compose\n\t\tthis.copy_scene.overrideMaterial = this.compose_material;\n\t\tthis.compose_material.uniforms._MainTex.value = this.main_rt.texture;\n\t\tthis.compose_material.uniforms._Blur.value = this.rt2.texture;\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, undefined, false);\n\t\tthis.copy_scene.overrideMaterial = undefined;\n\t}\n\n\t__get_copy_material()\n\t{\n\t\treturn new THREE.ShaderMaterial({\n      uniforms: {\n        _MainTex: \t\t\t{value : undefined}\n      },\n      vertexShader: copy_vert,\n      fragmentShader: copy_frag,\n      depthTest: false,\n      depthWrite: false\n    });\n\t}\n\n\t__get_box_blur_material()\n\t{\n \t\treturn new THREE.ShaderMaterial({\n      uniforms: {\n        _MainTex: \t\t\t{value : undefined},\n        _SampleDir: \t\t{value : new THREE.Vector2()},\n        _Screen: \t\t\t\t{value : new THREE.Vector2(Screen.width, Screen.height)}\n      },\n      vertexShader: copy_vert,\n      fragmentShader: box_blur_frag,\n      depthTest: false,\n      depthWrite: false\n    });\n\t}\n\n\t__get_compose_material()\n\t{\n\t\treturn new THREE.ShaderMaterial({\n      uniforms: {\n        _MainTex: \t\t\t{value : undefined},\n        _Blur: \t\t\t\t\t{value : undefined},\n        _Screen: \t\t\t\t{value : new THREE.Vector2(Screen.width, Screen.height)}\n      },\n      vertexShader: copy_vert,\n      fragmentShader: compose_frag,\n      depthTest: false,\n      depthWrite: false,\n      extensions: {\n      \tderivatives: true\n      }\n    });\n\t}\n\n\t__get_background_material()\n\t{\n\t\treturn new THREE.ShaderMaterial({\n      uniforms: {\n        _Color: \t\t\t\t{value : new THREE.Vector4(0,0,0,0)}\n      },\n      vertexShader: copy_vert,\n      fragmentShader: background_frag,\n      depthTest: true,\n      depthWrite: false\n\n    });\n\t}\n\n\ton_enter(webgl)\n\t{\n\t\twebgl._renderer.autoClear = false;\n\t}\n\n\ton_exit(webgl)\n\t{\n\t\twebgl._renderer.autoClear = true;\n\t}\n}\n","class CameraManager {\n\tconstructor()\n\t{\n\t\tthis._current = undefined;\n\t}\n\n\tset current(camera)\n\t{\n\t\tthis._current = camera;\n\t}\n\n\tget current()\n\t{\n\t\treturn this._current;\n\t}\n}\n\nconst camera_manager = new CameraManager();\nmodule.exports = camera_manager;\n","class SceneManager\n{\n\tconstructor()\n\t{\n\t\tthis._current = new THREE.Scene();\n\t\tthis._current.name = \"default_scene\";\n\n\t}\n\n\tadd_scene(name)\n\t{\n\n\t}\n\n\tget current()\n\t{\n\t\treturn this._current;\n\t}\n\n\tset current(scene)\n\t{\n\t\tthis._current = scene;\n\t}\n}\n\nconst scene_manager = new SceneManager();\nmodule.exports = scene_manager;","class Time\n{\n\tconstructor()\n\t{\n\t\tthis.___time = new THREE.Clock();\n\t\tthis.__delta_time = 0;\n\t\tthis.__elapsed_time = 0;\n\t\tthis.__allocated_time = new THREE.Vector2(0,0);\n\t}\n\n\n\tget delta_time()\n\t{\n\t\treturn this.__delta_time < 0.4? this.__delta_time : 0.016;\n\t}\n\tget elapsed_time()\n\t{\n\t\treturn this.__elapsed_time;\n\t}\n\tget shader_time()\n\t{\n\t\tthis.__allocated_time.x = this.delta_time;\n\t\tthis.__allocated_time.y = this.elapsed_time;\n\t\treturn  this.__allocated_time;\n\t}\n\n\t__update()\n\t{\n\t\tthis.__delta_time = this.___time.getDelta();\n\t\tthis.__elapsed_time = this.___time.getElapsedTime();\n\t}\n}\n\nconst time = new Time();\nmodule.exports = time;\n\n","export class KeyboardInput\n{\n\tconstructor()\n\t{\n\t\tthis.ctrlz_pressed = false;\n\t\tthis.ctrlz_fired = false;\n\n\t\tthis.keys = [];\n\t}\n\n\tinit()\n\t{\n\t\tdocument.onkeydown \t= this.on_key_down.bind(this);\n\t\tdocument.onkeyup \t\t= this.on_key_up.bind(this);\n\t\tdocument.onkeypress = this.on_key_press.bind(this);\n\t}\n\n\ton_key_down(e)\n\t{\n\t\tif(e.keyCode == 90 && e.ctrlKey && !this.ctrlz_fired)\n    {\n    \tthis.ctrlz_pressed = true;\n    \tthis.ctrlz_fired = true;\n    } \n    if(e.key)\n    {\n    \tthis.press_key(e.key);\n    }\n\t}\n\ton_key_press(e)\n\t{\n\t\t\n\t}\n\ton_key_up(e)\n\t{\n\t\tthis.release_keys();\n\t}\n\n\tclear()\n\t{\n\t\tthis.ctrlz_pressed = false;\n\t\tfor(let i=0; i< this.keys.length; i++)\n\t\t{\n\t\t\tthis.keys[i].pressed = false;\n\t\t}\n\t}\n\n\trelease_keys()\n\t{\n\t\tthis.ctrlz_fired = false;\n\t\t\n\t\tfor(let i=0; i< this.keys.length; i++)\n\t\t{\n\t\t\tthis.keys[i].fired = false;\n\t\t\tthis.keys[i].down = false;\n\t\t}\n\t}\n\n\tpress_key(key)\n\t{\n\t\tfor(let i=0; i< this.keys.length; i++)\n\t\t{\n\t\t\tif(this.keys[i].key_name === key && !this.keys[i].fired)\n\t\t\t{\n\t\t\t\tthis.keys[i].pressed = true;\n\t\t\t\tthis.keys[i].down = true;\n\t\t\t\tthis.keys[i].fired = true;\n\t\t\t}\n\t\t}\n\t}\n\tkey_is_pressed(key)\n\t{\n\t\tfor(let i=0; i< this.keys.length; i++)\n\t\t{\n\t\t\tif(this.keys[i].key_name === key)\n\t\t\t{\n\t\t\t\treturn this.keys[i].pressed;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tkey_is_down(key)\n\t{\n\t\tfor(let i=0; i< this.keys.length; i++)\n\t\t{\n\t\t\tif(this.keys[i].key_name === key)\n\t\t\t{\n\t\t\t\treturn this.keys[i].down;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tregister_key(key)\n\t{\n\t\tthis.keys.push(\n\t\t{\n\t\t\tkey_name: key,\n\t\t\tpressed: false,\n\t\t\tdown: false,\n\t\t\tup: false,\n\t\t\tfired: false\n\n\t\t});\n\t}\n\tunregister_key(key_name)\n\t{\n\t\tlet key = undefined;\n\t\tfor(let i=0; i< this.keys.length; i++)\n\t\t{\n\t\t\tif(this.keys[i].key_name === key_name)\n\t\t\t\tkey = this.keys[i];\n\t\t}\n\n\t\tlet index = this.keys.indexOf(key);\n    if (index > -1) {\n      this.keys.splice(index, 1);\n    }\n\t}\n\n}\n\nconst keyboard_input = new KeyboardInput();\nmodule.exports = keyboard_input;","import Screen from '/Screen';\nimport Configuration from '/Configuration';\nimport Time from '/Time';\nimport KeyboardInput from '/KeyboardInput';\n\nclass Input {\n\tconstructor() {\n\t\tthis.mouse_pos = new THREE.Vector2();\n\t\tthis.last_mouse_pos = new THREE.Vector2();\n\t\tthis.mouse_dir = new THREE.Vector2();\n\n\n\t\tthis.__clicked_time = 0;\n\t\tthis.__elapsed_time = 0;\n\t\tthis.__delta_time = 0;\n\n\t\tthis.is_mouse_down = false;\n\t\tthis.is_mouse_up = false;\n\n\t\tthis.rotation_angle = 0;\n\n\t\tthis._normalized_mouse_pos = new THREE.Vector2(0, 0);\n\n\t\tthis.left_mouse_button_down = false;\n\t\tthis.left_mouse_button_pressed = false;\n\t\tthis.left_mouse_button_released = false;\n\t\tthis.middle_mouse_button_down = false;\n\t\tthis.right_mouse_button_down = false;\n\t\tthis.right_mouse_button_pressed = false;\n\t\tthis.right_mouse_button_released = false;\n\n\t\tthis.mousewheel = 0;\n\n\t\tthis.previous_scale = 0;\n\t\tthis.previous_rotation = 0;\n\t\tthis.previous_rotation_dirty = true;\n\n\t\tthis.mouse_str = \"mouse\";\n\n\t\tthis.tmp_mouse_velocity = new THREE.Vector2();\n\t\tthis.bounding_client = new THREE.Vector2();\n\n\t\tthis.multitouch_active = false;\n\n\t\tthis.tapped = false;\n\t\tthis.initial_zoom_distance = 100;\n\t\tthis.zoom_center = new THREE.Vector2();\n\t\tthis.zoom_started = false;\n\t\tthis.touch_zoom = 1;\n\n\t\tthis.multi_touch_dir = new THREE.Vector2();\n\t\tthis.wheel_delta = 0;\n\n\t\tthis.mac = 'mac';\n\t\tthis.pinching_with_trackpad = false;\n\t\tthis.scrolling_with_trackpad = false;\n\t\tthis.scrolling_with_mouse = false;\n\n\t\tthis.double_click = false;\n\n\t\tthis.canvas = undefined;\n\t}\n\n\tmouse_is_within_bounds() {\n\t\tlet rect = this.canvas.getBoundingClientRect();\n\n\t\treturn this.mouse_pos.x > rect.left &&\n\t\t\tthis.mouse_pos.x < rect.left + rect.width &&\n\t\t\tthis.mouse_pos.y > rect.top &&\n\t\t\tthis.mouse_pos.y < rect.top + rect.height;\n\t}\n\n\tinit(container, canvas) {\n\t\tthis.canvas = canvas;\n\n\t\tlet region = new ZingTouch.Region(container, false, false);\n\t\tKeyboardInput.init();\n\n\t\tlet scope = this;\n\n\t\tregion.bind(container, 'tap', function (e) {\n\t\t\tscope.tapped = true;\n\t\t\tscope.set_mouse_pos(e);\n\n\t\t});\n\n\t\twindow.addEventListener('dblclick', this.on_double_click.bind(this));\n\n\t\tcontainer.addEventListener('mouseleave', this.on_focus_lost.bind(this));\n\n\t\t// region.bind(container, 'pan', function(e){\n\t\t// \tscope.on_mouse_move(e);\n\t\t// \tconsole.log(\"PAN\");\n\t\t// });\n\t\tlet one_finger_pan = new ZingTouch.Pan({ numInputs: 1 });\n\t\tregion.register(\"one_finger_pan\", one_finger_pan);\n\t\tregion.bind(container, \"one_finger_pan\", (event) => {\n\t\t\tif (event.detail.data.length > 0) {\n\t\t\t\t// scope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\n\t\t\t\t// scope.multi_touch_dir.multiplyScalar(scope.__delta_time);\n\t\t\t\tscope.on_mouse_move(event);\n\t\t\t}\n\n\t\t})\n\t\tlet two_fingers_pan = new ZingTouch.Pan({ numInputs: 2 });\n\t\tregion.register(\"two_fingers_pan\", two_fingers_pan);\n\t\tregion.bind(container, \"two_fingers_pan\", (event) => {\n\t\t\tif (event.detail.data.length > 0) {\n\n\t\t\t\t// scope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\n\t\t\t\t// scope.multi_touch_dir.multiplyScalar(scope.__delta_time);\n\t\t\t\tscope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\n\t\t\t\tscope.multi_touch_dir.multiplyScalar(scope.__delta_time);\n\t\t\t}\n\t\t})\n\n\t\tlet three_fingers_pan = new ZingTouch.Pan({ numInputs: 3 });\n\t\tregion.register(\"three_fingers_pan\", three_fingers_pan);\n\t\tregion.bind(container, \"three_fingers_pan\", (event) => {\n\t\t\tif (event.detail.data.length > 0) {\n\t\t\t\tscope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\n\t\t\t\tscope.multi_touch_dir.multiplyScalar(scope.__delta_time);\n\t\t\t}\n\n\t\t})\n\n\t\tregion.bind(container, 'distance', function (e) {\n\n\t\t\tif (!scope.zoom_started) {\n\t\t\t\tscope.zoom_started = true;\n\t\t\t\tscope.touch_zoom_delta = 0;\n\t\t\t\tscope.initial_zoom_distance = e.detail.distance;\n\t\t\t\tscope.last_zoom_distance = e.detail.distance;\n\n\t\t\t\tscope.zoom_center.set(e.detail.center.x, e.detail.center.y);\n\t\t\t\tscope.mouse_pos.set(e.detail.center.x, e.detail.center.y);\n\t\t\t}\n\t\t\tscope.touch_zoom_delta = e.detail.distance - scope.last_zoom_distance;\n\t\t\tscope.last_zoom_distance = e.detail.distance;\n\t\t\tscope.touch_zoom = 1;\n\t\t}, false);\n\n\t\tlet gesture = new ZingTouch.Gesture();\n\t\tgesture.end = (inputs, state, element) => { scope.on_mouse_up(inputs) }\n\t\tgesture.start = (inputs, state, element) => { scope.on_mouse_down(inputs) }\n\t\tregion.register('shortTap', gesture);\n\n\t\tregion.bind(container, 'shortTap', function (e) {\n\t\t});\n\n\t\t// $(container).mousewheel(this.on_mouse_wheel.bind(this));\n\t\twindow.addEventListener('wheel', this.on_mouse_wheel.bind(this))\n\n\t\tcontainer.addEventListener(\"mousemove\", (event) => {\n\t\t\tthis.mouse_pos.x = event.clientX;\n\t\t\tthis.mouse_pos.y = event.clientY;\n\t\t\tthis.scrolling_with_mouse = false;\n\t\t\tthis.scrolling_with_trackpad = false;\n\t\t\tthis.pinching_with_trackpad = false;\n\t\t});\n\t}\n\n\tset_mouse_pos(ev) {\n\t\tthis.mouse_pos.x = ev.detail.events[0].clientX;\n\t\tthis.mouse_pos.y = ev.detail.events[0].clientY;\n\t}\n\n\tget normalized_mouse_pos() {\n\t\tthis._normalized_mouse_pos.x = (this.mouse_pos.x / Screen.width) * 2.0 - 1;\n\t\tthis._normalized_mouse_pos.y = -1 * ((this.mouse_pos.y / Screen.height) * 2.0 - 1);\n\t\treturn this._normalized_mouse_pos;\n\t}\n\n\tget NDC() {\n\t\treturn this.normalized_mouse_pos;\n\t}\n\n\tis_mac() {\n\t\treturn this.get_os() === this.mac;\n\t}\n\n\ton_double_click(event) {\n\t\tthis.double_click = true;\n\t}\n\n\ton_mouse_wheel(event) {\n\n\n\t\tthis.mouse_pos.x = event.clientX;\n\t\tthis.mouse_pos.y = event.clientY;\n\n\t\t// User is using a mac\n\t\tif (this.is_mac()) {\n\t\t\t// User is pinching\n\t\t\tif (event.ctrlKey) {\n\t\t\t\t// Negative values means pinch in.\n\t\t\t\t// Positive values means pinch out.\n\t\t\t\tconsole.log(\"Pinching with a touchpad\", event.deltaY)\n\t\t\t\tthis.pinching_with_trackpad = true;\n\t\t\t\tthis.scrolling_with_trackpad = false;\n\t\t\t\tthis.scrolling_with_mouse = false;\n\t\t\t\t// User is scrolling\n\t\t\t} else {\n\t\t\t\t// User is using the touchpad\n\t\t\t\tif (this.is_int(event.deltaY)) {\n\t\t\t\t\t// Negative values means scroll up\n\t\t\t\t\t// Positive values means scroll down\n\t\t\t\t\t// console.log(\"Scrolling with a touchpad\", (event.deltaY))\n\t\t\t\t\t// 350 is aprox the maximum value of deltaY on touchpad scroll\n\t\t\t\t\tthis.pinching_with_trackpad = false;\n\t\t\t\t\tthis.scrolling_with_trackpad = true;\n\t\t\t\t\tthis.scrolling_with_mouse = false;\n\n\t\t\t\t\tthis.wheel_delta = 1 - (event.deltaY / 350) * 2.0 - 1;\n\t\t\t\t} else {\n\t\t\t\t\t// Negative values means scroll up\n\t\t\t\t\t// Positive values means scroll down\n\t\t\t\t\t// console.log(\"Scrolling with a mouse\", event.deltaY)\n\t\t\t\t\tthis.pinching_with_trackpad = false;\n\t\t\t\t\tthis.scrolling_with_trackpad = false;\n\t\t\t\t\tthis.scrolling_with_mouse = true;\n\n\t\t\t\t\tthis.wheel_delta = event.deltaY / Math.abs(event.deltaY);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t//probably windows\n\t\t\tthis.pinching_with_trackpad = false;\n\t\t\tthis.scrolling_with_trackpad = false;\n\t\t\tthis.scrolling_with_mouse = true;\n\n\t\t\tthis.wheel_delta = event.deltaY / Math.abs(event.deltaY);\n\t\t}\n\t}\n\n\ton_mouse_down(inputs) {\n\t\tthis.mouse_pos.x = inputs[0].current.clientX;\n\t\tthis.mouse_pos.y = inputs[0].current.clientY;\n\n\t\tthis.multitouch_active = inputs.length > 1;\n\n\t\tthis.mouse_dir.x = 0;\n\t\tthis.mouse_dir.y = 0;\n\n\n\t\tthis.__clicked_time = this.__elapsed_time;\n\t\tthis.is_mouse_down = true;\n\t\tthis.is_mouse_up = false;\n\n\t\tswitch (inputs[0].current.originalEvent.which) {\n\t\t\tcase 1:\n\t\t\t\tthis.left_mouse_button_down = true;\n\t\t\t\tthis.left_mouse_button_pressed = true;\n\t\t\t\tbreak;\n\t\t\tcase 2: this.middle_mouse_button_down = true; break;\n\t\t\tcase 3:\n\t\t\t\tthis.right_mouse_button_down = true;\n\t\t\t\tthis.right_mouse_button_pressed = true;\n\t\t\t\tbreak;\n\t\t\tdefault: this.left_mouse_button_down = true; this.left_mouse_button_pressed = true; break;\n\t\t}\n\n\n\t\tthis.wheel_delta = 0;\n\t\tthis.previous_scale = 0;\n\t\tthis.previous_rotation = 0;\n\n\n\t}\n\n\tmouse_clicked() {\n\t\treturn this.tapped;\n\t}\n\n\ton_mouse_up(inputs) {\n\t\t// this.left_mouse_button_released = true;\n\t\tthis.multitouch_active = inputs ? (inputs.length > 1) : false;\n\t\tthis.is_mouse_up = true;\n\t\tthis.zoom_started = false;\n\t\tthis.touch_zoom = 1;\n\t\tthis.mouse_dir.x = 0;\n\t\tthis.mouse_dir.y = 0;\n\t\tthis.previous_scale = 0;\n\t\tthis.previous_rotation = 0;\n\t\tthis.wheel_delta = 0;\n\n\t\tthis.left_mouse_button_down = false;\n\t\tthis.middle_mouse_button_down = false;\n\t\tthis.right_mouse_button_down = false;\n\t\tif (inputs) {\n\t\t\tswitch (inputs[0].current.originalEvent.which) {\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.left_mouse_button_released = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.middle_mouse_button_released = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.right_mouse_button_released = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.left_mouse_button_released = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.is_mouse_down = false;\n\t\tthis.previous_rotation_dirty = true;\n\t\tthis.rotation_delta = 0;\n\t}\n\n\n\ton_focus_lost() {\n\t\tthis.on_mouse_up();\n\t\tthis.left_mouse_button_released = true;\n\t\tthis.middle_mouse_button_released = true;\n\t\tthis.right_mouse_button_released = true;\n\t\tthis.left_mouse_button_released = true;\n\n\t}\n\n\ttime_since_last_mouse_down() {\n\t\treturn this.__elapsed_time - this.__clicked_time;\n\t}\n\n\ton_mouse_move(event) {\n\t\tif (event.detail.data.length > 0) {\n\t\t\tthis.set_mouse_pos(event);\n\t\t\tthis.mouse_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\n\t\t\t// this.mouse_dir.x *=  Screen.height / Screen.width;\n\n\t\t\t// this.mouse_dir.multiplyScalar(this.__delta_time/window.devicePixelRatio);\n\t\t}\n\t}\n\n\tget_os() {\n\t\tvar userAgent = window.navigator.userAgent,\n\t\t\tplatform = window.navigator.platform,\n\t\t\tmacosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n\t\t\twindowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\n\t\t\tiosPlatforms = ['iPhone', 'iPad', 'iPod'],\n\t\t\tos = null;\n\n\t\tif (macosPlatforms.indexOf(platform) !== -1) {\n\t\t\tos = 'mac';\n\t\t} else if (iosPlatforms.indexOf(platform) !== -1) {\n\t\t\tos = 'ios';\n\t\t} else if (windowsPlatforms.indexOf(platform) !== -1) {\n\t\t\tos = 'windows';\n\t\t} else if (/Android/.test(userAgent)) {\n\t\t\tos = 'android';\n\t\t} else if (!os && /Linux/.test(platform)) {\n\t\t\tos = 'linux';\n\t\t}\n\n\t\treturn os;\n\t}\n\n\tis_int(n) {\n\t\treturn n % 1 === 0;\n\t}\n\n\tclear() {\n\n\t\tthis.__elapsed_time = Time.elapsed_time;\n\t\tthis.__delta_time = Time.delta_time;\n\t\tthis.is_mouse_up = false;\n\t\tthis.wheel_delta = 0;\n\t\tthis.rotation_delta = 0;\n\n\t\tthis.double_click = false;\n\n\n\t\tthis.tapped = false;\n\t\tthis.mouse_dir.multiplyScalar(0);\n\t\tthis.multi_touch_dir.multiplyScalar(0);\n\t\tthis.left_mouse_button_pressed = false;\n\t\tthis.left_mouse_button_released = false;\n\n\t\tthis.right_mouse_button_pressed = false;\n\t\tthis.right_mouse_button_released = false;\n\t\tKeyboardInput.clear();\n\n\t}\n\n}\n\nconst INPUT = new Input();\nmodule.exports = INPUT;\n","import Input from '/Input';\n\nclass UI\n{\n\n    constructor()\n    {\n        this.ui_elements = [];\n        this._tmp_normalized_pos = new THREE.Vector2();\n        this.scene = new THREE.Scene();\n        this.scene.autoUpdate = false;\n        this.scene.frustumCulled = false;\n    }\n\n    add_clickable_element(elem)\n    {\n        this.ui_elements.push(elem);\n        this.scene.add(elem.mesh);\n    }\n    remove_clickable_element(elem)\n    {\n        let index = this.ui_elements.indexOf(elem);\n        if (index > -1) {\n          this.ui_elements.splice(index, 1);\n        }\n\n        this.scene.remove(elem.mesh);\n    }\n\n    update()\n    {\n        this._tmp_normalized_pos.copy(Input.normalized_mouse_pos);\n        for(let i=0; i< this.ui_elements.length; i++)\n        {\n            this.ui_elements[i].update(this._tmp_normalized_pos)\n        }\n    }\n\n    render(renderer)\n    {\n        renderer.render_ui(this.scene);\n    }\n\n    clear()\n    {\n        this.current_clicked_element = undefined\n    }\n\n    resize()\n    {\n        for(let i=0; i< this.ui_elements.length; i++)\n        {\n            this.ui_elements[i].resize()\n        }\n    }\n\n\n\n}\n\nconst ui = new UI();\nmodule.exports = ui;\n","class Capabilities\n{\n\tconstructor()\n\t{\n\t\tthis.max_anisotropy = 0;\n\t\tthis.vertex_texture_sampler_available = false;\n\t\tthis.fp_textures_available = false;\n\t}\n}\n\nconst capabilities = new Capabilities();\nmodule.exports = capabilities;\n","import vert from '/shaders/copy/copy_vert';\nimport frag from '/shaders/copy/copy_frag';\n\nexport default class BlitMaterial extends THREE.ShaderMaterial\n{\n\tconstructor(frag_shader, vert_shader, defines)\n\t{\n\t\tsuper({\n\t\t\tuniforms: {\n\t\t\t\t_MainTex: {value: null},\n        _Resolution:{value: new THREE.Vector2(0,0)}\n\t\t\t},\n\t\t\tdefines: defines || {},\n\t\t\tvertexShader: vert_shader || vert,\n\t\t\tfragmentShader: frag_shader || frag,\n\t\t\tdepthWrite: false,\n      blending: THREE.NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      depthFunc: THREE.AlwaysDepth\n\t\t});\n\t}\n\n}\n","module.exports=\"#define GLSLIFY 1\\nuniform vec4 _DepthNormal;\\nvec2 EncodeFloatRG( float v )\\n{\\n    vec2 kEncodeMul = vec2(1.0, 255.0);\\n    float kEncodeBit = 1.0/255.0;\\n    vec2 enc = kEncodeMul * v;\\n    enc = fract (enc);\\n    enc.x -= enc.y * kEncodeBit;\\n    return enc;\\n}\\n\\nvec2 EncodeNormal (vec3 n)\\n{\\n    float scale = 1.7777;\\n    vec2 enc = n.xy / (n.z+1.0);\\n    enc /= scale;\\n    enc = enc*0.5+0.5;\\n    return enc;\\n}\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(EncodeFloatRG(_DepthNormal.x), EncodeNormal(normalize(_DepthNormal.yzw)));  \\n}\";","import BlitMaterial from '/materials/BlitMaterial';\nimport frag from '/shaders/clear/clear_depth_normal_frag';\n\nexport default class ClearDepthNormalMaterial extends BlitMaterial\n{\n\tconstructor(clear_depth, clear_normal)\n\t{\n\t\tsuper(frag);\n\t\tthis.uniforms._DepthNormal = {value: new THREE.Vector4(clear_depth, clear_normal.x, clear_normal.y, clear_normal.z)};\n\t}\n\n}\n","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\nvarying vec3 v_pos;\\n\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  v_normal \\t= (modelViewMatrix * vec4(normal, 0.0)).xyz;\\n  v_pos \\t\\t= (modelViewMatrix * vec4( pos, 1.0 )).xyz;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n}\";","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\nvarying vec3 v_pos;\\n\\nuniform float _FarPlane;\\n\\nvec2 EncodeFloatRG( float v )\\n{\\n    vec2 kEncodeMul = vec2(1.0, 255.0);\\n    float kEncodeBit = 1.0/255.0;\\n    vec2 enc = kEncodeMul * v;\\n    enc = fract (enc);\\n    enc.x -= enc.y * kEncodeBit;\\n    return enc;\\n}\\n\\nvec2 EncodeNormal (vec3 n)\\n{\\n    float scale = 1.7777;\\n    vec2 enc = n.xy / (n.z+1.0);\\n    enc /= scale;\\n    enc = enc*0.5+0.5;\\n    return enc;\\n}\\n\\nvoid main()\\n{\\n\\tgl_FragColor = vec4(EncodeFloatRG(length(v_pos.z)/_FarPlane), EncodeNormal(normalize(v_normal)));\\t\\n}\\n\\n\";","import vert from '/shaders/depth_normals/depth_normals_vert';\nimport frag from '/shaders/depth_normals/depth_normals_frag';\n\nexport default class DepthNormalMaterial extends THREE.ShaderMaterial\n{\n\tconstructor()\n\t{\n\t\tsuper({\n      uniforms: {\n      \t_FarPlane: {value: 1}\n      },\n      vertexShader: vert,\n      fragmentShader: frag\n    });\n\t}\n\n\tset far_plane(value)\n\t{\n\t\tthis.uniforms._FarPlane.value = value;\n\t}\n\n}\n","import CameraManager from '/CameraManager';\nimport SceneManager from '/SceneManager';\nimport Screen from '/Screen';\n\nimport ClearDepthNormalMaterial from '/materials/ClearDepthNormalMaterial';\nimport DepthNormalMaterial from '/materials/DepthNormalMaterial';\n\nexport default class DepthAndNormalsRenderer\n{\n\tconstructor()\n\t{\n    this.RT = new THREE.WebGLRenderTarget(Screen.width, Screen.height);\n\n    this.clear_depth_normal_mat = new ClearDepthNormalMaterial(1, new THREE.Vector3(0,0,1));\n    this.depth_normal_material = new DepthNormalMaterial();\n\t}\n\n\n\trender(graphics)\n\t{\n\t\tthis.__resize_RT_if_necessary();\n\n\n    graphics.clear(this.RT, undefined, true,true)\n\n    graphics.blit_clear_with_material(this.RT, this.clear_depth_normal_mat);\n\n    this.depth_normal_material.far_plane = CameraManager.current.far;\n\n    graphics.render(undefined, undefined, this.RT, this.depth_normal_material);\n\n\t}\n\n  __resize_RT_if_necessary()\n  {\n    if(this.RT.width !== Screen.width || this.RT.height !== Screen.height)\n    {\n      this.RT.setSize(Screen.width, Screen.height);\n    }\n  }\n\n\tget render_target()\n\t{\n\t\treturn this.RT;\n\t}\n\n}\n","import BlitMaterial from '/materials/BlitMaterial';\n\nexport default class Blitter\n{\n\n  constructor(renderer)\n  {\n      this.renderer = renderer;\n      this._blit_scene = new THREE.Scene();\n      this._blit_material = new BlitMaterial();\n      this._blit_quad = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry( 1, 1 ),this._blit_material );\n      this._blit_scene.add( this._blit_quad );\n      this._blit_camera = new THREE.OrthographicCamera( -1, 1, 1, -1, -10000, 10000 );\n\n  }\n\n\n  blit(src, dst)\n  {\n    this._blit_quad.material = this._blit_material;\n    this._blit_quad.material.uniforms._MainTex.value = src.texture;\n    this._blit_quad.material.uniforms._Resolution.value.set(src.width, src.height);\n\n    this.renderer.setRenderTarget(dst === undefined? null : dst);\n\n    this.renderer.render( this._blit_scene,\n                          this._blit_camera);\n  }\n\n  blit_with_material(src, dst, mat)\n  {\n    this._blit_quad.material = mat;\n    this._blit_quad.material.uniforms._MainTex.value = src.texture;\n    this._blit_quad.material.uniforms._Resolution.value.set(src.width, src.height);\n\n    this.renderer.setRenderTarget(dst === undefined? null : dst);\n\n    this.renderer.render( this._blit_scene,\n                          this._blit_camera );\n  }\n\n  blit_clear_with_material(dst_RT, mat)\n  {\n    this._blit_quad.material = mat;\n\n    this.renderer.setRenderTarget(dst_RT === undefined? null : dst_RT);\n\n    this.renderer.render( this._blit_scene, this._blit_camera);\n  }\n\n}\n","import Configuration from           '/Configuration';\nimport BaseRender from   '/render_mode/BaseRender';\nimport OutlineRender from           '/render_mode/OutlineRender';\nimport Screen from '/Screen';\nimport CameraManager from '/CameraManager';\nimport SceneManager from '/SceneManager';\nimport UI from '/UI';\nimport Capabilities from '/Capabilities';\nimport DepthAndNormalsRenderer from '/render_utilities/DepthAndNormalsRenderer';\nimport Blitter from '/render_utilities/Blitter';\n\nclass Graphics {\n\n\n  constructor() {\n    this._renderer = undefined;\n    this.blitter = undefined;\n    this.dom = undefined;\n    this.no_render = undefined;\n    this.current_render_mode = undefined;\n    this.generateDepthNormalTexture = false;\n    this.depth_and_normals_renderer = undefined;\n  }\n\n  init(canvas) {\n    this._renderer = new THREE.WebGLRenderer({\n      antialias: false,\n      preserveDrawingBuffer: true,\n      alpha: true,\n      canvas: canvas\n    });\n\n    this._renderer.autoClear = false;\n\n    if (Configuration.is_mobile) {\n      this._renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    } else {\n      this._renderer.setPixelRatio(Math.min(Math.max(window.devicePixelRatio, 1.5), 2));\n    }\n\n\t\tthis._renderer.extensions.get( 'ANGLE_instanced_arrays' )\n\n    this.blitter = new Blitter(this._renderer);\n\n    this.dom = this._renderer.domElement;\n\n    this.no_render = new BaseRender();\n\n    this.current_render_mode = this.no_render;\n\n    Capabilities.max_anisotropy = this._renderer.capabilities.getMaxAnisotropy();\n    Capabilities.vertex_texture_sampler_available = this._renderer.capabilities.maxVertexTextures > 0;\n    Capabilities.fp_textures_available = this._renderer.capabilities.floatVertexTextures;\n\n    this.generateDepthNormalTexture = false;\n\n    this.depth_and_normals_renderer = new DepthAndNormalsRenderer();\n\n    // let canvas = document.getElementById(\"tiled_canvas\");\n    // let ctx_2D = canvas.getContext(\"2d\");\n    // this.canvas = canvas;\n    // this.ctx_2D = ctx_2D;\n  }\n\n  append_canvas(container)\n  {\n    this.dom.id = container.id+\"-canvas\";\n    // container.appendChild(this.dom);\n    this.container = container;\n    this.on_resize();\n  }\n\n  get dom_element()\n  {\n    return this._renderer.domElement;\n  }\n\n  get depth_normals_RT()\n  {\n    return this.depth_and_normals_renderer.render_target;\n  }\n\n\n  set_state(new_state)\n  {\n    console.log(\"VIEWAPI - map render mode switch to: \" + new_state.constructor.name);\n\n    this.current_render_mode.on_exit(this, this._renderer);\n    this.current_render_mode = new_state;\n    this.current_render_mode.on_enter(this, this._renderer);\n  }\n\n  update() {\n    if(this.generateDepthNormalTexture)\n    {\n      this.depth_and_normals_renderer.render(this);\n    }\n\n    if(CameraManager.current)\n    {\n      CameraManager.current.aspect = Screen.aspect_ratio;\n\n      CameraManager.current.updateProjectionMatrix();\n\n      CameraManager.current.updateMatrix();\n      CameraManager.current.updateMatrixWorld(true);\n      this.current_render_mode.render();\n    }\n  }\n\n\n\n  render(scene, camera, RT, override_mat)\n  {\n    this.__apply_override_material(scene, override_mat);\n\n    this._renderer.setRenderTarget(RT === undefined? null : RT);\n    this._renderer.render(scene  || SceneManager.current,\n                          camera || CameraManager.current);\n\n    this.__apply_override_material(scene, undefined);\n\n\n  }\n\n  __apply_override_material(scene, mat)\n  {\n    if(scene)\n      scene.overrideMaterial = mat;\n    else\n      SceneManager.current.overrideMaterial = mat;\n  }\n\n  readback_RT(RT, buffer)\n  {\n    this._renderer.readRenderTargetPixels( RT, 0, 0, RT.width, RT.height, buffer);\n  }\n\n  clear(RT, camera, clear_depth, clear_stencil)\n  {\n    this._renderer.setRenderTarget(RT === undefined? null : RT);\n\n    if(camera)\n    {\n      this._renderer.setClearColor(camera.clear_color, camera.clear_alpha);\n    }\n\n    this._renderer.clear( camera?         true : false, // clear color\n                          clear_depth?    true : false,\n                          clear_stencil?  true : false);\n  }\n\n  render_ui(scene)\n  {\n    this._renderer.render(scene, CameraManager.current)\n  }\n\n\n\n  on_resize() {\n\n    let width  = this.container.offsetWidth;\n    let height = this.container.offsetHeight;\n    Screen.update_size(width, height);\n    Screen.update_native_size()\n\n    this._renderer.setSize(width,height, false);\n\n    UI.resize();\n    this.current_render_mode.resize(width,height);\n\n  }\n\n\n  blit(src_RT, dst_RT, mat)\n  {\n    if(mat)\n      this.blitter.blit_with_material(src_RT, dst_RT, mat);\n    else\n      this.blitter.blit(src_RT, dst_RT);\n  }\n\n  blit_clear_with_material(dst_RT, mat)\n  {\n    this.blitter.blit_clear_with_material(dst_RT, mat);\n  }\n\n\n  take_screenshot(blob_callback)\n  {\n    // let img    = this.dom.toDataURL(\"image/png;base64;\");\n    // let link = document.createElement('a');\n    // // link.download = \"Snapshot.png\";\n    // // link.href = img;\n    // // link.click();\n    // window.open(img,'_blank');\n\n    // por algun motivo esto fallaba al pedir el contexto 2D, asiq lo termine poniendo en el constructor\n    // let canvas = document.getElementById(\"tiled_canvas\");\n    // let ctx_2D = canvas.getContext(\"2d\");\n\n    const ctx = this;\n\n\n    let old_width = Screen.width;\n    let old_height = Screen.height;\n\n    let new_width = 4096;\n    let new_height = 4096;\n\n    let tile_width = 1024;\n    let tile_height = 1024;\n\n    let divisions_x = parseInt(Math.ceil(new_width / tile_width));\n    let divisions_y = parseInt(Math.ceil(new_height / tile_height));\n\n    Screen.update_size(tile_width, tile_height);\n\n    this._renderer.setPixelRatio(1);\n\n    this._renderer.setSize(tile_width ,tile_height, false);\n\n    this.ctx_2D.canvas.width  = new_width;\n    this.ctx_2D.canvas.height = new_height;\n\n    CameraManager.current.aspect = Screen.aspect_ratio;\n    CameraManager.current.updateMatrix();\n    CameraManager.current.updateMatrixWorld(true);\n\n    for(let x = 0; x < divisions_x; x++)\n    {\n      for(let y = 0; y < divisions_y; y++)\n      {\n\n        CameraManager.current.setViewOffset( new_width,             new_height,\n                                             Screen.width*x,         Screen.height*y,\n                                             Screen.width,            Screen.height);\n        this.current_render_mode.render();\n\n        this.ctx_2D.drawImage(this._renderer.domElement, Screen.width*x, Screen.height*y);\n      }\n    }\n\n    // transform the result canvas into a blob\n    // from them the callback turns into a ULR and download it\n    this.ctx_2D.canvas.toBlob(blob_callback,\"image/png;base64;\");\n\n    CameraManager.current.clearViewOffset();\n    Screen.update_size(old_width,old_height);\n    this._renderer.setPixelRatio(window.devicePixelRatio);\n    this._renderer.setSize(old_width,old_height, false);\n\n    CameraManager.current.aspect = Screen.aspect_ratio;\n    CameraManager.current.updateMatrix();\n    CameraManager.current.updateMatrixWorld(true);\n\n  }\n\n  download_screenshot (blob) {\n    console.log(\"el blob\", blob);\n    let link = document.createElement('a');\n    link.download = \"Snapshot.png\";\n\n    link.href = URL.createObjectURL(blob);\n    link.click()\n\n    link.onclick = function() {\n      requestAnimationFrame(function() {\n        URL.revokeObjectURL(a.href);\n      });\n      a.removeAttribute('href')\n    };\n\n  }\n\n}\n\nconst graphics = new Graphics();\nmodule.exports = graphics;\n\n","\nexport default class AxisHelper extends THREE.Object3D {\n  constructor(scale = 1.0) {\n    super();\n\n    const blueAxisMat = new THREE.LineBasicMaterial({ color: 0x4444ff, depthFunc: THREE.AlwaysDepth });\n    const blueAxisGeo = new THREE.Geometry();\n    blueAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\n    blueAxisGeo.vertices.push(new THREE.Vector3(0, 0, 1000));\n    const blueAxisLine = new THREE.Line(blueAxisGeo, blueAxisMat);\n    blueAxisLine.renderOrder = 50000;\n\n    const greenAxisMat = new THREE.LineBasicMaterial({ color: 0x44ff44, depthFunc: THREE.AlwaysDepth });\n    const greenAxisGeo = new THREE.Geometry();\n    greenAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\n    greenAxisGeo.vertices.push(new THREE.Vector3(0, 1000, 0));\n    const greenAxisLine = new THREE.Line(greenAxisGeo, greenAxisMat);\n    greenAxisLine.renderOrder = 50000;\n\n    const redAxisMat = new THREE.LineBasicMaterial({ linewidth: 100, color: 0xff4444, depthFunc: THREE.AlwaysDepth });\n    const redAxisGeo = new THREE.Geometry();\n    redAxisGeo.computeLineDistances();\n    redAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\n    redAxisGeo.vertices.push(new THREE.Vector3(1000, 0, 0));\n    const redAxisLine = new THREE.Line(redAxisGeo, redAxisMat);\n    redAxisLine.renderOrder = 50000;\n    this.renderOrder = 100000;\n    this.add(blueAxisLine);\n    this.add(greenAxisLine);\n    this.add(redAxisLine);\n    this.scale.set(scale, scale, scale);\n \n  }\n\n  update() {\n  }\n\n  dispose() {\n\n  }\n}\n","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n  vUv = uv;\\n}\";","module.exports=\"#define GLSLIFY 1\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n  //gl_Position.zw -= 0.1;\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(_Color, 1.0);\\n}\";","import vert from '/editor/shaders/object_picker_vert';\nimport frag from '/editor/shaders/object_picker_frag';\nexport default class Mesh extends THREE.Mesh\n{\n\tconstructor(geometry, material)\n\t{\n\t\tsuper(geometry, material);\n\n\t\tthis._selectable_material = this.__get_selectable_material();\n\t\tthis.original_material = this.material;\n\t\tthis.stored_layers = this.layers.mask;\n\t}\n\n\t__get_selectable_material()\n\t{\n\t\treturn new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\t_Color: {value: new THREE.Color()}\n\t\t\t},\n\t\t\tvertexShader: vert,\n      fragmentShader: frag\n\t\t});\n\t}\n\n\trestore_material()\n\t{\n\t\tthis.material = this.original_material;\n\t}\n\n\tstore_layer_state()\n\t{\n\t\tthis.stored_layers = this.layers.mask;\n\t}\n\trestore_layer_state()\n\t{\n\t\tthis.layers.mask = this.stored_layers;\n\t}\n\n\tget selectable_material()\n\t{\n\t\treturn this._selectable_material;\n\t}\n}\n","import Mesh from '/Mesh';\n\nexport default class Cube extends Mesh\n{\n\tconstructor(size, segments, color)\n\t{\n\t\tsize \t\t\t= size || new THREE.Vector3(1,1,1);\n\t\tsegments \t= segments || new THREE.Vector3(1,1,1);\n    color \t\t= color || 0xff0000;\n    let geometry = new THREE.BoxGeometry( size.x, size.y, size.z, segments.x, segments.y, segments.z);\n    let material = new THREE.MeshBasicMaterial( {color: color} );\n\t\tsuper(geometry, material);\n\t}\n}\n","export default class Sphere extends THREE.Mesh\n{\n\tconstructor(radius, color)\n\t{\n    color = color || \"#FF0000\";\n    radius = radius || 1;\n    let geometry = new THREE.SphereBufferGeometry( radius, 64, 64);\n    let material = new THREE.MeshBasicMaterial( {color: color} );\n\t\tsuper(geometry, material);\n\t}\n}","import AxisHelper from '/components/AxisHelper';\nimport basic_color_vert from '/shaders/basic_color/basic_color_vert';\nimport basic_color_frag from '/shaders/basic_color/basic_color_frag';\nimport SceneManager from '/SceneManager';\nimport Graphics from '/Graphics';\nimport Cube from '/primitives/Cube';\nimport Sphere from '/primitives/Sphere';\n\nclass Debug {\n  constructor() {\n    this.Vector3_one = new THREE.Vector3(1,1,1);\n    this.Vector3_zero = new THREE.Vector3(0,0,0);\n    this.canvas_renderer = undefined;\n\n    this.rt_debug = undefined;\n  }\n\n  init(webgl)\n  {\n    this.webgl = webgl;\n\n    this.ctx = undefined;\n\n    // var cln = webgl.dom.cloneNode(false);\n    // cln.id = \"canvas_debug\";\n    // $(cln).css(\"position\", \"absolute\");\n    // webgl.dom.parentElement.insertBefore(cln, webgl.dom);\n    // this.ctx = cln.getContext('2d');\n\n    // this.ctx.clearRect(0, 0, cln.width, cln.height);\n    // this.ctx.fillStyle =  \"rgba(255, 0, 0, 1)\";\n\n  }\n\n  draw_axis()\n  {\n    let axis = new AxisHelper();\n    SceneManager.current.add(axis);\n    return axis;\n  }\n\n  set_debug_RT(RT)\n  {\n    this.rt_debug = RT;\n  }\n\n  draw_rectangle(position_2d, width, height, color)\n  {\n    width  = width || 100;\n    height = height || 100;\n    this.ctx.fillStyle =  color || \"rgba(255, 0, 0, 1)\";\n    this.ctx.fillRect(position_2d.x - width/2,\n                      (this.ctx.canvas.height - position_2d.y) - height/2,width,height);\n\n  }\n\n  clear()\n  {\n    if(this.ctx)\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n\n  draw_line_2D(from, to, color)\n  {\n    this.ctx.strokeStyle =  color ||\"rgba(255, 0, 0, 1)\";\n    this.ctx.beginPath();\n    this.ctx.moveTo(from.x, from.y);\n    this.ctx.lineTo(to.x, to.y);\n    this.ctx.closePath();\n    this.ctx.stroke();\n  }\n\n  draw_line(from, to, color)\n  {\n    color = color || 0xff0000;\n    let mat = new THREE.LineBasicMaterial({ color: color });\n    let geo = new THREE.Geometry();\n    geo.vertices.push(from);\n    geo.vertices.push(to);\n    let line = new THREE.Line(geo, mat);\n    SceneManager.current.add(line);\n    return line;\n  }\n  draw_cube(pos, size, color)\n  {\n    size = size || 1;\n    color = color || 0xff0000;\n    pos = pos || new THREE.Vector3();\n\n    var cube = new Cube(new THREE.Vector3(size, size, size), undefined, color );\n    cube.position.copy(pos);\n    SceneManager.current.add( cube );\n    return cube;\n  }\n  draw_oriented_cube(from, to, height = 1, color = \"#FF0000\", depth = 0.1)\n  {\n  \tlet size = from.distanceTo(to);\n    let cube = new Cube(new THREE.Vector3(depth, height, size), undefined, color );\n\n  \tlet center = to.clone().sub(from).multiplyScalar(0.5);\n\t\tlet forward_dir = center.clone().normalize();\n\t\tcenter.add(from);\n\n\t\tcube.position.copy(center);\n\n\n\t\tlet up = new THREE.Vector3(0,1,0);\n  \tlet forward = forward_dir.clone();\n  \tlet right = forward.clone().cross(up);\n\n  \t// cube.quaternion.setFromRotationMatrix(new THREE.Matrix4().makeBasis(right,up,forward));\n  \tcube.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,-1), forward_dir);\n\n    SceneManager.current.add( cube );\n    return cube;\n  }\n  draw_plane(width, height, color)\n  {\n    var geometry = new THREE.PlaneGeometry( width, height );\n    let material = new THREE.ShaderMaterial({\n      uniforms: {\n        _Color: {value : new THREE.Vector4(0,1,0, 0.2)},\n      },\n      vertexShader: basic_color_vert,\n      fragmentShader: basic_color_frag,\n      transparent: true,\n      depthWrite: false\n    });\n\n    var plane = new THREE.Mesh( geometry, material );\n    plane.renderOrder = -10000\n    SceneManager.current.add(plane);\n    return plane;\n  }\n  draw_empty_cube(pos, size,color)\n  {\n    size = size || 1;\n    color = color || 0xff0000;\n\n    let box = new THREE.Box3().setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(size, size, size));\n    let helper = new THREE.Box3Helper( box, color );\n    helper.position.copy(pos || new THREE.Vector3());\n    return helper;\n  }\n  draw_sphere(pos, size, color)\n  {\n    size = size || 1;\n    color = color || 0xff0000;\n    pos = pos || new THREE.Vector3();\n\n    var sphere = new Sphere(size, color );\n    sphere.position.copy(pos);\n    SceneManager.current.add( sphere );\n    return sphere;\n  }\n  draw_sphere_helper(sphere, color)\n  {\n    color = color || 0xff0000;\n    var geometry = new THREE.SphereGeometry( sphere.radius, 32, 32 );\n    var material = new THREE.MeshBasicMaterial( {color: color, side: THREE.DoubleSide} );\n    var sphere = new THREE.Mesh( geometry, material );\n    SceneManager.current.add(sphere);\n  }\n\n  draw_math_sphere(sphere)\n  {\n    var geometry = new THREE.SphereGeometry( sphere.radius, 32, 32 );\n    let material = new THREE.ShaderMaterial({\n      uniforms: {\n        _Color: {value : new THREE.Vector4(1,0,0, 0.2)},\n      },\n      vertexShader: basic_color_vert,\n      fragmentShader: basic_color_frag,\n      transparent: true\n    });\n    // var material = new THREE.MeshBasicMaterial( {color: 0xff0000, transparent = true} );\n    var sphere1 = new THREE.Mesh( geometry, material );\n    sphere1.position.copy(sphere.center);\n    SceneManager.current.add(sphere1)\n  }\n\n  draw_bounding_box(bb)\n  {\n    var helper = new THREE.Box3Helper( bb, 0xffff00 );\n    SceneManager.current.add( helper );\n  }\n\n  draw_curve(curve, options)\n  {\n    let offset = new THREE.Vector3(0,0, 0);\n    if(options)\n      offset.y = options.offset || 0;\n\n    for(let i=0; i< curve.length-1; i++)\n    {\n      this.draw_line(curve[i].clone().add(offset), curve[i+1].clone().add(offset));\n    }\n  }\n\n}\n\nconst DEBUG = new Debug();\nmodule.exports = DEBUG;\n","export default class GeometryBatch\n{\n\tconstructor(geometry, batch_width)\n\t{\n\t\tthis.geometry = geometry;\n\n\t\tthis.material = undefined;\n\t\tthis.uniforms = {};\n\t\tthis.batch_width = batch_width;\n\n\t\tthis.data_textures = [];\n\n\t\tthis.object_names = undefined;\n\n\n\t\tthis.zero_offset = new THREE.Vector2();\n\t\tthis.write_offset = new THREE.Vector2();\n\n\t\tthis.uniform_dirty_count = 0;\n\n\t\tthis.tmp_uploaded_data_count = 0;\n\n\t}\n\n\tinit(object_names, vert_shader, frag_shader)\n\t{\n\t\tthis.material = new THREE.ShaderMaterial({\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: vert_shader,\n\t\t\tfragmentShader: frag_shader\n\t\t});\n\t\tthis.object_names = object_names;\n\n\t}\n\n\tadd_global_uniform(name, data)\n\t{\n\t\tthis.uniforms[name] = {value: data};\n\t\tthis.material.needsUpdate = true;\n\t}\n\tset_global_uniform(name, data)\n\t{\n\t\tthis.uniforms[name].value = data;\n\t}\n\n\tadd_object_uniform_v3(uniform_name, default_value_v3)\n\t{\n\t\tlet src_tex \t\t= this.__create_rgb_texture(this.batch_width);\n\t\tlet dst_tex \t\t= this.__create_rgb_texture(this.batch_width);\n\t\tlet one_pixel_tex = this.__create_rgb_texture(1);\n\n\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\n\n\t\tif(default_value_v3)\n\t\t\tthis.__flood_data_texture_rgb(new_data_tex, default_value_v3);\n\t\n\t}\n\n\tadd_object_uniform_v4(uniform_name, default_value_v4)\n\t{\n\t\tlet src_tex \t\t= this.__create_rgba_texture(this.batch_width);\n\t\tlet dst_tex \t\t= this.__create_rgba_texture(this.batch_width);\n\t\tlet one_pixel_tex = this.__create_rgba_texture(1);\n\n\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\n\n\t\tif(default_value_v4)\n\t\t\tthis.__flood_data_texture_rgba(new_data_tex, default_value_v4);\n\t\n\t}\n\n\tadd_object_uniform_v4_float(uniform_name, default_value_v4)\n\t{\n\t\tlet src_tex \t\t= this.__create_rgba_float_texture(this.batch_width);\n\t\tlet dst_tex \t\t= this.__create_rgba_float_texture(this.batch_width);\n\t\tlet one_pixel_tex = this.__create_rgba_float_texture(1);\n\n\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\n\n\t\tif(default_value_v4)\n\t\t\tthis.__flood_data_texture_rgba(new_data_tex, default_value_v4);\n\t\n\t}\n\n\tset_object_uniform_v3(object_name, uniform_name, vector3, use_r, use_g, use_b)\n\t{\n\t\tlet obj_index = this.__get_object_index(object_name);\n\t\tlet data_texture = this.__get_data_texture(uniform_name);\n\n\t\tthis.__set_pixel_rgb(data_texture.src, obj_index, vector3, use_r, use_g, use_b);\n\t\tthis.__set_pixel_rgb(data_texture.one_pixel, 0\t, vector3, use_r, use_g, use_b);\n\n\t\tdata_texture.last_accessed_index = obj_index;\n\n\t\tdata_texture.dirty_count++; \n\t}\n\n\tset_object_uniform_v4(object_name, uniform_name, vector4, use_r, use_g, use_b, use_a)\n\t{\n\t\tlet obj_index = this.__get_object_index(object_name);\n\t\tlet data_texture = this.__get_data_texture(uniform_name);\n\n\t\tthis.__set_pixel_rgba(data_texture.src, obj_index, vector4, use_r, use_g, use_b, use_a);\n\t\tthis.__set_pixel_rgba(data_texture.one_pixel, 0, vector4, use_r, use_g, use_b, use_a);\n\t\tdata_texture.last_accessed_index = obj_index;\n\n\t\tdata_texture.dirty_count++; \n\t}\n\n\n\tupload_texture_data(renderer, upload_budget)\n\t{\n\t\tfor(let i=0; i< this.data_textures.length; i++)\n\t\t{\n\t\t\tif(upload_budget > 0 && this.data_textures[i].dirty_count > 0)\n\t\t\t{\n\t\t\t\tif(this.data_textures[i].dirty_count === 1)\n\t\t\t\t\tthis.__partial_texture_data_upload(renderer, this.data_textures[i]);\n\t\t\t\tif(this.data_textures[i].dirty_count > 1)\n\t\t\t\t\tthis.__full_texture_data_upload(renderer, this.data_textures[i]);\n\n\t\t\t\tthis.data_textures[i].dirty_count = 0;\n\n\t\t\t\tupload_budget--;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\tget_uniform_dirty_count()\n\t{\n\t\tthis.uniform_dirty_count = 0;\n\t\tfor(let i=0; i< this.data_textures.length; i++)\n\t\t{\n\t\t\tif(this.data_textures[i].dirty_count > 0)\n\t\t\t\tthis.uniform_dirty_count++;\n\t\t}\n\t\treturn this.uniform_dirty_count;\n\t}\n\n\n\t__full_texture_data_upload(renderer, texture_data)\n\t{\n\t\t// console.log(\"full texture update of\"+ texture_data.name);\n\t\ttexture_data.dst.needsUpdate = true;\n\t\trenderer.copyTextureToTexture(\n\t\t\t\t\tthis.zero_offset, \n\t\t\t\t\ttexture_data.src, \n\t\t\t\t\ttexture_data.dst\n\t\t\t);\n\t}\n\t__partial_texture_data_upload(renderer, texture_data)\n\t{\n\t\t// console.log(\"partial texture update\"+ texture_data.name);\n\t\tlet index = texture_data.last_accessed_index;\n\t\tif(index === -1)\n\t\t\treturn;\n\t\t\n  \tthis.write_offset.y = Math.floor(index/this.batch_width);\n  \tthis.write_offset.x = index - this.batch_width*this.write_offset.y;\n\t\trenderer.copyTextureToTexture(\n\t\t\tthis.write_offset, \n\t\t\ttexture_data.one_pixel, \n\t\t\ttexture_data.dst\n\t\t);\n\t}\n\n\tget_mesh()\n\t{\n\t\treturn new THREE.Mesh(this.geometry, this.material);\n\t}\n\n\t__set_pixel_rgb(data_texture, index, vector3, use_r, use_g, use_b)\n\t{\n\t\tif(use_r)\n\t\t\tdata_texture.image.data[index*3+0] = vector3.x;\t    \n\t\tif(use_g)\n\t\t\tdata_texture.image.data[index*3+1] = vector3.y;\t    \n\t\tif(use_b)\n\t\t\tdata_texture.image.data[index*3+2] = vector3.z;\t\n\t}\n\t__set_pixel_rgba(data_texture, index, vector4, use_r, use_g, use_b, use_a)\n\t{\n\t\tif(use_r)\n\t\t\tdata_texture.image.data[index*4+0] = vector4.x;\t    \n\t\tif(use_g)\n\t\t\tdata_texture.image.data[index*4+1] = vector4.y;\t    \n\t\tif(use_b)\n\t\t\tdata_texture.image.data[index*4+2] = vector4.z;\t\n\t\tif(use_a)\n\t\t\tdata_texture.image.data[index*4+3] = vector4.w;\n\t}\n\n\t__flood_data_texture_rgb(data_texture, v3)\n\t{\n\t\tfor(let i=0; i< this.batch_width * this.batch_width; i++)\n\t\t{\n\t\t\tthis.__set_pixel_rgb(data_texture.src, i, v3, true, true, true);\n\t\t\tdata_texture.dirty_count++;\n\t\t}\n\t}\n\n\t__flood_data_texture_rgba(data_texture, v4)\n\t{\n\t\tfor(let i=0; i< this.batch_width * this.batch_width; i++)\n\t\t{\n\t\t\tthis.__set_pixel_rgba(data_texture.src, i, v4, true, true, true, true);\n\t\t\tdata_texture.dirty_count++;\n\t\t}\n\t}\n\n\n\t__create_rgb_texture(width)\n\t{\n\t\tlet data = new Uint8Array( 3 * width * width );\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBFormat );\n\t}\n\t__create_rgba_texture(width)\n\t{\n\t\tlet data = new Uint8Array( 4 * width * width );\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBAFormat );\n\t}\n\n\t__create_rgba_float_texture(width)\n\t{\n\t\tlet data = new Float32Array( 4 * width * width );\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBA, THREE.FloatType );\n\t}\n\n\t__get_data_texture(uniform_name)\n\t{\n\t\tfor(let i=0; i< this.data_textures.length; i++)\n\t\t{\n\t\t\tif(this.data_textures[i].name === uniform_name)\n\t\t\t\treturn this.data_textures[i];\n\t\t}\n\t\tconosle.error(\"Data texture \"+uniform_name+\" does not exist\");\n\t\treturn undefined;\n\t}\n\t__get_object_index(name)\n\t{\n\t\tfor(let i=0; i< this.object_names.length; i++)\n\t\t{\n\t\t\tif(this.object_names[i] === name)\n\t\t\t\treturn i;\n\t\t}\n\t\tconsole.error(\"the name \"+name+\" is not contained in this batch\");\n\t\treturn undefined;\n\t}\n\n\t__add_data_texture(uniform_name, src_texture, dst_texture, one_pixel_text)\n\t{\n\t\tdst_texture.needsUpdate = true;\n\n\t\tthis.data_textures.push({\n\t\t\tname: uniform_name,\n\t\t\tsrc: src_texture, \n\t\t\tdst: dst_texture,\n\t\t\tone_pixel: one_pixel_text,\n\t\t\tlast_accessed_index: -1,\n\t\t\tdirty_count: 0\n\t\t});\n\n\t\tthis.uniforms[uniform_name] = {value: dst_texture};\n\t\treturn this.data_textures[this.data_textures.length-1];\n\t}\n\n\tdispose()\n\t{\n\t\tfor(let i=0; i< this.data_textures.length; i++)\n\t\t{\n\t\t\tthis.data_textures[i].src.dispose();\n\t\t\tthis.data_textures[i].dst.dispose();\n\t\t\tthis.data_textures[i].one_pixel.dispose();\n\t\t}\n\t}\n\n\t\n}","import GeometryBatch from '/static_batcher/GeometryBatch'\n\nclass GeometryBatcher\n{\n\tconstructor()\n\t{\n\t\tthis.batches = [];\n\t}\n\n\tbatch(buffer_geometries)\n\t{\n\t  let attr_accessor_uvs = [];\n\t  let texture_width = THREE.Math.ceilPowerOfTwo(Math.sqrt(buffer_geometries.length));\n\t  // console.log(\"Store count: \" + buffer_geometries.length + \", Texture size: \" +texture_width);\n\n\t  this.__init_uv_array(attr_accessor_uvs, texture_width);\n\n\n\t  let uv_index = 0;\n\n\t  for(let i=0; i< buffer_geometries.length; i++)\n\t  {\n\t    let vertex_count = buffer_geometries[i].getAttribute('position').count;\n\t    let y = Math.floor(i/texture_width);\n\t    let x = i - texture_width*y;\n\t    for(let count = 0; count < vertex_count; count++)\n\t    {\n\n\t      attr_accessor_uvs[uv_index] = (x/texture_width) + 0.5/texture_width;\n\t      attr_accessor_uvs[uv_index+1] = (y/texture_width) + 0.5/texture_width;\n\t      uv_index+=2;\n\t    }\n\t  }\n\n\t  let buffer_attribute = new THREE.BufferAttribute( new Float32Array( attr_accessor_uvs ), 2);\n\t  let buffer_geometry = THREE.BufferGeometryUtils.mergeBufferGeometries(buffer_geometries);\n\t  buffer_geometry.addAttribute( 'attr_accessor_uv', buffer_attribute);\n\n\t  this.batches.push(new GeometryBatch(buffer_geometry, texture_width));\n\t  return this.batches[this.batches.length-1];\n\n\t}\n\n\tupload_texture_data(renderer)\n\t{\n\t\tfor(let i=0; i< this.batches.length; i++)\n\t\t{\n\t\t\tthis.batches[i].upload_texture_data(renderer, 1);\n\t\t}\n\t}\n\n\n\n\t__init_uv_array(uvs, texture_width)\n\t{\n\t\tfor(let i=0; i< texture_width*texture_width*2; i++)\n\t  {\n\t    uvs.push(0);\n\t  }\n\t}\n}\n\n\nconst geometry_batcher = new GeometryBatcher();\nmodule.exports = geometry_batcher;\n","export default class BaseApplication\n{\n\tstart(){}\n\tend(){}\n\tupdate(){}\n\ton_post_render(){}\n\ton_pre_render(){}\n}","import Time from '/Time';\nimport Input from '/Input';\nimport UI from '/UI';\nimport Debug from '/Debug';\nimport GeometryBatcher from '/static_batcher/GeometryBatcher';\nimport BaseApplication from '/BaseApplication';\n\nexport default class RenderLoop {\n\n  constructor(target_application, renderer) {\n\n    target_application = target_application || new BaseApplication();\n\n    this._frame_id = -1;\n\n    this.target_application = target_application;\n    this.renderer = renderer;\n\n    this.is_running = true;\n\n  }\n\n  update() {\n\n    if(!this.is_running)\n      return;\n\n    Time.__update();\n    Debug.clear();\n\n    //###### START CYCLE ######\n\n    this.target_application.update();\n\n    this.target_application.on_pre_render();\n\n    this.renderer.update();     // render scene\n    UI.update();                // update after new camera matrix has been calculated\n    UI.render(this.renderer);   // render ui layer on top\n\n    this.target_application.on_post_render();\n\n    if(Debug.rt_debug)\n      this.renderer.blit(Debug.rt_debug);\n    //###### END  CYCLE #######\n    Input.clear();\n    UI.clear();\n\n    //   GeometryBatcher.upload_texture_data(this.renderer);\n\n    this._frame_id = requestAnimationFrame(this.update.bind(this));\n  }\n\n  start() {\n    this.target_application.start();\n    this.update();\n    this.is_running = true;\n\n\n  }\n\n  stop() {\n    this.is_running = false;\n    this.target_application.end();\n\n    cancelAnimationFrame(this._frame_id);\n  }\n}\n","import Graphics from '/Graphics';\nimport RenderLoop from '/RenderLoop';\nimport Configuration from '/Configuration';\nimport Input from '/Input';\nimport CameraManager from '/CameraManager';\nimport SceneManager from '/SceneManager';\nimport Screen from '/Screen';\n\nmodule.exports = {\n  Configuration: Configuration,\n  Input: Input,\n  Graphics: Graphics,\n  RenderLoop: RenderLoop,\n  CameraManager: CameraManager,\n  SceneManager: SceneManager,\n  Screen: Screen\n}\n"]}