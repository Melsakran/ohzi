{"version":3,"sources":["utilities/ArrayUtilities.js","BaseApplication.js","shaders/basic_color/basic_color_vert.glsl","shaders/basic_color/basic_color_frag.glsl","materials/BaseShaderMaterial.js","CameraManager.js","Screen.js","Configuration.js","Time.js","KeyboardInput.js","Input.js","primitives/Sphere.js","editor/shaders/object_picker_vert.glsl","editor/shaders/object_picker_frag.glsl","Mesh.js","primitives/Arrow.js","SceneManager.js","utilities/MathUtilities.js","utilities/CameraUtilities.js","Capabilities.js","utilities/EasingFunctions.js","EventManager.js","components/AxisHelper.js","render_mode/BaseRender.js","RenderLayers.js","shaders/box_blur/compose_frag.glsl","shaders/box_blur/box_blur_frag.glsl","shaders/copy/copy_frag.glsl","shaders/copy/copy_vert.glsl","render_mode/OutlineRender.js","materials/BlitMaterial.js","shaders/clear/clear_depth_normal_frag.glsl","materials/ClearDepthNormalMaterial.js","shaders/depth_normals/depth_normals_vert.glsl","shaders/depth_normals/depth_normals_frag.glsl","materials/DepthNormalMaterial.js","render_utilities/DepthAndNormalsRenderer.js","render_utilities/Blitter.js","Graphics.js","primitives/Cube.js","Debug.js","render_mode/NormalRender.js","shaders/deferred/deferred_compose.frag","shaders/deferred/blit_copy.vert","materials/DeferredRendererComposeMaterial.js","shaders/deferred/point_light.vert","shaders/deferred/point_light.frag","materials/deferred/DeferredPointLightMaterial.js","render_mode/DeferredRender.js","shaders/normal/normal.frag","shaders/normal/normal.vert","materials/NormalMaterial.js","render_mode/DebugNormalsRender.js","utilities/ObjectUtilities.js","PerspectiveCamera.js","UI.js","static_batcher/GeometryBatch.js","static_batcher/GeometryBatcher.js","RenderLoop.js","resource_loader/AbstractLoader.js","resource_loader/TextureLoader.js","resource_loader/GLTFLoader.js","resource_loader/DAELoader.js","resource_loader/TextLoader.js","resource_loader/CubemapLoader.js","resource_loader/AudioLoader.js","resource_loader/JSONLoader.js","resource_loader/OBJLoader.js","resource_loader/RGBETextureLoader.js","resource_loader/PointArrayLoader.js","ResourceContainer.js","resource_loader/ResourceBatch.js","utilities/TimeUtilities.js","utilities/ImageUtilities.js","utilities/ModelUtilities.js","utilities/Validation.js","shaders/grid/grid_frag.glsl","shaders/grid/grid_vert.glsl","utilities/GeometryUtilities.js","components/Grid.js","shaders/ui_element/ui_element.vert","shaders/ui_element/ui_element.frag","materials/UIElementMaterial.js","shaders/ui/ss_texture_frag.glsl","shaders/ui/ss_texture_vert.glsl","ui/ui_element_position/ScreenSpacePosition.js","ui/ui_element_position/WorldSpacePosition.js","ui/ui_element_state/UIElementState.js","ui/ui_element_state/OnIdle.js","ui/ui_element_state/OnMouseEnter.js","ui/ui_element_state/OnMouseExit.js","ui/ui_element_state/OnMouseHover.js","components/UIElement.js","shaders/basic_line/basic_line_vert.glsl","shaders/basic_line/basic_line_frag.glsl","components/Line.js","Components.js","canvas_drawer/CanvasDrawer.js","canvas_drawer/SimpleTextDrawer.js","index.js"],"names":["ArrayUtilities","source","target","push","apply","array","size","items_left_count","length","i","clone","elem","index","indexOf","splice","BaseApplication","module","exports","ShaderMaterial","BaseShaderMaterial","THREE","vert","frag","uniforms","vertexShader","basic_vert","fragmentShader","basic_frag","_Color","value","Color","CameraManager","_current","undefined","camera","camera_manager","Screen","width","height","render_width","render_height","width_height","Vector2","dpr","pixel_size","x","y","vector2","multiplyScalar","window","devicePixelRatio","Configuration","is_mobile","is_ios","is_ipad","vertex_image_unit_supported","min_zoom_distance","max_zoom_distance","max_zoom_distance_scale","zoom_speed","use_fxaa","use_ssaa","background_color","touch_sensitivity","zoom_sensitivity","spin_sensitivity","three_finger_rotation_speed","three_finger_allowed_x_rotation_offset","three_finger_allowed_y_rotation_offset","use_touch_gestures","texture_float_supported","use_ortographic","hover_enabled","rotation_enabled","transparency_amount","show_debug_sphere_on_floor_selection","show_debug_sphere_on_steps_in_floor","display_cleanup_log","navigation_speed_damping","navigation_speed","out_of_bounds_force","mouse_zoom_speed","touch_zoom_speed","json","configuration","Time","___time","Clock","__delta_time","__elapsed_time","__allocated_time","getDelta","getElapsedTime","delta_time","elapsed_time","time","KeyboardInput","ctrlz_pressed","ctrlz_fired","keys","document","onkeydown","on_key_down","bind","onkeyup","on_key_up","onkeypress","on_key_press","e","keyCode","ctrlKey","key","press_key","release_keys","pressed","fired","down","key_name","up","keyboard_input","Input","mouse_pos","last_mouse_pos","mouse_dir","__clicked_time","is_mouse_down","is_mouse_up","rotation_angle","_normalized_mouse_pos","left_mouse_button_down","left_mouse_button_pressed","left_mouse_button_released","middle_mouse_button_down","right_mouse_button_down","right_mouse_button_pressed","right_mouse_button_released","mousewheel","previous_scale","previous_rotation","previous_rotation_dirty","mouse_str","tmp_mouse_velocity","bounding_client","multitouch_active","tapped","initial_zoom_distance","zoom_center","zoom_started","touch_zoom","multi_touch_dir","wheel_delta","mac","pinching_with_trackpad","scrolling_with_trackpad","scrolling_with_mouse","double_click","canvas","previous_pos_x","previous_pos_y","rect","getBoundingClientRect","left","top","container","region","ZingTouch","Region","init","scope","set_mouse_pos","addEventListener","on_double_click","on_focus_lost","on_mouse_up","on_mouse_move","on_touch_move","on_touch_end","one_finger_pan","Pan","numInputs","register","event","detail","data","two_fingers_pan","set","change","three_fingers_pan","touch_zoom_delta","distance","last_zoom_distance","center","gesture","Gesture","end","inputs","state","element","on_gesture_end","start","on_mouse_down","on_mouse_wheel","preventDefault","clientX","clientY","ev","events","get_os","is_mac","console","log","deltaY","is_int","Math","abs","current","originalEvent","which","changedTouches","middle_mouse_button_released","rotation_delta","normalize","userAgent","navigator","platform","os","test","n","clear","normalized_mouse_pos","INPUT","Mesh","Sphere","radius","color","geometry","SphereBufferGeometry","material","MeshBasicMaterial","_selectable_material","__get_selectable_material","original_material","stored_layers","layers","mask","Arrow","dir","cone_height","cylinder_height","cylinder_geo","CylinderBufferGeometry","translate","cone_geometry","ConeBufferGeometry","buffer_geometry","BufferGeometryUtils","mergeBufferGeometries","rotateX","quaternion","setFromUnitVectors","Vector3","scale","z","SceneManager","Scene","name","scene","scene_manager","MathUtilities","from_range_start_value","from_range_end_value","to_range_start_value","to_range_end_value","min","max","rgb","r","round","toString","g","b","points","plane","projected_point","points_on_plane","projectPoint","from","to","t","elements","lerp","x1","x2","CameraUtilities","tmp_mat","Matrix4","tmp_vec","tmp_vec2","Plane","ray","Ray","tmp_size","tmp_unproj","applyQuaternion","NDC","v_fov","fov","PI","h_fov","atan","tan","aspect","distV","far","distH","plane_position","plane_normal","setFromNormalAndCoplanarPoint","get_forward_dir","isPerspectiveCamera","position","unproject_mouse_position","unproject","intersectPlane","zoom_scale","world_space_center","setFromPoints","camera_forward","project_points_on_plane","projected_points_center","box","Box3","getCenter","right","cross","mat","inverse_mat","getInverse","applyMatrix4","getSize","projected_center","zoom","get_zoom_to_fit_rect","bb","isOrthographicCamera","obj_x","obj_y","object_aspect","aspect_ratio","object","getWorldPosition","project","bottom","updateProjectionMatrix","camera_utilities","Capabilities","max_anisotropy","vertex_texture_sampler_available","fp_textures_available","capabilities","EasingFunctions","sin","pow","sqrt","EventManager","queue","zoom_changed_evt","store_clickd_evt","point_selected_evt","config_changed","path_substep_completed","path_completed","go_to_store_requested_evt","resource_loaded_evt","service_clicked_evt","unit_pos_updated_evt","floor_changed_evt","on_enter_floor_navigation","on_exit_floor_navigation","on_enter_floor_selection","on_exit_floor_selection","on_enter_outside_navigation","on_exit_outside_navigation","step_selected_evt","payload","callback","fire","store_id","hit_data","step_number","step_index","resource","service","unit_data","floor_id","event_manager","Object3D","AxisHelper","blueAxisMat","LineBasicMaterial","depthFunc","AlwaysDepth","blueAxisGeo","Geometry","vertices","blueAxisLine","Line","renderOrder","greenAxisMat","greenAxisGeo","greenAxisLine","redAxisMat","linewidth","redAxisGeo","redAxisLine","add","BaseRender","context","renderer","RenderLayers","OutlineRender","webgl","main_rt","WebGLRenderTarget","rt1","rt2","compose_material","__get_compose_material","copy_material","__get_copy_material","box_blur_material","__get_box_blur_material","background_material","__get_background_material","copy_plane","PlaneGeometry","frustumCulled","copy_scene","w","h","setSize","_Screen","updateMatrix","updateMatrixWorld","enable","opaque","transparent","disable","outline","_renderer","setClearColor","clear_color","clearTarget","overrideMaterial","render","_MainTex","texture","_SampleDir","_Blur","copy_vert","copy_frag","depthTest","depthWrite","box_blur_frag","compose_frag","extensions","derivatives","Vector4","background_frag","autoClear","BlitMaterial","frag_shader","vert_shader","defines","_Resolution","blending","NoBlending","ClearDepthNormalMaterial","clear_depth","clear_normal","_DepthNormal","DepthNormalMaterial","_FarPlane","DepthAndNormalsRenderer","RT","clear_depth_normal_mat","depth_normal_material","graphics","__resize_RT_if_necessary","blit_clear_with_material","far_plane","Blitter","_blit_scene","_blit_material","_blit_quad","PlaneBufferGeometry","_blit_camera","OrthographicCamera","src","dst","setRenderTarget","dst_RT","Graphics","blitter","no_render","current_render_mode","generateDepthNormalTexture","depth_and_normals_renderer","msaa","WebGLRenderer","antialias","preserveDrawingBuffer","alpha","setPixelRatio","get","domElement","getMaxAnisotropy","maxVertexTextures","floatVertexTextures","new_state","constructor","on_exit","on_enter","check_for_resize","override_mat","__apply_override_material","buffer","readRenderTargetPixels","clear_stencil","clear_alpha","current_width","clientWidth","current_height","clientHeight","update_size","resize","error","src_RT","blit_with_material","blit","blob_callback","ctx","old_width","old_height","divisions_x","parseInt","ceil","new_width","divisions_y","new_height","ctx_2D","setViewOffset","drawImage","toBlob","clearViewOffset","blob","link","createElement","download","href","URL","createObjectURL","click","onclick","requestAnimationFrame","revokeObjectURL","a","removeAttribute","render_target","Cube","segments","BoxGeometry","Debug","Vector3_one","Vector3_zero","canvas_renderer","rt_debug","axis","position_2d","fillStyle","fillRect","clearRect","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","BufferGeometry","line","pos","cube","copy","depth","distanceTo","sub","forward_dir","basic_color_vert","basic_color_frag","setFromCenterAndSize","helper","Box3Helper","sphere","input_points","open","catmull","CatmullRomCurve3","updateArcLengths","getSpacedPoints","line_helper","draw_line","SphereGeometry","sphere_mesh","sphere1","curve","options","offset","DEBUG","NormalRender","DeferredRendererComposeMaterial","_NormalDepthRT","_AlbedoRT","_InverseProjMatrix","rt","tex","mat4","DeferredPointLightMaterial","intensity","_Intensity","_AlbedoTex","_NormalDepthTex","AdditiveBlending","side","BackSide","DeferredRender","compose_mat","scene_lights","light_intensity","radius_needed_for_intensity","light_row","light_col","camera_inverse_proj_mat","__check_RT_size","projectionMatrix","inverse_proj","albedo_rt","depth_normals_rt","depth_normals_RT","traverse","child","set_inverse_proj_matrix","set_normal_depth_rt","set_albedo_rt","NormalMaterial","DebugNormalsRender","ObjectUtilities","xml","obj","nodeType","attributes","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","xml_to_json","old","PerspectiveCamera","near","UI","ui_elements","_tmp_normalized_pos","ss_scene","autoUpdate","ws_scene","ss_camera","remove","dispose","set_screen_space_coordinate_system","set_world_space_coordinate_system","update_state","children","current_clicked_element","ui","GeometryBatch","batch_width","data_textures","object_names","zero_offset","write_offset","uniform_dirty_count","tmp_uploaded_data_count","needsUpdate","uniform_name","default_value_v3","src_tex","__create_rgb_texture","dst_tex","one_pixel_tex","new_data_tex","__add_data_texture","__flood_data_texture_rgb","default_value_v4","__create_rgba_texture","__flood_data_texture_rgba","__create_rgba_float_texture","object_name","vector3","use_r","use_g","use_b","obj_index","__get_object_index","data_texture","__get_data_texture","__set_pixel_rgb","one_pixel","last_accessed_index","dirty_count","vector4","use_a","__set_pixel_rgba","upload_budget","__partial_texture_data_upload","__full_texture_data_upload","texture_data","copyTextureToTexture","floor","image","v3","v4","Uint8Array","DataTexture","RGBFormat","RGBAFormat","Float32Array","RGBA","FloatType","conosle","src_texture","dst_texture","one_pixel_text","GeometryBatcher","batches","buffer_geometries","attr_accessor_uvs","texture_width","ceilPowerOfTwo","__init_uv_array","uv_index","vertex_count","getAttribute","count","buffer_attribute","BufferAttribute","setAttribute","upload_texture_data","uvs","geometry_batcher","RenderLoop","target_application","_frame_id","is_running","frames_passed","__update","post_start","update","on_pre_render","on_post_render","cancelAnimationFrame","AbstractLoader","resource_id","url","progress","has_finished","has_error","error_message","message","resource_container","TextureLoader","loader","load","set_resource","__update_progress","__loading_ended","__set_error","GLTFLoader","gltf","xhr","loaded","total","msg","DAELoader","ColladaLoader","TextLoader","FileLoader","CubemapLoader","CubeTextureLoader","setPath","urls","AudioLoader","listener","loop","volume","voluem","sound","Audio","audio","setBuffer","setLoop","setVolume","get_resource","JSONLoader","username","password","headers","btoa","fetch","then","__parse_to_json","__set_resource","response","OBJLoader","RGBETextureLoader","RGBELoader","setDataType","UnsignedByteType","hdr","PointArrayLoader","text","parse_path","raw_data","string_array","split","pop","positions","parseFloat","ResourceContainer","resources","fire_resource_loaded","ResourceBatch","batch_name","resource_loaders","print_error","finished","TimeUtilities","ImageUtilities","getContext","getImageData","imagedata","ModelUtilities","result_callback","fromGeometry","geometries","get_mesh","animations","skinnedMeshes","node","isSkinnedMesh","cloneBones","cloneSkinnedMeshes","isBone","skinnedMesh","skeleton","cloneSkinnedMesh","orderedCloneBones","bones","cloneBone","Skeleton","boneInverses","matrixWorld","cast","receive","castShadow","receiveShadow","object_type","model_utilities","Validation","Number","str","JSON","parse","GeometryUtilities","geometry_buffer","indices","bar_coordinates","getX","getY","getZ","add_barycentric_attribute","non_indexed_geometry_buffer","Grid","grid_vert","grid_frag","plane_geometry","non_indexed_geometry","convert_to_non_indexed_geometry","rotation","UIElementMaterial","_ScreenSize","_TextureSize","_PixelOffset","_NDC","_PivotPoint","_DepthOffset","ScreenSpacePosition","WorldSpacePosition","tmp_vec3","UIElementState","ui_element","normalized_mouse_position","OnIdle","is_mouse_over","set_state","_on_enter_state","OnMouseEnter","on_mouse_enter","_on_hover_state","_on_exit_state","OnMouseExit","on_mouse_exit","_on_idle_state","OnMouseHover","__trigger_on_hover","on_mouse_hover","UIElement","is_clickable","position_strategy","current_state","_position","on_hover","mouse_pos_tmp","cached_NDC_position","screen_pos_tmp","texture_size","matrixAutoUpdate","pixel_offset","visible","minFilter","NearestFilter","magFilter","get_size","get_pos_NDC","to_screen_position","Box2","containsPoint","projected_pos","screen_pos","remove_screen_material","boolean","_Thickness","_Length","_ElapsedTime","line_vs","line_fs","setup","next_position","previous_position","orientation","coverage","accumulated_length","next_point","__get_next_position","previous_point","__get_previous_position","vertexList","nextPositionList","previousPositionList","orientationList","coverageList","setIndex","_length","parent","col","CanvasDrawer","uses_dynamic_font","__textHeight","fontStyle","body","getElementsByTagName","dummy","dummyText","createTextNode","appendChild","offsetHeight","removeChild","font","measureText","getFontHeight","ctxOptions","font_color","__draw","draw_canvas","canvas_texture","CanvasTexture","UVMapping","ClampToEdgeWrapping","generateMipMaps","fill","tl","tr","br","bl","defaultRadius","quadraticCurveTo","SimpleTextDrawer","text_margin","text_size","get_text_size","globalAlpha","textBaseline","textAlignment","fillText","Components"],"mappings":"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","file":"index.js","sourceRoot":"src","sourcesContent":["export default class ArrayUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n\r\n  static merge_from_to(source, target)\r\n  {\r\n    target.push.apply( target, source );\r\n  }\r\n\r\n  static expand_vec3_array(array, size)\r\n  {\r\n    let items_left_count = size - array.length;\r\n\r\n\t\tfor (let i = 0;i < items_left_count;i++)\r\n    {\r\n      array.push(array[i].clone());\r\n    }\r\n  }\r\n\r\n  static remove_elem(array, elem)\r\n  {\r\n    let index = array.indexOf(elem);\r\n    if (index > -1) {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n","export default class BaseApplication\r\n{\r\n\tstart() {}\r\n\tpost_start() {}\r\n\tend() {}\r\n\tupdate() {}\r\n\ton_post_render() {}\r\n\ton_pre_render() {}\r\n\tresources_fully_loaded() {}\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n  vUv = uv;\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(_Color, 1.0);\\n}\";","import basic_vert from '/shaders/basic_color/basic_color_vert';\r\nimport basic_frag from '/shaders/basic_color/basic_color_frag';\r\n\r\nexport default class BaseShaderMaterial extends THREE.ShaderMaterial\r\n{\r\n\tconstructor(vert, frag, uniforms)\r\n\t{\r\n\r\n\t\tsuper({\r\n\t\t\tvertexShader: vert \t\t|| basic_vert,\r\n\t\t\tfragmentShader: frag \t|| basic_frag,\r\n\t\t\tuniforms: uniforms \t\t|| {\r\n\t\t\t\t_Color: {value: new THREE.Color(\"#FF0000\")}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n\r\n","class CameraManager {\r\n\tconstructor()\r\n\t{\r\n\t\tthis._current = undefined;\r\n\t}\r\n\r\n\tset current(camera)\r\n\t{\r\n\t\tthis._current = camera;\r\n\t}\r\n\r\n\tget current()\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n}\r\n\r\nconst camera_manager = new CameraManager();\r\nmodule.exports = camera_manager;\r\n","class Screen {\r\n\tconstructor()\r\n\t{\r\n\t\tthis.width = 1;\r\n\t\tthis.height = 1;\r\n\r\n\t\tthis.render_width = 1;\r\n\t\tthis.render_height = 1;\r\n\t\tthis.width_height = new THREE.Vector2(this.width, this.height);\r\n\r\n\r\n\t\tthis.dpr = 1;\r\n\t\tthis.pixel_size = new THREE.Vector2(1/this.width, 1/this.height);\r\n\t}\r\n\r\n\tupdate_size(width, height)\r\n\t{\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.pixel_size = new THREE.Vector2(1/this.width, 1/this.height) ;\r\n\r\n\t\tthis.width_height.x = width  ;\r\n\t\tthis.width_height.y = height ;\r\n\r\n\t\tthis.render_width = width * this.dpr;\r\n\t\tthis.render_height = height * this.dpr;\r\n\r\n\r\n\t}\r\n\r\n\tapply_pixel_density_v2(vector2)\r\n\t{\r\n\t\tvector2.multiplyScalar(1/window.devicePixelRatio);\r\n\r\n\t\treturn vector2;\r\n\t}\r\n\tapply_pixel_density(value)\r\n\t{\r\n\t\treturn value * (1/window.devicePixelRatio);\r\n\t}\r\n\r\n\r\n\tget_pixel_size()\r\n\t{\r\n\t\treturn this.pixel_size;\r\n\t}\r\n\r\n\tget aspect_ratio()\r\n\t{\r\n\t\treturn this.width/this.height;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default new Screen();\r\n","/*\r\n\r\n  A configuration class used as a singleton\r\n\r\n*/\r\n\r\nclass Configuration {\r\n  constructor(parameters = {}) {\r\n\r\n    this.dpr = window.devicePixelRatio ? window.devicePixelRatio : 1;\r\n    this.is_mobile = false;\r\n    this.is_ios = false;\r\n    this.is_ipad = false;\r\n\r\n    this.vertex_image_unit_supported = true;\r\n\r\n    this.min_zoom_distance = 3000;\r\n\r\n    this.max_zoom_distance = 40000;\r\n    this.max_zoom_distance_scale = 1.1;\r\n    this.zoom_speed = 0.1;\r\n\r\n\r\n\r\n    this.use_fxaa = false;\r\n    this.use_ssaa = true;\r\n\r\n\r\n\r\n    this.background_color = new THREE.Color(0.768,0.768,0.768);\r\n\r\n\r\n\r\n\r\n    //TOUCH\r\n    this.touch_sensitivity = 1.5;\r\n    this.zoom_sensitivity = 0.7;\r\n    this.spin_sensitivity = 2;\r\n    this.three_finger_rotation_speed = 3;\r\n    this.three_finger_allowed_x_rotation_offset = 30;\r\n    this.three_finger_allowed_y_rotation_offset = 20;\r\n\r\n\r\n    this.use_touch_gestures = false;\r\n\r\n\r\n    this.texture_float_supported = false;\r\n\r\n    this.use_ortographic = true;\r\n\r\n    this.hover_enabled = false;\r\n    this.rotation_enabled = false;\r\n\r\n    this.transparency_amount = 0.2;\r\n\r\n    this.show_debug_sphere_on_floor_selection = false;\r\n    this.show_debug_sphere_on_steps_in_floor = false;\r\n    this.display_cleanup_log = false;\r\n\r\n\r\n    this.navigation_speed_damping = 0.74;\r\n    this.navigation_speed = 200;\r\n    this.out_of_bounds_force = 1.5;\r\n    this.mouse_zoom_speed = 0.05;\r\n    this.touch_zoom_speed = 0.5;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  from_json(json)\r\n  {\r\n\r\n\r\n  }\r\n}\r\n\r\nconst configuration = new Configuration();\r\nmodule.exports = configuration;\r\n","class Time\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.___time = new THREE.Clock();\r\n\t\tthis.__delta_time = 0;\r\n\t\tthis.__elapsed_time = 0;\r\n\t\tthis.__allocated_time = new THREE.Vector2(0,0);\r\n\t}\r\n\r\n\r\n\tget delta_time()\r\n\t{\r\n\t\treturn this.__delta_time < 0.4? this.__delta_time : 0.016;\r\n\t}\r\n\tget elapsed_time()\r\n\t{\r\n\t\treturn this.__elapsed_time;\r\n\t}\r\n\tget shader_time()\r\n\t{\r\n\t\tthis.__allocated_time.x = this.delta_time;\r\n\t\tthis.__allocated_time.y = this.elapsed_time;\r\n\t\treturn  this.__allocated_time;\r\n\t}\r\n\r\n\t__update()\r\n\t{\r\n\t\tthis.__delta_time = this.___time.getDelta();\r\n\t\tthis.__elapsed_time = this.___time.getElapsedTime();\r\n\t}\r\n}\r\n\r\nconst time = new Time();\r\nmodule.exports = time;\r\n\r\n","export class KeyboardInput\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.ctrlz_pressed = false;\r\n\t\tthis.ctrlz_fired = false;\r\n\r\n\t\tthis.keys = [];\r\n\t}\r\n\r\n\tinit()\r\n\t{\r\n\t\tdocument.onkeydown \t= this.on_key_down.bind(this);\r\n\t\tdocument.onkeyup \t\t= this.on_key_up.bind(this);\r\n\t\tdocument.onkeypress = this.on_key_press.bind(this);\r\n\t}\r\n\r\n\ton_key_down(e)\r\n\t{\r\n\t\tif(e.keyCode == 90 && e.ctrlKey && !this.ctrlz_fired)\r\n    {\r\n    \tthis.ctrlz_pressed = true;\r\n    \tthis.ctrlz_fired = true;\r\n    } \r\n    if(e.key)\r\n    {\r\n    \tthis.press_key(e.key);\r\n    }\r\n\t}\r\n\ton_key_press(e)\r\n\t{\r\n\t\t\r\n\t}\r\n\ton_key_up(e)\r\n\t{\r\n\t\tthis.release_keys();\r\n\t}\r\n\r\n\tclear()\r\n\t{\r\n\t\tthis.ctrlz_pressed = false;\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tthis.keys[i].pressed = false;\r\n\t\t}\r\n\t}\r\n\r\n\trelease_keys()\r\n\t{\r\n\t\tthis.ctrlz_fired = false;\r\n\t\t\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tthis.keys[i].fired = false;\r\n\t\t\tthis.keys[i].down = false;\r\n\t\t}\r\n\t}\r\n\r\n\tpress_key(key)\r\n\t{\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key && !this.keys[i].fired)\r\n\t\t\t{\r\n\t\t\t\tthis.keys[i].pressed = true;\r\n\t\t\t\tthis.keys[i].down = true;\r\n\t\t\t\tthis.keys[i].fired = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tkey_is_pressed(key)\r\n\t{\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key)\r\n\t\t\t{\r\n\t\t\t\treturn this.keys[i].pressed;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tkey_is_down(key)\r\n\t{\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key)\r\n\t\t\t{\r\n\t\t\t\treturn this.keys[i].down;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tregister_key(key)\r\n\t{\r\n\t\tthis.keys.push(\r\n\t\t{\r\n\t\t\tkey_name: key,\r\n\t\t\tpressed: false,\r\n\t\t\tdown: false,\r\n\t\t\tup: false,\r\n\t\t\tfired: false\r\n\r\n\t\t});\r\n\t}\r\n\tunregister_key(key_name)\r\n\t{\r\n\t\tlet key = undefined;\r\n\t\tfor(let i=0; i< this.keys.length; i++)\r\n\t\t{\r\n\t\t\tif(this.keys[i].key_name === key_name)\r\n\t\t\t\tkey = this.keys[i];\r\n\t\t}\r\n\r\n\t\tlet index = this.keys.indexOf(key);\r\n    if (index > -1) {\r\n      this.keys.splice(index, 1);\r\n    }\r\n\t}\r\n\r\n}\r\n\r\nconst keyboard_input = new KeyboardInput();\r\nmodule.exports = keyboard_input;","import Screen from '/Screen';\r\nimport Configuration from '/Configuration';\r\nimport Time from '/Time';\r\nimport KeyboardInput from '/KeyboardInput';\r\n\r\nclass Input {\r\n\tconstructor() {\r\n\t\tthis.mouse_pos = new THREE.Vector2();\r\n\t\tthis.last_mouse_pos = new THREE.Vector2();\r\n\t\tthis.mouse_dir = new THREE.Vector2();\r\n\r\n\r\n\t\tthis.__clicked_time = 0;\r\n\t\tthis.__elapsed_time = 0;\r\n\t\tthis.__delta_time = 0;\r\n\r\n\t\tthis.is_mouse_down = false;\r\n\t\tthis.is_mouse_up = false;\r\n\r\n\t\tthis.rotation_angle = 0;\r\n\r\n\t\tthis._normalized_mouse_pos = new THREE.Vector2(0, 0);\r\n\r\n\t\tthis.left_mouse_button_down = false;\r\n\t\tthis.left_mouse_button_pressed = false;\r\n\t\tthis.left_mouse_button_released = false;\r\n\t\tthis.middle_mouse_button_down = false;\r\n\t\tthis.right_mouse_button_down = false;\r\n\t\tthis.right_mouse_button_pressed = false;\r\n\t\tthis.right_mouse_button_released = false;\r\n\r\n\t\tthis.mousewheel = 0;\r\n\r\n\t\tthis.previous_scale = 0;\r\n\t\tthis.previous_rotation = 0;\r\n\t\tthis.previous_rotation_dirty = true;\r\n\r\n\t\tthis.mouse_str = \"mouse\";\r\n\r\n\t\tthis.tmp_mouse_velocity = new THREE.Vector2();\r\n\t\tthis.bounding_client = new THREE.Vector2();\r\n\r\n\t\tthis.multitouch_active = false;\r\n\r\n\t\tthis.tapped = false;\r\n\t\tthis.initial_zoom_distance = 100;\r\n\t\tthis.zoom_center = new THREE.Vector2();\r\n\t\tthis.zoom_started = false;\r\n\t\tthis.touch_zoom = 1;\r\n\r\n\t\tthis.multi_touch_dir = new THREE.Vector2();\r\n\t\tthis.wheel_delta = 0;\r\n\r\n\t\tthis.mac = 'mac';\r\n\t\tthis.pinching_with_trackpad = false;\r\n\t\tthis.scrolling_with_trackpad = false;\r\n\t\tthis.scrolling_with_mouse = false;\r\n\r\n\t\tthis.double_click = false;\r\n\r\n\t\tthis.canvas = undefined;\r\n\r\n\t\t// Input 2.0\r\n\t\tthis.previous_pos_x = 0;\r\n\t\tthis.previous_pos_y = 0;\r\n\t}\r\n\r\n\tmouse_is_within_bounds(rect) {\r\n\t\trect = rect || this.canvas.getBoundingClientRect();\r\n\r\n\t\treturn this.mouse_pos.x > rect.left &&\r\n\t\t\tthis.mouse_pos.x < rect.left + rect.width &&\r\n\t\t\tthis.mouse_pos.y > rect.top &&\r\n\t\t\tthis.mouse_pos.y < rect.top + rect.height;\r\n\t}\r\n\r\n\tinit(container, canvas) {\r\n\t\tthis.canvas = canvas;\r\n\r\n\t\tlet region = new ZingTouch.Region(container, false, false);\r\n\t\tKeyboardInput.init();\r\n\r\n\t\tlet scope = this;\r\n\r\n\t\tregion.bind(container, 'tap', function (e) {\r\n\t\t\tscope.tapped = true;\r\n\t\t\tscope.set_mouse_pos(e);\r\n\r\n\t\t});\r\n\r\n\t\twindow.addEventListener('dblclick', this.on_double_click.bind(this));\r\n\r\n\t\tcontainer.addEventListener('mouseleave', this.on_focus_lost.bind(this));\r\n\r\n\t\tcontainer.addEventListener('mouseup', this.on_mouse_up.bind(this));\r\n\t\tcontainer.addEventListener('mousemove', this.on_mouse_move.bind(this));\r\n\r\n\t\tcontainer.addEventListener('touchmove', this.on_touch_move.bind(this), false);\r\n\t\tcontainer.addEventListener('touchend', this.on_touch_end.bind(this), false);\r\n\r\n\t\t// region.bind(container, 'pan', function(e){\r\n\t\t// \tscope.on_mouse_move(e);\r\n\t\t// \tconsole.log(\"PAN\");\r\n\t\t// });\r\n\t\tlet one_finger_pan = new ZingTouch.Pan({ numInputs: 1 });\r\n\t\tregion.register(\"one_finger_pan\", one_finger_pan);\r\n\t\tregion.bind(container, \"one_finger_pan\", (event) => {\r\n\t\t\tif (event.detail.data.length > 0) {\r\n\t\t\t\t// scope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\t// scope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t\t// scope.on_mouse_move_zingtouch(event);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\tlet two_fingers_pan = new ZingTouch.Pan({ numInputs: 2 });\r\n\t\tregion.register(\"two_fingers_pan\", two_fingers_pan);\r\n\t\tregion.bind(container, \"two_fingers_pan\", (event) => {\r\n\t\t\tif (event.detail.data.length > 0) {\r\n\r\n\t\t\t\t// scope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\t// scope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t\tscope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\tscope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet three_fingers_pan = new ZingTouch.Pan({ numInputs: 3 });\r\n\t\tregion.register(\"three_fingers_pan\", three_fingers_pan);\r\n\t\tregion.bind(container, \"three_fingers_pan\", (event) => {\r\n\t\t\tif (event.detail.data.length > 0) {\r\n\t\t\t\tscope.multi_touch_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t\tscope.multi_touch_dir.multiplyScalar(scope.__delta_time);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tregion.bind(container, 'distance', function (e) {\r\n\r\n\t\t\tif (!scope.zoom_started) {\r\n\t\t\t\tscope.zoom_started = true;\r\n\t\t\t\tscope.touch_zoom_delta = 0;\r\n\t\t\t\tscope.initial_zoom_distance = e.detail.distance;\r\n\t\t\t\tscope.last_zoom_distance = e.detail.distance;\r\n\r\n\t\t\t\tscope.zoom_center.set(e.detail.center.x, e.detail.center.y);\r\n\t\t\t\tscope.mouse_pos.set(e.detail.center.x, e.detail.center.y);\r\n\t\t\t}\r\n\t\t\tscope.touch_zoom_delta = e.detail.distance - scope.last_zoom_distance;\r\n\t\t\tscope.last_zoom_distance = e.detail.distance;\r\n\t\t\tscope.touch_zoom = 1;\r\n\t\t}, false);\r\n\r\n\t\tlet gesture = new ZingTouch.Gesture();\r\n\t\tgesture.end = (inputs, state, element) => { scope.on_gesture_end(inputs) }\r\n\t\tgesture.start = (inputs, state, element) => { scope.on_mouse_down(inputs) }\r\n\t\tregion.register('shortTap', gesture);\r\n\r\n\t\tregion.bind(container, 'shortTap', function (e) {\r\n\t\t});\r\n\r\n\t\twindow.addEventListener('wheel', this.on_mouse_wheel.bind(this))\r\n    container.addEventListener( 'contextmenu', (event)=>{event.preventDefault()}, false );\r\n\r\n\t\tcontainer.addEventListener(\"mousemove\", (event) => {\r\n\t\t\tthis.mouse_pos.x = event.clientX;\r\n\t\t\tthis.mouse_pos.y = event.clientY;\r\n\t\t\tthis.scrolling_with_mouse = false;\r\n\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t});\r\n\t}\r\n\r\n\tset_mouse_pos(ev) {\r\n\t\tthis.mouse_pos.x = ev.detail.events[0].clientX;\r\n\t\tthis.mouse_pos.y = ev.detail.events[0].clientY;\r\n\t}\r\n\r\n\tget normalized_mouse_pos() {\r\n\t\tthis._normalized_mouse_pos.x = (this.mouse_pos.x / Screen.width) * 2.0 - 1;\r\n\t\tthis._normalized_mouse_pos.y = -1 * ((this.mouse_pos.y / Screen.height) * 2.0 - 1);\r\n\t\treturn this._normalized_mouse_pos;\r\n\t}\r\n\r\n\tget NDC() {\r\n\t\treturn this.normalized_mouse_pos;\r\n\t}\r\n\r\n\tis_mac() {\r\n\t\treturn this.get_os() === this.mac;\r\n\t}\r\n\r\n\ton_double_click(event) {\r\n\t\tthis.double_click = true;\r\n\t}\r\n\r\n\ton_mouse_wheel(event) {\r\n\r\n\r\n\t\tthis.mouse_pos.x = event.clientX;\r\n\t\tthis.mouse_pos.y = event.clientY;\r\n\r\n\t\t// User is using a mac\r\n\t\tif (this.is_mac()) {\r\n\t\t\t// User is pinching\r\n\t\t\tif (event.ctrlKey) {\r\n\t\t\t\t// Negative values means pinch in.\r\n\t\t\t\t// Positive values means pinch out.\r\n\t\t\t\tconsole.log(\"Pinching with a touchpad\", event.deltaY)\r\n\t\t\t\tthis.pinching_with_trackpad = true;\r\n\t\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\t\tthis.scrolling_with_mouse = false;\r\n\t\t\t\t// User is scrolling\r\n\t\t\t} else {\r\n\t\t\t\t// User is using the touchpad\r\n\t\t\t\tif (this.is_int(event.deltaY)) {\r\n\t\t\t\t\t// Negative values means scroll up\r\n\t\t\t\t\t// Positive values means scroll down\r\n\t\t\t\t\t// console.log(\"Scrolling with a touchpad\", (event.deltaY))\r\n\t\t\t\t\t// 350 is aprox the maximum value of deltaY on touchpad scroll\r\n\t\t\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t\t\t\tthis.scrolling_with_trackpad = true;\r\n\t\t\t\t\tthis.scrolling_with_mouse = false;\r\n\r\n\t\t\t\t\tthis.wheel_delta = 1 - (event.deltaY / 350) * 2.0 - 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Negative values means scroll up\r\n\t\t\t\t\t// Positive values means scroll down\r\n\t\t\t\t\t// console.log(\"Scrolling with a mouse\", event.deltaY)\r\n\t\t\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\t\t\tthis.scrolling_with_mouse = true;\r\n\r\n\t\t\t\t\tthis.wheel_delta = event.deltaY / Math.abs(event.deltaY);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//probably windows\r\n\t\t\tthis.pinching_with_trackpad = false;\r\n\t\t\tthis.scrolling_with_trackpad = false;\r\n\t\t\tthis.scrolling_with_mouse = true;\r\n\r\n\t\t\tif (Math.abs(event.deltaY) < 0.0001)\r\n\t\t\t\tthis.wheel_delta = 0;\r\n\t\t\telse\r\n\t\t\t\tthis.wheel_delta = event.deltaY / Math.abs(event.deltaY);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\ton_mouse_down(inputs) {\r\n\t\tthis.mouse_pos.x = inputs[0].current.clientX;\r\n\t\tthis.mouse_pos.y = inputs[0].current.clientY;\r\n\r\n\t\tthis.multitouch_active = inputs.length > 1;\r\n\r\n\t\tthis.mouse_dir.x = 0;\r\n\t\tthis.mouse_dir.y = 0;\r\n\r\n\r\n\t\tthis.__clicked_time = this.__elapsed_time;\r\n\t\tthis.is_mouse_down = true;\r\n\t\tthis.is_mouse_up = false;\r\n\r\n\t\tswitch (inputs[0].current.originalEvent.which) {\r\n\t\t\tcase 1:\r\n\t\t\t\tthis.left_mouse_button_down = true;\r\n\t\t\t\tthis.left_mouse_button_pressed = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2: this.middle_mouse_button_down = true; break;\r\n\t\t\tcase 3:\r\n\t\t\t\tthis.right_mouse_button_down = true;\r\n\t\t\t\tthis.right_mouse_button_pressed = true;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: this.left_mouse_button_down = true; this.left_mouse_button_pressed = true; break;\r\n\t\t}\r\n\r\n\r\n\t\tthis.wheel_delta = 0;\r\n\t\tthis.previous_scale = 0;\r\n\t\tthis.previous_rotation = 0;\r\n\r\n\r\n\t}\r\n\r\n\tmouse_clicked() {\r\n\t\treturn this.tapped;\r\n\t}\r\n\r\n\ton_touch_move(e) {\r\n\t\tthis.on_mouse_move({ clientX: e.changedTouches[0].clientX, clientY: e.changedTouches[0].clientY})\r\n\t}\r\n\r\n\ton_touch_end(e) {\r\n\t\tthis.on_gesture_end([{ current: { originalEvent: e } }])\r\n\t}\r\n\r\n\ton_mouse_up(e) {\r\n\t\tthis.on_gesture_end([ { current: { originalEvent: e } } ])\r\n\t}\r\n\r\n\ton_gesture_end(inputs) {\r\n\t\tthis.multitouch_active = inputs ? (inputs.length > 1) : false;\r\n\t\tthis.is_mouse_up = true;\r\n\t\tthis.zoom_started = false;\r\n\t\tthis.touch_zoom = 1;\r\n\t\tthis.mouse_dir.x = 0;\r\n\t\tthis.mouse_dir.y = 0;\r\n\t\tthis.previous_scale = 0;\r\n\t\tthis.previous_rotation = 0;\r\n\t\tthis.wheel_delta = 0;\r\n\r\n\t\tthis.left_mouse_button_down = false;\r\n\t\tthis.middle_mouse_button_down = false;\r\n\t\tthis.right_mouse_button_down = false;\r\n\r\n\t\tif (inputs) {\r\n\t\t\tswitch (inputs[0].current.originalEvent.which) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.left_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.middle_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.right_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.left_mouse_button_released = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.is_mouse_down = false;\r\n\t\tthis.previous_rotation_dirty = true;\r\n\t\tthis.rotation_delta = 0;\r\n\t}\r\n\r\n\r\n\ton_focus_lost() {\r\n\t\tthis.on_gesture_end();\r\n\t\tthis.left_mouse_button_released = true;\r\n\t\tthis.middle_mouse_button_released = true;\r\n\t\tthis.right_mouse_button_released = true;\r\n\t\tthis.left_mouse_button_released = true;\r\n\r\n\t}\r\n\r\n\ttime_since_last_mouse_down() {\r\n\t\treturn this.__elapsed_time - this.__clicked_time;\r\n\t}\r\n\r\n\ton_mouse_move(event) {\r\n\t\tthis.mouse_pos.x = event.clientX;\r\n\t\tthis.mouse_pos.y = event.clientY;\r\n\r\n\t\tthis.mouse_dir.set(this.mouse_pos.x - this.previous_pos_x,\r\n\t\t\t\t\t\t\t\t\t\t\t this.mouse_pos.x - this.previous_pos_y);\r\n\r\n\t\tthis.mouse_dir.normalize();\r\n\r\n\t\tthis.previous_pos_x = this.mouse_pos.x;\r\n\t\tthis.previous_pos_y = this.mouse_pos.x;\r\n\t}\r\n\r\n\ton_mouse_move_zingtouch(event) {\r\n\t\tif (event.detail.data.length > 0) {\r\n\t\t\tthis.set_mouse_pos(event);\r\n\t\t\tthis.mouse_dir.set(event.detail.data[0].change.x, event.detail.data[0].change.y)\r\n\t\t\t// this.mouse_dir.x *=  Screen.height / Screen.width;\r\n\r\n\t\t\t// this.mouse_dir.multiplyScalar(this.__delta_time/window.devicePixelRatio);\r\n\t\t}\r\n\t}\r\n\r\n\tget_os() {\r\n\t\tvar userAgent = window.navigator.userAgent,\r\n\t\t\tplatform = window.navigator.platform,\r\n\t\t\tmacosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\r\n\t\t\twindowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\r\n\t\t\tiosPlatforms = ['iPhone', 'iPad', 'iPod'],\r\n\t\t\tos = null;\r\n\r\n\t\tif (macosPlatforms.indexOf(platform) !== -1) {\r\n\t\t\tos = 'mac';\r\n\t\t} else if (iosPlatforms.indexOf(platform) !== -1) {\r\n\t\t\tos = 'ios';\r\n\t\t} else if (windowsPlatforms.indexOf(platform) !== -1) {\r\n\t\t\tos = 'windows';\r\n\t\t} else if (/Android/.test(userAgent)) {\r\n\t\t\tos = 'android';\r\n\t\t} else if (!os && /Linux/.test(platform)) {\r\n\t\t\tos = 'linux';\r\n\t\t}\r\n\r\n\t\treturn os;\r\n\t}\r\n\r\n\tis_int(n) {\r\n\t\treturn n % 1 === 0;\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\tthis.__elapsed_time = Time.elapsed_time;\r\n\t\tthis.__delta_time = Time.delta_time;\r\n\t\tthis.is_mouse_up = false;\r\n\t\tthis.wheel_delta = 0;\r\n\t\tthis.rotation_delta = 0;\r\n\r\n\t\tthis.double_click = false;\r\n\r\n\r\n\t\tthis.tapped = false;\r\n\t\tthis.mouse_dir.multiplyScalar(0);\r\n\t\tthis.multi_touch_dir.multiplyScalar(0);\r\n\t\tthis.left_mouse_button_pressed = false;\r\n\t\tthis.left_mouse_button_released = false;\r\n\r\n\t\tthis.right_mouse_button_pressed = false;\r\n\t\tthis.right_mouse_button_released = false;\r\n\t\tKeyboardInput.clear();\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst INPUT = new Input();\r\nmodule.exports = INPUT;\r\n","export default class Sphere extends THREE.Mesh\r\n{\r\n\tconstructor(radius, color)\r\n\t{\r\n    color = color || \"#FF0000\";\r\n    radius = radius || 1;\r\n    let geometry = new THREE.SphereBufferGeometry( radius, 64, 64);\r\n    let material = new THREE.MeshBasicMaterial( {color: color} );\r\n\t\tsuper(geometry, material);\r\n\t}\r\n}","module.exports=\"#define GLSLIFY 1\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n  //gl_Position.zw -= 0.1;\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(_Color, 1.0);\\n}\";","import vert from '/editor/shaders/object_picker_vert';\r\nimport frag from '/editor/shaders/object_picker_frag';\r\nexport default class Mesh extends THREE.Mesh\r\n{\r\n\tconstructor(geometry, material)\r\n\t{\r\n\t\tsuper(geometry, material);\r\n\r\n\t\tthis._selectable_material = this.__get_selectable_material();\r\n\t\tthis.original_material = this.material;\r\n\t\tthis.stored_layers = this.layers.mask;\r\n\t}\r\n\r\n\t__get_selectable_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n\t\t\tuniforms: {\r\n\t\t\t\t_Color: {value: new THREE.Color()}\r\n\t\t\t},\r\n\t\t\tvertexShader: vert,\r\n      fragmentShader: frag\r\n\t\t});\r\n\t}\r\n\r\n\trestore_material()\r\n\t{\r\n\t\tthis.material = this.original_material;\r\n\t}\r\n\r\n\tstore_layer_state()\r\n\t{\r\n\t\tthis.stored_layers = this.layers.mask;\r\n\t}\r\n\trestore_layer_state()\r\n\t{\r\n\t\tthis.layers.mask = this.stored_layers;\r\n\t}\r\n\r\n\tget selectable_material()\r\n\t{\r\n\t\treturn this._selectable_material;\r\n\t}\r\n}\r\n","import Mesh from '/Mesh';\r\n\r\nexport default class Arrow extends Mesh\r\n{\r\n\tconstructor(color, length, dir)\r\n\t{\r\n\t\tcolor = color || \"#FF0000\";\r\n\t\tlength = length || 1;\r\n\r\n\t\tlet cone_height = 0.4;\r\n\t\tlet cylinder_height = length - cone_height;\r\n\t\tlet cylinder_geo = new THREE.CylinderBufferGeometry( 0.01, 0.01, cylinder_height, 32 );\r\n\t\tcylinder_geo.translate(0,cylinder_height/2,0);\r\n\t\tlet cone_geometry = new THREE.ConeBufferGeometry( 0.1, cone_height, 32 );\r\n\t\tcone_geometry.translate(0, cylinder_height+cone_height/2, 0);\r\n\t  let buffer_geometry = THREE.BufferGeometryUtils.mergeBufferGeometries([cylinder_geo, cone_geometry]);\r\n\t  buffer_geometry.rotateX(3.14/2);\r\n    let material = new THREE.MeshBasicMaterial( {color: color} );\r\n\t\tsuper(buffer_geometry, material);\r\n\r\n\t\tif(dir)\r\n\t\t\tthis.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,1), dir);\r\n\t}\r\n\r\n\tset dir(dir)\r\n\t{\r\n\t\tthis.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,1), dir);\r\n\t}\r\n\tset length(value)\r\n\t{\r\n\t\tthis.scale.z = value;\r\n\t}\r\n}\r\n","class SceneManager\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis._current = new THREE.Scene();\r\n\t\tthis._current.name = \"default_scene\";\r\n\r\n\t}\r\n\r\n\tadd_scene(name)\r\n\t{\r\n\r\n\t}\r\n\r\n\tget current()\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tset current(scene)\r\n\t{\r\n\t\tthis._current = scene;\r\n\t}\r\n}\r\n\r\nconst scene_manager = new SceneManager();\r\nmodule.exports = scene_manager;","export default class MathUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n\tstatic linear_map(value,\r\n             from_range_start_value,\r\n             from_range_end_value,\r\n             to_range_start_value,\r\n             to_range_end_value)\r\n  {\r\n      return ((value - from_range_start_value)/ (from_range_end_value - from_range_start_value)) * (to_range_end_value - to_range_start_value) + to_range_start_value;\r\n  }\r\n\r\n  static between(value, min, max)\r\n  {\r\n\t\treturn (value >= min && value <= max)\r\n\r\n  }\r\n\r\n  static rgb_to_hex(rgb) {\r\n    rgb.r = Math.round(rgb.r * 255).toString(16);\r\n    rgb.g = Math.round(rgb.g * 255).toString(16);\r\n    rgb.b = Math.round(rgb.b * 255).toString(16);\r\n\r\n    if (rgb.r.length == 1)\r\n      rgb.r = \"0\" + rgb.r;\r\n    if (rgb.g.length == 1)\r\n      rgb.g = \"0\" + rgb.g;\r\n    if (rgb.b.length == 1)\r\n      rgb.b = \"0\" + rgb.b;\r\n\r\n    return \"#\" + rgb.r + rgb.g + rgb.b;\r\n  }\r\n\r\n  static project_points_on_plane(points, plane)\r\n  {\r\n    let projected_point = new THREE.Vector3();\r\n    let points_on_plane = [];\r\n    for(let i=0; i< points.length; i++)\r\n    {\r\n      plane.projectPoint(points[i], projected_point);\r\n      points_on_plane.push(projected_point.clone());\r\n    }\r\n\r\n    return points_on_plane;\r\n  }\r\n\r\n  static matrix4_lerp(from,to,target, t)\r\n  {\r\n    for(let i=0; i< 16; i++)\r\n    {\r\n      target.elements[i] = THREE.Math.lerp(from.elements[i], to.elements[i], t);\r\n    }\r\n  }\r\n\r\n  static equals(x1, x2) {\r\n    return Math.abs(x1 - x2) < 0.000001\r\n  }\r\n}\r\n","import CameraManager from '/CameraManager';\r\nimport Input from '/Input';\r\nimport Sphere from '/primitives/Sphere';\r\nimport Arrow from '/primitives/Arrow';\r\nimport SceneManager from '/SceneManager';\r\nimport MathUtilities from '/utilities/MathUtilities';\r\nimport Screen from '/Screen';\r\n\r\nclass CameraUtilities\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.tmp_mat = new THREE.Matrix4();\r\n\t\tthis.tmp_vec = new THREE.Vector3(0,0,1);\r\n\t\tthis.tmp_vec2 = new THREE.Vector3(0,0,0);\r\n\t\tthis.plane = new THREE.Plane();\r\n\t\tthis.ray = new THREE.Ray();\r\n\r\n    this.tmp_size = new THREE.Vector3();\r\n    this.tmp_unproj = new THREE.Vector3();\r\n\t}\r\n\r\n  get_up_dir(camera) {\r\n    camera = camera || CameraManager.current;\r\n    this.tmp_vec.set(0, 1, 0);\r\n    this.tmp_vec.applyQuaternion(camera.quaternion);\r\n\r\n    return this.tmp_vec;\r\n  }\r\n\tget_forward_dir(camera)\r\n\t{\r\n    camera = camera || CameraManager.current;\r\n\t\tthis.tmp_vec.set(0,0,1);\r\n\t\tthis.tmp_vec.applyQuaternion(camera.quaternion);\r\n\r\n\t\treturn this.tmp_vec;\r\n\r\n\t}\r\n\tget_right_dir(camera)\r\n\t{\r\n    camera = camera || CameraManager.current;\r\n\t\tthis.tmp_vec.set(1,0,0);\r\n  \t\tthis.tmp_vec.applyQuaternion(camera.quaternion);\r\n  \t\treturn this.tmp_vec;\r\n\r\n\t}\r\n\r\n\tunproject_mouse_position(NDC, camera)\r\n  {\r\n    camera = camera || CameraManager.current;\r\n    let v_fov = (camera.fov/2) * Math.PI/180;\r\n    let h_fov = (2 * Math.atan(Math.tan(v_fov) * camera.aspect))/2;\r\n\r\n\r\n    let distV = Math.tan(v_fov) * camera.far;\r\n    let distH = Math.tan(h_fov) * camera.far;\r\n\r\n    this.tmp_vec.set(distH * NDC.x , distV * NDC.y, -camera.far).normalize();\r\n\r\n    return this.tmp_vec.applyQuaternion(camera.quaternion);\r\n  }\r\n\r\n  get_plane_intersection(plane_position, plane_normal, NDC, camera)\r\n  {\r\n    camera = camera || CameraManager.current;\r\n    NDC = NDC || Input.normalized_mouse_pos;\r\n\r\n\t\tthis.plane.setFromNormalAndCoplanarPoint(plane_normal || this.get_forward_dir(camera), plane_position);\r\n    if(camera.isPerspectiveCamera)\r\n    {\r\n      this.ray.set(camera.position, this.unproject_mouse_position(NDC, camera));\r\n    }\r\n    else\r\n    {\r\n      this.tmp_unproj.set(NDC.x, NDC.y, 1).unproject(camera);\r\n      this.ray.set(camera.position, this.tmp_unproj);\r\n    }\r\n\r\n    this.ray.intersectPlane(this.plane, this.tmp_vec2);\r\n    return this.tmp_vec2;\r\n  }\r\n\r\n\r\n\r\n\r\n  fit_points_on_camera(points, zoom_scale = 1)\r\n  {\r\n    let points_sphere = new THREE.Sphere().setFromPoints(points);\r\n    let world_space_center = points_sphere.center;\r\n    let camera_forward = this.get_forward_dir(CameraManager.current).clone();\r\n\r\n    let plane = new THREE.Plane().setFromNormalAndCoplanarPoint(camera_forward, world_space_center);\r\n\r\n\r\n\r\n    let points_on_plane = MathUtilities.project_points_on_plane(points, plane)\r\n\r\n    let projected_points_center = new THREE.Vector3();\r\n    let box =  new THREE.Box3().setFromPoints(points_on_plane);\r\n    box.getCenter(projected_points_center);\r\n\r\n\r\n    let up = new THREE.Vector3(0,1,0).applyQuaternion(CameraManager.current.quaternion)\r\n    let right = up.clone().cross(camera_forward).normalize();\r\n    let mat = new THREE.Matrix4().set(  right.x, up.x, camera_forward.x, world_space_center.x,\r\n                                        right.y, up.y, camera_forward.y, world_space_center.y,\r\n                                        right.z, up.z, camera_forward.z, world_space_center.z,\r\n                                              0,    0,                0,        1);\r\n\r\n    let inverse_mat = new THREE.Matrix4().getInverse(mat);\r\n    for(let i=0; i< points_on_plane.length; i++)\r\n    {\r\n      points_on_plane[i].applyMatrix4(inverse_mat);\r\n    }\r\n\r\n\r\n    let size = new THREE.Vector3();\r\n    box =  new THREE.Box3().setFromPoints(points_on_plane);\r\n    box.getSize(size);\r\n    size.multiplyScalar(zoom_scale);\r\n    let projected_center = new THREE.Vector3();\r\n    box.getCenter(projected_center);\r\n\r\n\r\n    return {\r\n      position: projected_points_center,\r\n      zoom: this.get_zoom_to_fit_rect(size.x/2, size.y/2)\r\n    }\r\n\r\n  }\r\n\r\n  get_zoom_to_fit_rect(width,height)\r\n  {\r\n    let v_fov = (CameraManager.current.fov/2) * Math.PI/180;\r\n    let h_fov = (2 * Math.atan(Math.tan(v_fov) * CameraManager.current.aspect))/2;\r\n\r\n    let distV = height / Math.tan(v_fov);\r\n    let distH = width / Math.tan(h_fov);\r\n\r\n    return Math.max(Math.abs(distH), Math.abs(distV));\r\n  }\r\n\r\n  get_zoom_to_fit_box(bb, camera)\r\n  {\r\n    if(camera.isOrthographicCamera)\r\n    {\r\n      bb.getSize(this.tmp_size);\r\n\r\n      let obj_x = this.tmp_size.x;\r\n      let obj_y = this.tmp_size.y;\r\n      let object_aspect = obj_x / obj_y;\r\n      if(Screen.aspect_ratio / object_aspect > 1)\r\n      {\r\n        return Screen.height/obj_y;\r\n      }\r\n      else\r\n      {\r\n        return Screen.width/obj_x;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      // return this.fit_points_on_camera([bb.min, bb.max], 1).zoom;\r\n      let size = new THREE.Vector3();\r\n      bb.getSize(size);\r\n      return this.get_zoom_to_fit_rect(size.x, size.y);\r\n\r\n    }\r\n  }\r\n\r\n  get_html_screen_pos(object, camera)\r\n  {\r\n    object.getWorldPosition(this.tmp_vec);\r\n    this.tmp_vec.project(camera);\r\n\r\n    this.tmp_vec.x = (this.tmp_vec.x * 0.5 + 0.5) * (Screen.width);\r\n    this.tmp_vec.y = (1-(this.tmp_vec.y * 0.5 + 0.5)) * Screen.height;\r\n    return this.tmp_vec;\r\n  }\r\n\r\n  update_projection(camera)\r\n  {\r\n    camera.left   = -Screen.width/2;\r\n    camera.right  = Screen.width/2;\r\n    camera.top    = Screen.height/2;\r\n    camera.bottom = -Screen.height/2;\r\n    camera.aspect = Screen.aspect_ratio;\r\n    camera.updateProjectionMatrix(true);\r\n  }\r\n}\r\n\r\nconst camera_utilities = new CameraUtilities();\r\nmodule.exports = camera_utilities;\r\n","class Capabilities\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.max_anisotropy = 0;\r\n\t\tthis.vertex_texture_sampler_available = false;\r\n\t\tthis.fp_textures_available = false;\r\n\t}\r\n}\r\n\r\nconst capabilities = new Capabilities();\r\nmodule.exports = capabilities;\r\n","export default class EasingFunctions\r\n{\r\n\tconstructor(){}\r\n\r\n\tstatic ease_out_sine(x) {\r\n\t\treturn Math.sin(x * 3.14 / 2);\r\n\t}\r\n\r\n\tstatic ease_in_out_cubic(x) {\r\n\t\treturn x < 0.5 ?\r\n\t\t\t4 * x * x * x :\r\n\t\t\t1 - Math.pow(-2 * x + 2, 3) / 2;\r\n\t}\r\n\r\n\tstatic ease_out_cubic (x) {\r\n\t\treturn 1 - Math.pow(1 - x, 3);\r\n\t}\r\n\r\n\tstatic ease_in_out_quint (x) {\r\n\t\treturn x < 0.5 ?\r\n\t\t\t16 * x * x * x * x * x :\r\n\t\t\t1 - Math.pow(-2 * x + 2, 5) / 2;\r\n\t}\r\n\r\n\tstatic ease_out_quint (x) {\r\n\t\treturn 1 - Math.pow(1 - x, 5);\r\n\t}\r\n\r\n\tstatic ease_in_out_circ (x) {\r\n\t\treturn x < 0.5 ?\r\n\t\t\t(1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 :\r\n\t\t\t(Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2;\r\n\t}\r\n\r\n\tstatic ease_out_quad (x) {\r\n\t\treturn 1 - (1 - x) * (1 - x);\r\n\t}\r\n\r\n}","class EventManager\r\n{\r\n\r\n    constructor()\r\n    {\r\n        this.queue = {};\r\n\r\n        this.zoom_changed_evt           = \"zoom_changed\";\r\n        this.store_clickd_evt           = \"store_clicked\";\r\n        this.point_selected_evt         = \"point_selected\";\r\n        this.config_changed             = \"config_changed\";\r\n\r\n        this.path_substep_completed     = \"path_substep_completed\";\r\n        this.path_completed             = \"path_completed\";\r\n        this.go_to_store_requested_evt  = \"go_to_store_requested\";\r\n\r\n        this.resource_loaded_evt        = \"resource_loaded\";\r\n        this.service_clicked_evt        = \"service_clicked\";\r\n        this.unit_pos_updated_evt       = \"unit_position_updated\";\r\n\r\n        this.floor_changed_evt          = \"floor_changed\";\r\n\r\n        this.on_enter_floor_navigation  = \"on_enter_floor_navigation\";\r\n        this.on_exit_floor_navigation   = \"on_exit_floor_navigation\";\r\n\r\n        this.on_enter_floor_selection   = \"on_enter_floor_selection\";\r\n        this.on_exit_floor_selection    = \"on_exit_floor_selection\";\r\n\r\n        this.on_enter_outside_navigation  = \"on_enter_outside_navigation\";\r\n        this.on_exit_outside_navigation   = \"on_exit_outside_navigation\";\r\n\r\n        this.step_selected_evt = \"step_selected\";\r\n\r\n\r\n        \r\n    }\r\n\r\n    fire(event, payload)\r\n    {\r\n        let queue = this.queue[event];\r\n\r\n        if (queue === undefined) {\r\n            return;\r\n        }\r\n        let i = queue.length;\r\n        while (i--) {\r\n            queue[i](payload);\r\n        }\r\n\r\n    }\r\n\r\n    on(event, callback)\r\n    {\r\n        if (typeof this.queue[event] === 'undefined') \r\n        {\r\n            this.queue[event] = [];\r\n        }\r\n\r\n        this.queue[event].push(callback);\r\n    }\r\n\r\n    fire_zoom_changed(zoom)\r\n    {\r\n        this.fire(this.zoom_changed_evt, zoom);\r\n    }\r\n    fire_store_selected(store_id)\r\n    {\r\n        this.fire(this.store_clickd_evt, store_id);\r\n    }\r\n    fire_point_selected(hit_data)\r\n    {\r\n        this.fire(this.point_selected_evt, hit_data);\r\n    }\r\n    fire_config_changed()\r\n    {\r\n        this.fire(this.config_changed);\r\n    }\r\n    fire_path_substep_completed(step_number)\r\n    {\r\n        this.fire(this.path_substep_completed, step_number);\r\n    }\r\n    fire_path_completed()\r\n    {\r\n        this.fire(this.path_completed);\r\n    }\r\n    fire_step_selected(step_index)\r\n    {\r\n        this.fire(this.step_selected_evt, step_index);\r\n    }\r\n\r\n    fire_go_to_store_requested(store_id)\r\n    {\r\n        this.fire(this.go_to_store_requested_evt, store_id);\r\n    }\r\n\r\n    fire_resource_loaded(resource)\r\n    {\r\n        this.fire(this.resource_loaded_evt, resource);\r\n    }\r\n\r\n    fire_service_clicked(service)\r\n    {\r\n        this.fire(this.service_clicked_evt, service);\r\n    }\r\n    fire_unit_position_updated(unit_data)\r\n    {\r\n        this.fire(this.unit_pos_updated_evt, unit_data);\r\n    }\r\n\r\n    fire_floor_switched(floor_id)\r\n    {\r\n        this.fire(this.floor_changed_evt, floor_id);\r\n    }\r\n\r\n    fire_on_enter_floor_navigation(state)\r\n    {\r\n        this.fire(this.on_enter_floor_navigation, state);\r\n    }\r\n\r\n    fire_on_exit_floor_navigation(state)\r\n    {\r\n        this.fire(this.on_exit_floor_navigation, state);\r\n    }\r\n\r\n    fire_on_enter_floor_selection(state)\r\n    {\r\n        this.fire(this.on_enter_floor_selection,state);\r\n    }\r\n\r\n    fire_on_exit_floor_selection(state)\r\n    {\r\n        this.fire(this.on_exit_floor_selection,state);\r\n    }\r\n    \r\n    fire_on_enter_outside_navigation(state)\r\n    {\r\n        this.fire(this.on_enter_outside_navigation,state);\r\n    }\r\n\r\n    fire_on_exit_outside_navigation(state)\r\n    {\r\n        this.fire(this.on_exit_outside_navigation,state);\r\n    }\r\n\r\n\r\n}\r\n\r\nconst event_manager = new EventManager();\r\nmodule.exports = event_manager;","\r\nexport default class AxisHelper extends THREE.Object3D {\r\n  constructor(scale = 1.0) {\r\n    super();\r\n\r\n    const blueAxisMat = new THREE.LineBasicMaterial({ color: 0x4444ff, depthFunc: THREE.AlwaysDepth });\r\n    const blueAxisGeo = new THREE.Geometry();\r\n    blueAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\r\n    blueAxisGeo.vertices.push(new THREE.Vector3(0, 0, -1000));\r\n    const blueAxisLine = new THREE.Line(blueAxisGeo, blueAxisMat);\r\n    blueAxisLine.renderOrder = 50000;\r\n\r\n    const greenAxisMat = new THREE.LineBasicMaterial({ color: 0x44ff44, depthFunc: THREE.AlwaysDepth });\r\n    const greenAxisGeo = new THREE.Geometry();\r\n    greenAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\r\n    greenAxisGeo.vertices.push(new THREE.Vector3(0, 1000, 0));\r\n    const greenAxisLine = new THREE.Line(greenAxisGeo, greenAxisMat);\r\n    greenAxisLine.renderOrder = 50000;\r\n\r\n    const redAxisMat = new THREE.LineBasicMaterial({ linewidth: 100, color: 0xff4444, depthFunc: THREE.AlwaysDepth });\r\n    const redAxisGeo = new THREE.Geometry();\r\n    redAxisGeo.vertices.push(new THREE.Vector3(0, 0, 0));\r\n    redAxisGeo.vertices.push(new THREE.Vector3(1000, 0, 0));\r\n    const redAxisLine = new THREE.Line(redAxisGeo, redAxisMat);\r\n    redAxisLine.renderOrder = 50000;\r\n    this.renderOrder = 100000;\r\n    this.add(blueAxisLine);\r\n    this.add(greenAxisLine);\r\n    this.add(redAxisLine);\r\n    this.scale.set(scale, scale, scale);\r\n\r\n  }\r\n\r\n  update() {\r\n  }\r\n\r\n  dispose() {\r\n\r\n  }\r\n}\r\n","export default class BaseRender\r\n{\r\n\tconstructor()\r\n\t{\r\n\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\ton_enter(context, renderer)\r\n\t{\r\n\r\n\t}\r\n\r\n\ton_exit(context, renderer)\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\tresize()\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n}\r\n"," \r\nexport default class RenderLayers {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  static get opaque()            { return 0; }\r\n  static get transparent()       { return 1; }\r\n  static get outline()       \t\t { return 2; }\r\n  static get selectable()\t\t\t\t { return 3; }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform sampler2D _Blur;\\nuniform vec2 _Screen;\\nvarying vec2 vUv;\\n\\nfloat aastep(float threshold, float value) {\\n  #ifdef GL_OES_standard_derivatives\\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\\n  #else\\n    return step(threshold, value);\\n  #endif  \\n}\\n\\nvoid main()\\n{\\n\\tvec2 pixel_size = 1.0/_Screen;\\n\\n\\tvec4 color = texture2D( _MainTex, vUv);\\n\\tfloat mask = 1.0 - color.a;\\n\\n\\tfloat blur = texture2D( _Blur, vUv).a;\\n\\n  // gl_FragColor = vec4(mask,mask,mask,0.0);\\n  // gl_FragColor = color;\\n\\n\\tgl_FragColor = vec4(mix(color.rgb, mix(color.rgb, vec3(1.,0.,0.),aastep(0.076, blur)), mask), 1.0);\\n}\\n\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform vec2 _Resolution;\\nuniform vec2 _SampleDir;\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n\\n\\tvec3 sum = vec3(0.,0.,0.);\\n\\tvec2 dir = (0.5/_Resolution) * _SampleDir;\\n\\tfloat _Distance = 2.0;\\n\\tsum += texture2D( _MainTex, vUv + dir * -4. * _Distance ).rgb * 0.0525;\\n\\tsum += texture2D( _MainTex, vUv + dir * -3. * _Distance ).rgb * 0.075;\\n\\tsum += texture2D( _MainTex, vUv + dir * -2. * _Distance ).rgb * 0.110;\\n\\tsum += texture2D( _MainTex, vUv + dir * -1. * _Distance ).rgb * 0.150;\\n\\tsum += texture2D( _MainTex, vUv + dir *  0. * _Distance ).rgb * 0.225;\\n\\tsum += texture2D( _MainTex, vUv + dir *  1. * _Distance ).rgb * 0.150;\\n\\tsum += texture2D( _MainTex, vUv + dir *  2. * _Distance ).rgb * 0.110;\\n\\tsum += texture2D( _MainTex, vUv + dir *  3. * _Distance ).rgb * 0.075;\\n\\tsum += texture2D( _MainTex, vUv + dir *  4. * _Distance ).rgb * 0.0525;\\n\\tgl_FragColor = vec4(sum, 1.0);\\n\\n}\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\n\\nvarying vec2 vUv;\\nvoid main()\\n{\\n\\tgl_FragColor = texture2D(_MainTex, vUv);\\n}\";","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\nvoid main()\\n{\\n\\tgl_Position = vec4(uv * 2.0 - 1.0, 1.0, 1.0);\\n\\tvUv = uv;\\n}\";","import Screen from '/Screen';\r\nimport RenderLayers from '/RenderLayers';\r\n\r\nimport compose_frag from '/shaders/box_blur/compose_frag';\r\nimport box_blur_frag from '/shaders/box_blur/box_blur_frag';\r\nimport copy_frag from '/shaders/copy/copy_frag';\r\nimport copy_vert from '/shaders/copy/copy_vert';\r\nimport background_frag from '/shaders/basic_color/basic_color_frag';\r\n\r\nexport default class OutlineRender\r\n{\r\n\r\n\tconstructor(webgl)\r\n\t{\r\n\t\tthis.main_rt \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\t\tthis.rt1\t\t \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\t\tthis.rt2\t\t \t\t\t\t= new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\r\n\r\n    this.compose_material \t\t= this.__get_compose_material();\r\n    this.copy_material \t\t\t\t= this.__get_copy_material();\r\n    this.box_blur_material \t\t= this.__get_box_blur_material();\r\n    this.background_material \t= this.__get_background_material();\r\n\r\n\t\tthis.copy_plane = new THREE.Mesh( new THREE.PlaneGeometry(1,1), this.copy_material );\r\n\t\tthis.copy_plane.frustumCulled = false;\r\n\t\tthis.copy_scene = new THREE.Scene();\r\n\t\tthis.copy_scene.add(this.copy_plane);\r\n\r\n\t}\r\n\r\n\tresize(w,h)\r\n\t{\r\n\t\tthis.main_rt.setSize(w,h);\r\n\t\tthis.rt1.setSize(w,h);\r\n\t\tthis.rt2.setSize(w,h);\r\n\t\tthis.box_blur_material.uniforms._Screen.value.set(w,h);\r\n\t\tthis.compose_material.uniforms._Screen.value.set(w,h);\r\n\t}\r\n\r\n\r\n\trender(webgl)\r\n\t{\r\n\t\twebgl.camera.updateMatrix();\r\n\t\twebgl.camera.updateMatrixWorld();\r\n\r\n\t\twebgl.camera.layers.enable(RenderLayers.opaque);\r\n\t\twebgl.camera.layers.enable(RenderLayers.transparent);\r\n\t\twebgl.camera.layers.disable(RenderLayers.outline);\r\n\r\n\t\t//render scene\r\n\t\twebgl._renderer.setClearColor(webgl.clear_color, 0);\r\n\t\twebgl._renderer.clearTarget(this.main_rt,true,true,true);\r\n\r\n\t\tthis.copy_scene.overrideMaterial = this.background_material;\r\n\t\tthis.background_material.uniforms._Color.value.set(webgl.clear_color.r, webgl.clear_color.g, webgl.clear_color.b, 0);\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.main_rt, false);\r\n\r\n\r\n\t\twebgl._renderer.render(webgl.scene, webgl.camera, this.main_rt, false);\r\n\r\n\r\n\r\n\r\n\t\t//horizontal blur\r\n\t\tthis.box_blur_material.uniforms._MainTex.value = this.main_rt.texture;\r\n\t\tthis.box_blur_material.uniforms._SampleDir.value.set(1,0);\r\n\r\n\t\tthis.copy_scene.overrideMaterial = this.box_blur_material;\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.rt1, false);\r\n\r\n\t\t//vertical blur\r\n\t\tthis.box_blur_material.uniforms._SampleDir.value.set(0,1);\r\n\t\tthis.box_blur_material.uniforms._MainTex.value = this.rt1.texture;\r\n\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, this.rt2, false);\r\n\r\n\r\n\t\t//compose\r\n\t\tthis.copy_scene.overrideMaterial = this.compose_material;\r\n\t\tthis.compose_material.uniforms._MainTex.value = this.main_rt.texture;\r\n\t\tthis.compose_material.uniforms._Blur.value = this.rt2.texture;\r\n\t\twebgl._renderer.render(this.copy_scene, webgl.camera, undefined, false);\r\n\t\tthis.copy_scene.overrideMaterial = undefined;\r\n\t}\r\n\r\n\t__get_copy_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _MainTex: \t\t\t{value : undefined}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: copy_frag,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n\t}\r\n\r\n\t__get_box_blur_material()\r\n\t{\r\n \t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _MainTex: \t\t\t{value : undefined},\r\n        _SampleDir: \t\t{value : new THREE.Vector2()},\r\n        _Screen: \t\t\t\t{value : new THREE.Vector2(Screen.width, Screen.height)}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: box_blur_frag,\r\n      depthTest: false,\r\n      depthWrite: false\r\n    });\r\n\t}\r\n\r\n\t__get_compose_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _MainTex: \t\t\t{value : undefined},\r\n        _Blur: \t\t\t\t\t{value : undefined},\r\n        _Screen: \t\t\t\t{value : new THREE.Vector2(Screen.width, Screen.height)}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: compose_frag,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      extensions: {\r\n      \tderivatives: true\r\n      }\r\n    });\r\n\t}\r\n\r\n\t__get_background_material()\r\n\t{\r\n\t\treturn new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _Color: \t\t\t\t{value : new THREE.Vector4(0,0,0,0)}\r\n      },\r\n      vertexShader: copy_vert,\r\n      fragmentShader: background_frag,\r\n      depthTest: true,\r\n      depthWrite: false\r\n\r\n    });\r\n\t}\r\n\r\n\ton_enter(webgl)\r\n\t{\r\n\t\twebgl._renderer.autoClear = false;\r\n\t}\r\n\r\n\ton_exit(webgl)\r\n\t{\r\n\t\twebgl._renderer.autoClear = true;\r\n\t}\r\n}\r\n","import vert from '/shaders/copy/copy_vert';\r\nimport frag from '/shaders/copy/copy_frag';\r\n\r\nexport default class BlitMaterial extends THREE.ShaderMaterial\r\n{\r\n\tconstructor(frag_shader, vert_shader, defines)\r\n\t{\r\n\t\tsuper({\r\n\t\t\tuniforms: {\r\n\t\t\t\t_MainTex: {value: null},\r\n        _Resolution:{value: new THREE.Vector2(0,0)}\r\n\t\t\t},\r\n\t\t\tdefines: defines || {},\r\n\t\t\tvertexShader: vert_shader || vert,\r\n\t\t\tfragmentShader: frag_shader || frag,\r\n\t\t\tdepthWrite: false,\r\n      blending: THREE.NoBlending,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      depthFunc: THREE.AlwaysDepth\r\n\t\t});\r\n\t}\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nuniform vec4 _DepthNormal;\\nvec2 EncodeFloatRG( float v )\\n{\\n    vec2 kEncodeMul = vec2(1.0, 255.0);\\n    float kEncodeBit = 1.0/255.0;\\n    vec2 enc = kEncodeMul * v;\\n    enc = fract (enc);\\n    enc.x -= enc.y * kEncodeBit;\\n    return enc;\\n}\\n\\nvec2 EncodeNormal (vec3 n)\\n{\\n    float scale = 1.7777;\\n    vec2 enc = n.xy / (n.z+1.0);\\n    enc /= scale;\\n    enc = enc*0.5+0.5;\\n    return enc;\\n}\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(EncodeFloatRG(_DepthNormal.x), EncodeNormal(normalize(_DepthNormal.yzw)));  \\n}\";","import BlitMaterial from '/materials/BlitMaterial';\r\nimport frag from '/shaders/clear/clear_depth_normal_frag';\r\n\r\nexport default class ClearDepthNormalMaterial extends BlitMaterial\r\n{\r\n\tconstructor(clear_depth, clear_normal)\r\n\t{\r\n\t\tsuper(frag);\r\n\t\tthis.uniforms._DepthNormal = {value: new THREE.Vector4(clear_depth, clear_normal.x, clear_normal.y, clear_normal.z)};\r\n\t}\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\nvarying vec3 v_pos;\\n\\nvoid main()\\n{\\n  vec3 pos = position;\\n  mat4 MVP = projectionMatrix * modelViewMatrix;\\n\\n  v_normal \\t= (modelViewMatrix * vec4(normal, 0.0)).xyz;\\n  v_pos \\t\\t= (modelViewMatrix * vec4( pos, 1.0 )).xyz;\\n\\n  gl_Position = MVP * vec4( pos, 1.0 );\\n}\";","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\nvarying vec3 v_pos;\\n\\nuniform float _FarPlane;\\n\\nvec2 EncodeFloatRG( float v )\\n{\\n    vec2 kEncodeMul = vec2(1.0, 255.0);\\n    float kEncodeBit = 1.0/255.0;\\n    vec2 enc = kEncodeMul * v;\\n    enc = fract (enc);\\n    enc.x -= enc.y * kEncodeBit;\\n    return enc;\\n}\\n\\nvec2 EncodeNormal (vec3 n)\\n{\\n    float scale = 1.7777;\\n    vec2 enc = n.xy / (n.z+1.0);\\n    enc /= scale;\\n    enc = enc*0.5+0.5;\\n    return enc;\\n}\\n\\nvoid main()\\n{\\n\\tgl_FragColor = vec4(EncodeFloatRG(length(v_pos.z)/_FarPlane), EncodeNormal(normalize(v_normal)));\\t\\n}\\n\\n\";","import vert from '/shaders/depth_normals/depth_normals_vert';\r\nimport frag from '/shaders/depth_normals/depth_normals_frag';\r\n\r\nexport default class DepthNormalMaterial extends THREE.ShaderMaterial\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper({\r\n      uniforms: {\r\n      \t_FarPlane: {value: 1}\r\n      },\r\n      vertexShader: vert,\r\n      fragmentShader: frag\r\n    });\r\n\t}\r\n\r\n\tset far_plane(value)\r\n\t{\r\n\t\tthis.uniforms._FarPlane.value = value;\r\n\t}\r\n\r\n}\r\n","import CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\n\r\nimport ClearDepthNormalMaterial from '/materials/ClearDepthNormalMaterial';\r\nimport DepthNormalMaterial from '/materials/DepthNormalMaterial';\r\n\r\nexport default class DepthAndNormalsRenderer\r\n{\r\n\tconstructor()\r\n\t{\r\n    this.RT = new THREE.WebGLRenderTarget(Screen.width, Screen.height);\r\n\r\n    this.clear_depth_normal_mat = new ClearDepthNormalMaterial(1, new THREE.Vector3(0,0,1));\r\n    this.depth_normal_material = new DepthNormalMaterial();\r\n\t}\r\n\r\n\r\n\trender(graphics)\r\n\t{\r\n\t\tthis.__resize_RT_if_necessary();\r\n\r\n\r\n    graphics.clear(this.RT, undefined, true,true)\r\n\r\n    graphics.blit_clear_with_material(this.RT, this.clear_depth_normal_mat);\r\n\r\n    this.depth_normal_material.far_plane = CameraManager.current.far;\r\n\r\n    graphics.render(undefined, undefined, this.RT, this.depth_normal_material);\r\n\r\n\t}\r\n\r\n  __resize_RT_if_necessary()\r\n  {\r\n    if(this.RT.width !== Screen.width || this.RT.height !== Screen.height)\r\n    {\r\n      this.RT.setSize(Screen.width, Screen.height);\r\n    }\r\n  }\r\n\r\n\tget render_target()\r\n\t{\r\n\t\treturn this.RT;\r\n\t}\r\n\r\n}\r\n","import BlitMaterial from '/materials/BlitMaterial';\r\n\r\nexport default class Blitter\r\n{\r\n\r\n  constructor(renderer)\r\n  {\r\n      this.renderer = renderer;\r\n      this._blit_scene = new THREE.Scene();\r\n      this._blit_material = new BlitMaterial();\r\n      this._blit_quad = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry( 1, 1 ),this._blit_material );\r\n      this._blit_scene.add( this._blit_quad );\r\n      this._blit_camera = new THREE.OrthographicCamera( -1, 1, 1, -1, -10000, 10000 );\r\n\r\n  }\r\n\r\n\r\n  blit(src, dst)\r\n  {\r\n    this._blit_quad.material = this._blit_material;\r\n    this._blit_quad.material.uniforms._MainTex.value = src.texture;\r\n    this._blit_quad.material.uniforms._Resolution.value.set(src.width, src.height);\r\n\r\n    this.renderer.setRenderTarget(dst === undefined? null : dst);\r\n\r\n    this.renderer.render( this._blit_scene,\r\n                          this._blit_camera);\r\n  }\r\n\r\n  blit_with_material(src, dst, mat)\r\n  {\r\n    this._blit_quad.material = mat;\r\n    this._blit_quad.material.uniforms._MainTex.value = src.texture;\r\n    this._blit_quad.material.uniforms._Resolution.value.set(src.width, src.height);\r\n\r\n    this.renderer.setRenderTarget(dst === undefined? null : dst);\r\n\r\n    this.renderer.render( this._blit_scene,\r\n                          this._blit_camera );\r\n  }\r\n\r\n  blit_clear_with_material(dst_RT, mat)\r\n  {\r\n    this._blit_quad.material = mat;\r\n\r\n    this.renderer.setRenderTarget(dst_RT === undefined? null : dst_RT);\r\n\r\n    this.renderer.render( this._blit_scene, this._blit_camera);\r\n  }\r\n\r\n}\r\n","import Configuration from           '/Configuration';\r\nimport BaseRender from   '/render_mode/BaseRender';\r\nimport OutlineRender from           '/render_mode/OutlineRender';\r\nimport Screen from '/Screen';\r\nimport CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport Capabilities from '/Capabilities';\r\nimport DepthAndNormalsRenderer from '/render_utilities/DepthAndNormalsRenderer';\r\nimport Blitter from '/render_utilities/Blitter';\r\n\r\nclass Graphics {\r\n\r\n\r\n  constructor() {\r\n    this._renderer = undefined;\r\n    this.blitter = undefined;\r\n    this.canvas = undefined;\r\n    this.no_render = undefined;\r\n    this.current_render_mode = undefined;\r\n    this.generateDepthNormalTexture = false;\r\n    this.depth_and_normals_renderer = undefined;\r\n  }\r\n\r\n  init(canvas, msaa = true) {\r\n    this._renderer = new THREE.WebGLRenderer({\r\n      antialias: msaa,\r\n      preserveDrawingBuffer: true,\r\n      alpha: true,\r\n      canvas: canvas\r\n    });\r\n\r\n    this._renderer.autoClear = false;\r\n\r\n    this._renderer.setPixelRatio(1);\r\n\r\n    Screen.dpr = window.devicePixelRatio;\r\n\r\n\t\tthis._renderer.extensions.get( 'ANGLE_instanced_arrays' )\r\n\r\n    this.blitter = new Blitter(this._renderer);\r\n\r\n    this.canvas = this._renderer.domElement;\r\n\r\n    this.no_render = new BaseRender();\r\n\r\n    this.current_render_mode = this.no_render;\r\n\r\n    Capabilities.max_anisotropy = this._renderer.capabilities.getMaxAnisotropy();\r\n    Capabilities.vertex_texture_sampler_available = this._renderer.capabilities.maxVertexTextures > 0;\r\n    Capabilities.fp_textures_available = this._renderer.capabilities.floatVertexTextures;\r\n\r\n    this.generateDepthNormalTexture = false;\r\n\r\n    this.depth_and_normals_renderer = new DepthAndNormalsRenderer();\r\n\r\n  }\r\n\r\n  get dom_element()\r\n  {\r\n    return this._renderer.domElement;\r\n  }\r\n\r\n  get depth_normals_RT()\r\n  {\r\n    return this.depth_and_normals_renderer.render_target;\r\n  }\r\n\r\n\r\n  set_state(new_state)\r\n  {\r\n    console.log(\"VIEWAPI - map render mode switch to: \" + new_state.constructor.name);\r\n\r\n    this.current_render_mode.on_exit(this, this._renderer);\r\n    this.current_render_mode = new_state;\r\n    this.current_render_mode.on_enter(this, this._renderer);\r\n  }\r\n\r\n  update() {\r\n    this.check_for_resize();\r\n\r\n    if(this.generateDepthNormalTexture)\r\n    {\r\n      this.depth_and_normals_renderer.render(this);\r\n    }\r\n\r\n    if(CameraManager.current)\r\n    {\r\n      CameraManager.current.aspect = Screen.aspect_ratio;\r\n\r\n      CameraManager.current.updateProjectionMatrix();\r\n\r\n      CameraManager.current.updateMatrix();\r\n      CameraManager.current.updateMatrixWorld(true);\r\n      this.current_render_mode.render();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render(scene, camera, RT, override_mat)\r\n  {\r\n    this.__apply_override_material(scene, override_mat);\r\n\r\n    this._renderer.setRenderTarget(RT === undefined? null : RT);\r\n    this._renderer.render(scene  || SceneManager.current,\r\n                          camera || CameraManager.current);\r\n\r\n    this.__apply_override_material(scene, undefined);\r\n\r\n\r\n  }\r\n\r\n  __apply_override_material(scene, mat)\r\n  {\r\n    if(scene)\r\n      scene.overrideMaterial = mat;\r\n    else\r\n      SceneManager.current.overrideMaterial = mat;\r\n  }\r\n\r\n  readback_RT(RT, buffer)\r\n  {\r\n    this._renderer.readRenderTargetPixels( RT, 0, 0, RT.width, RT.height, buffer);\r\n  }\r\n\r\n  clear(RT, camera, clear_depth, clear_stencil)\r\n  {\r\n    this._renderer.setRenderTarget(RT === undefined? null : RT);\r\n\r\n    if(camera)\r\n    {\r\n      this._renderer.setClearColor(camera.clear_color, camera.clear_alpha);\r\n    }\r\n\r\n    this._renderer.clear( camera?         true : false, // clear color\r\n                          clear_depth?    true : false,\r\n                          clear_stencil?  true : false);\r\n  }\r\n\r\n  check_for_resize()\r\n  {\r\n    let current_width = this.canvas.clientWidth;\r\n    let current_height = this.canvas.clientHeight;\r\n\r\n    if (this.canvas.width !== Screen.render_width ||\r\n        this.canvas.height !== Screen.render_height ||\r\n\r\n        current_width !== Screen.width ||\r\n        current_height !== Screen.height)\r\n    {\r\n      Screen.update_size(current_width, current_height);\r\n\r\n      this._renderer.setSize(Screen.render_width, Screen.render_height, false);\r\n      this.current_render_mode.resize(Screen.render_width, Screen.render_height);\r\n    }\r\n  }\r\n\r\n  on_resize() {\r\n    console.error(\"Graphics.on_resize call no longer needed.\")\r\n  }\r\n\r\n\r\n  blit(src_RT, dst_RT, mat)\r\n  {\r\n    if(mat)\r\n      this.blitter.blit_with_material(src_RT, dst_RT, mat);\r\n    else\r\n      this.blitter.blit(src_RT, dst_RT);\r\n  }\r\n\r\n  blit_clear_with_material(dst_RT, mat)\r\n  {\r\n    this.blitter.blit_clear_with_material(dst_RT, mat);\r\n  }\r\n\r\n\r\n  take_screenshot(blob_callback)\r\n  {\r\n\r\n    const ctx = this;\r\n\r\n\r\n    let old_width = Screen.width;\r\n    let old_height = Screen.height;\r\n\r\n    let new_width = 4096;\r\n    let new_height = 4096;\r\n\r\n    let tile_width = 1024;\r\n    let tile_height = 1024;\r\n\r\n    let divisions_x = parseInt(Math.ceil(new_width / tile_width));\r\n    let divisions_y = parseInt(Math.ceil(new_height / tile_height));\r\n\r\n    Screen.update_size(tile_width, tile_height);\r\n\r\n    this._renderer.setPixelRatio(1);\r\n\r\n    this._renderer.setSize(tile_width ,tile_height, false);\r\n\r\n    this.ctx_2D.canvas.width  = new_width;\r\n    this.ctx_2D.canvas.height = new_height;\r\n\r\n    CameraManager.current.aspect = Screen.aspect_ratio;\r\n    CameraManager.current.updateMatrix();\r\n    CameraManager.current.updateMatrixWorld(true);\r\n\r\n    for(let x = 0; x < divisions_x; x++)\r\n    {\r\n      for(let y = 0; y < divisions_y; y++)\r\n      {\r\n\r\n        CameraManager.current.setViewOffset( new_width,             new_height,\r\n                                             Screen.width*x,         Screen.height*y,\r\n                                             Screen.width,            Screen.height);\r\n        this.current_render_mode.render();\r\n\r\n        this.ctx_2D.drawImage(this._renderer.domElement, Screen.width*x, Screen.height*y);\r\n      }\r\n    }\r\n\r\n    // transform the result canvas into a blob\r\n    // from them the callback turns into a ULR and download it\r\n    this.ctx_2D.canvas.toBlob(blob_callback,\"image/png;base64;\");\r\n\r\n    CameraManager.current.clearViewOffset();\r\n    Screen.update_size(old_width,old_height);\r\n    this._renderer.setPixelRatio(window.devicePixelRatio);\r\n    this._renderer.setSize(old_width,old_height, false);\r\n\r\n    CameraManager.current.aspect = Screen.aspect_ratio;\r\n    CameraManager.current.updateMatrix();\r\n    CameraManager.current.updateMatrixWorld(true);\r\n\r\n  }\r\n\r\n  download_screenshot (blob) {\r\n    console.log(\"el blob\", blob);\r\n    let link = document.createElement('a');\r\n    link.download = \"Snapshot.png\";\r\n\r\n    link.href = URL.createObjectURL(blob);\r\n    link.click()\r\n\r\n    link.onclick = function() {\r\n      requestAnimationFrame(function() {\r\n        URL.revokeObjectURL(a.href);\r\n      });\r\n      a.removeAttribute('href')\r\n    };\r\n\r\n  }\r\n\r\n}\r\n\r\nconst graphics = new Graphics();\r\nmodule.exports = graphics;\r\n\r\n","import Mesh from '/Mesh';\r\n\r\nexport default class Cube extends Mesh\r\n{\r\n\tconstructor(size, segments, color)\r\n\t{\r\n\t\tsize \t\t\t= size || new THREE.Vector3(1,1,1);\r\n\t\tsegments \t= segments || new THREE.Vector3(1,1,1);\r\n    color \t\t= color || 0xff0000;\r\n    let geometry = new THREE.BoxGeometry( size.x, size.y, size.z, segments.x, segments.y, segments.z);\r\n    let material = new THREE.MeshBasicMaterial( {color: color} );\r\n\t\tsuper(geometry, material);\r\n\t}\r\n}\r\n","import AxisHelper from '/components/AxisHelper';\r\nimport basic_color_vert from '/shaders/basic_color/basic_color_vert';\r\nimport basic_color_frag from '/shaders/basic_color/basic_color_frag';\r\nimport SceneManager from '/SceneManager';\r\nimport Graphics from '/Graphics';\r\nimport Cube from '/primitives/Cube';\r\nimport Sphere from '/primitives/Sphere';\r\n\r\nclass Debug {\r\n  constructor() {\r\n    this.Vector3_one = new THREE.Vector3(1,1,1);\r\n    this.Vector3_zero = new THREE.Vector3(0,0,0);\r\n    this.canvas_renderer = undefined;\r\n\r\n    this.rt_debug = undefined;\r\n  }\r\n\r\n  init(webgl)\r\n  {\r\n    this.webgl = webgl;\r\n\r\n    this.ctx = undefined;\r\n\r\n    // var cln = webgl.dom.cloneNode(false);\r\n    // cln.id = \"canvas_debug\";\r\n    // $(cln).css(\"position\", \"absolute\");\r\n    // webgl.dom.parentElement.insertBefore(cln, webgl.dom);\r\n    // this.ctx = cln.getContext('2d');\r\n\r\n    // this.ctx.clearRect(0, 0, cln.width, cln.height);\r\n    // this.ctx.fillStyle =  \"rgba(255, 0, 0, 1)\";\r\n\r\n  }\r\n\r\n  draw_axis()\r\n  {\r\n    let axis = new AxisHelper();\r\n    SceneManager.current.add(axis);\r\n    return axis;\r\n  }\r\n\r\n  set_debug_RT(RT)\r\n  {\r\n    this.rt_debug = RT;\r\n  }\r\n\r\n  draw_rectangle(position_2d, width, height, color)\r\n  {\r\n    width  = width || 100;\r\n    height = height || 100;\r\n    this.ctx.fillStyle =  color || \"rgba(255, 0, 0, 1)\";\r\n    this.ctx.fillRect(position_2d.x - width/2,\r\n                      (this.ctx.canvas.height - position_2d.y) - height/2,width,height);\r\n\r\n  }\r\n\r\n  clear()\r\n  {\r\n    if(this.ctx)\r\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n  }\r\n\r\n  draw_line_2D(from, to, color)\r\n  {\r\n    this.ctx.strokeStyle =  color ||\"rgba(255, 0, 0, 1)\";\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(from.x, from.y);\r\n    this.ctx.lineTo(to.x, to.y);\r\n    this.ctx.closePath();\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  draw_line(points, color)\r\n  {\r\n    var material = new THREE.LineBasicMaterial({\r\n      color: color\r\n    });\r\n\r\n    var geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n\r\n    var line = new THREE.Line(geometry, material);\r\n    SceneManager.current.add(line);\r\n    return line;\r\n  }\r\n  draw_cube(pos, size, color)\r\n  {\r\n    size = size || 1;\r\n    color = color || 0xff0000;\r\n    pos = pos || new THREE.Vector3();\r\n\r\n    var cube = new Cube(new THREE.Vector3(size, size, size), undefined, color );\r\n    cube.position.copy(pos);\r\n    SceneManager.current.add( cube );\r\n    return cube;\r\n  }\r\n  draw_oriented_cube(from, to, height = 1, color = \"#FF0000\", depth = 0.1)\r\n  {\r\n  \tlet size = from.distanceTo(to);\r\n    let cube = new Cube(new THREE.Vector3(depth, height, size), undefined, color );\r\n\r\n  \tlet center = to.clone().sub(from).multiplyScalar(0.5);\r\n\t\tlet forward_dir = center.clone().normalize();\r\n\t\tcenter.add(from);\r\n\r\n\t\tcube.position.copy(center);\r\n\r\n\r\n\t\tlet up = new THREE.Vector3(0,1,0);\r\n  \tlet forward = forward_dir.clone();\r\n  \tlet right = forward.clone().cross(up);\r\n\r\n  \t// cube.quaternion.setFromRotationMatrix(new THREE.Matrix4().makeBasis(right,up,forward));\r\n  \tcube.quaternion.setFromUnitVectors(new THREE.Vector3(0,0,-1), forward_dir);\r\n\r\n    SceneManager.current.add( cube );\r\n    return cube;\r\n  }\r\n  draw_plane(width, height, color)\r\n  {\r\n    var geometry = new THREE.PlaneGeometry( width, height );\r\n    let material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _Color: {value : new THREE.Vector4(0,1,0, 0.2)},\r\n      },\r\n      vertexShader: basic_color_vert,\r\n      fragmentShader: basic_color_frag,\r\n      transparent: true,\r\n      depthWrite: false\r\n    });\r\n\r\n    var plane = new THREE.Mesh( geometry, material );\r\n    plane.renderOrder = -10000\r\n    SceneManager.current.add(plane);\r\n    return plane;\r\n  }\r\n  draw_empty_cube(pos, size,color)\r\n  {\r\n    size = size || 1;\r\n    color = color || 0xff0000;\r\n\r\n    let box = new THREE.Box3().setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(size, size, size));\r\n    let helper = new THREE.Box3Helper( box, color );\r\n    helper.position.copy(pos || new THREE.Vector3());\r\n    return helper;\r\n  }\r\n  draw_sphere(pos, size, color)\r\n  {\r\n    size = size || 1;\r\n    color = color || 0xff0000;\r\n    pos = pos || new THREE.Vector3();\r\n\r\n    var sphere = new Sphere(size, color );\r\n    sphere.position.copy(pos);\r\n    SceneManager.current.add( sphere );\r\n    return sphere;\r\n  }\r\n\r\n  draw_point_array(input_points, open = false, color = 0xff0000 )\r\n  {\r\n    let catmull = new THREE.CatmullRomCurve3(input_points, open)\r\n    catmull.updateArcLengths();\r\n    let points = catmull.getSpacedPoints(200);\r\n    let line_helper = this.draw_line(points, 0x00ff00);\r\n    // line_helper.position.y = 1.5;\r\n    return line_helper;\r\n  }\r\n  draw_sphere_helper(sphere, color)\r\n  {\r\n    color = color || 0xff0000;\r\n    var geometry = new THREE.SphereGeometry( sphere.radius, 32, 32 );\r\n    var material = new THREE.MeshBasicMaterial( {color: color} );\r\n    var sphere_mesh = new THREE.Mesh( geometry, material );\r\n    sphere_mesh.position.copy(sphere.center);\r\n    SceneManager.current.add(sphere_mesh);\r\n    return sphere_mesh;\r\n  }\r\n\r\n  draw_math_sphere(sphere)\r\n  {\r\n    var geometry = new THREE.SphereGeometry( sphere.radius, 32, 32 );\r\n    let material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _Color: {value : new THREE.Vector4(1,0,0, 0.2)},\r\n      },\r\n      vertexShader: basic_color_vert,\r\n      fragmentShader: basic_color_frag,\r\n      transparent: true\r\n    });\r\n    // var material = new THREE.MeshBasicMaterial( {color: 0xff0000, transparent = true} );\r\n    var sphere1 = new THREE.Mesh( geometry, material );\r\n    sphere1.position.copy(sphere.center);\r\n    SceneManager.current.add(sphere1)\r\n  }\r\n\r\n  draw_bounding_box(bb)\r\n  {\r\n    var helper = new THREE.Box3Helper( bb, 0xffff00 );\r\n    SceneManager.current.add( helper );\r\n  }\r\n\r\n  draw_curve(curve, options)\r\n  {\r\n    let offset = new THREE.Vector3(0,0, 0);\r\n    if(options)\r\n      offset.y = options.offset || 0;\r\n\r\n    for(let i=0; i< curve.length-1; i++)\r\n    {\r\n      this.draw_line(curve[i].clone().add(offset), curve[i+1].clone().add(offset));\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst DEBUG = new Debug();\r\nmodule.exports = DEBUG;\r\n","import CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\nimport BaseRender from '/render_mode/BaseRender';\r\nimport Graphics from '/Graphics';\r\n\r\nexport default class NormalRender extends BaseRender\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\r\n\trender()\r\n\t{\r\n\t\tGraphics.clear(undefined, CameraManager.current, true, true);\r\n\r\n\t\tGraphics.render(SceneManager.current, CameraManager.current);\r\n\t}\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex; //albedo\\nuniform sampler2D _NormalDepthRT;\\nuniform mat4 _InverseProjMatrix;\\nuniform vec2 _Resolution;\\nvarying vec2 vUv;\\nvarying vec4 vRay;\\n\\nvec3 decode_normal (vec4 enc)\\n{\\n    float scale = 1.7777;\\n    vec3 nn =\\n        enc.xyz*vec3(2.0*scale,2.0*scale,0.0) +\\n        vec3(-scale,-scale,1.0);\\n    float g = 2.0 / dot(nn.xyz,nn.xyz);\\n    vec3 n;\\n    n.xy = g*nn.xy;\\n    n.z = g-1.0;\\n    return n;\\n}\\n\\nfloat DecodeFloatRG( vec2 enc )\\n{\\n    vec2 kDecodeDot = vec2(1.0, 1.0/255.0);\\n    return dot( enc, kDecodeDot );\\n}\\n\\nvec3 DecodeNormal(vec2 uv)\\n{\\n  vec2 encoded_normal = texture2D(_NormalDepthRT, uv).zw;\\n  vec3 normalValue = normalize(decode_normal(vec4(encoded_normal, 0., 0.)));\\n  return normalize(normalValue);\\n}\\nvec3 DecodeViewPos(vec2 uv)\\n{\\n  vec2 depth = texture2D(_NormalDepthRT, uv).xy;\\n  vec4 inv_proj = _InverseProjMatrix * vec4(vUv * 2.0 - 1.0, 1.0, 1.0);\\n  return DecodeFloatRG(depth) * (vRay.xyz/vRay.w);\\n}\\n\\nvoid main()\\n{\\n\\n    vec3 fragPos   = DecodeViewPos(vUv);\\n    vec3 normal    = DecodeNormal(vUv);\\n\\n    vec3 dir_to_light = normalize(fragPos) * -1.0;\\n\\n    float diffuse = dot(normal, dir_to_light);\\n\\n    gl_FragColor = vec4(diffuse, diffuse, diffuse, 1.0);\\n}\\n\";","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec4 vRay;\\n\\nuniform mat4 _InverseProjMatrix;\\n\\nvoid main()\\n{\\n\\tgl_Position = vec4(uv * 2.0 - 1.0, 1.0, 1.0);\\n\\tvRay = _InverseProjMatrix * vec4(uv * 2.0 - 1.0, 1.0, 1.0);\\n\\tvUv = uv;\\n}\\n\";","import BlitMaterial from '/materials/BlitMaterial';\r\nimport frag from '/shaders/deferred/deferred_compose.frag';\r\nimport vert from '/shaders/deferred/blit_copy.vert';\r\n\r\nexport default class DeferredRendererComposeMaterial extends BlitMaterial {\r\n    constructor() {\r\n        super(frag, vert);\r\n\r\n        this.uniforms._NormalDepthRT = { value: undefined }\r\n        this.uniforms._AlbedoRT = {value: undefined}\r\n        this.uniforms._InverseProjMatrix = {value: new THREE.Matrix4()};\r\n\r\n    }\r\n\r\n    set_normal_depth_rt(rt)\r\n    {\r\n        this.uniforms._NormalDepthRT.value = rt.texture;\r\n    }\r\n    set_albedo_rt(tex) {\r\n        this.uniforms._AlbedoRT.value = tex;\r\n    }\r\n\r\n    set_proj_matrix(mat4)\r\n    {\r\n        this.uniforms._InverseProjMatrix.value.getInverse(mat4);\r\n    }\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec4 vProjPos;\\nvarying vec3 vCenter;\\n\\nvoid main()\\n{\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\n    vProjPos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\tvUv = uv;\\n    vCenter = vec3(modelMatrix[3][0],modelMatrix[3][1],modelMatrix[3][2]);\\n    vCenter = (viewMatrix * vec4(vCenter, 1.0)).xyz;\\n}\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _AlbedoTex; //albedo\\nuniform sampler2D _NormalDepthTex;\\nuniform mat4 _InverseProjMatrix;\\nvarying vec2 vUv;\\nvarying vec4 vProjPos;\\nvarying vec3 vCenter;\\n\\nuniform float _Intensity;\\n\\nvec3 decode_normal (vec4 enc)\\n{\\n    float scale = 1.7777;\\n    vec3 nn =\\n        enc.xyz*vec3(2.0*scale,2.0*scale,0.0) +\\n        vec3(-scale,-scale,1.0);\\n    float g = 2.0 / dot(nn.xyz,nn.xyz);\\n    vec3 n;\\n    n.xy = g*nn.xy;\\n    n.z = g-1.0;\\n    return n;\\n}\\n\\nfloat DecodeFloatRG( vec2 enc )\\n{\\n    vec2 kDecodeDot = vec2(1.0, 1.0/255.0);\\n    return dot( enc, kDecodeDot );\\n}\\n\\nvec3 DecodeNormal(vec2 uv)\\n{\\n  vec2 encoded_normal = texture2D(_NormalDepthTex, uv).zw;\\n  vec3 normalValue = normalize(decode_normal(vec4(encoded_normal, 0., 0.)));\\n  return normalize(normalValue);\\n}\\nvec3 DecodeViewPos(vec2 uv, vec4 ray)\\n{\\n  vec2 depth = texture2D(_NormalDepthTex, uv).xy;\\n  vec4 inv_proj = _InverseProjMatrix * vec4(uv * 2.0 - 1.0, 1.0, 1.0);\\n  return DecodeFloatRG(depth) * (ray.xyz/ray.w);\\n}\\n\\nfloat saturate(float x)\\n{\\n    return clamp(x, 0.0, 1.0);\\n}\\n\\nvoid main()\\n{\\n    vec2 uv = (vProjPos.xy/vProjPos.w)*0.5+vec2(0.5);\\n\\tvec4 ray = _InverseProjMatrix * vec4(uv * 2.0 - 1.0, 1.0, 1.0);\\n\\n    vec3 fragPos   = DecodeViewPos(uv, ray);\\n    vec3 normal    = DecodeNormal(uv);\\n    vec3 albedo    = texture2D(_AlbedoTex, uv).rgb;\\n\\n    vec3 dir_to_light = normalize(vCenter - fragPos);\\n    float diffuse = saturate(dot(normal, dir_to_light));\\n    float attenuation = _Intensity/pow(length(vCenter - fragPos), 2.0);\\n    gl_FragColor = vec4(albedo * diffuse * attenuation, 1.0);\\n}\\n\";","import vert from '/shaders/deferred/point_light.vert';\r\nimport frag from '/shaders/deferred/point_light.frag';\r\nimport BaseShaderMaterial from '/materials/BaseShaderMaterial';\r\n\r\nexport default class DeferredPointLightMaterial extends BaseShaderMaterial\r\n{\r\n    constructor(intensity = 1)\r\n    {\r\n        super(vert,frag,{\r\n            _Intensity: { value: intensity},\r\n            _AlbedoTex: { value: undefined },\r\n            _NormalDepthTex: { value: undefined },\r\n            _InverseProjMatrix: { value: new THREE.Matrix4() }\r\n        });\r\n\r\n        this.blending = THREE.AdditiveBlending;\r\n        this.depthWrite = false;\r\n        this.side = THREE.BackSide;\r\n\r\n    }\r\n    set_inverse_proj_matrix(mat4) {\r\n        this.uniforms._InverseProjMatrix.value.copy(mat4);\r\n    }\r\n\r\n    set_normal_depth_rt(rt) {\r\n        this.uniforms._NormalDepthTex.value = rt.texture;\r\n    }\r\n    set_albedo_rt(rt) {\r\n        this.uniforms._AlbedoTex.value = rt.texture;\r\n    }\r\n}\r\n","import CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\nimport BaseRender from '/render_mode/BaseRender';\r\nimport DeferredRendererComposeMaterial from '/materials/DeferredRendererComposeMaterial';\r\nimport Graphics from '/Graphics';\r\n\r\nimport DeferredPointLightMaterial from '/materials/deferred/DeferredPointLightMaterial'\r\nexport default class DeferredRender extends BaseRender {\r\n    constructor() {\r\n        super();\r\n\r\n\r\n\r\n        this.compose_mat = new DeferredRendererComposeMaterial();\r\n        this.main_rt = new THREE.WebGLRenderTarget(Screen.width, Screen.height, {\r\n            // magFilter: THREE.NearestFilter,\r\n            // minFilter: THREE.NearestFilter\r\n        });\r\n\r\n        this.scene_lights = new THREE.Scene();\r\n\r\n        let light_intensity = 1;\r\n        let light_brightest_component = 1;\r\n        let radius_needed_for_intensity = Math.sqrt(4 * light_intensity * (light_brightest_component * (256.0/5.0)))/(2*light_intensity);\r\n        let sphere = new THREE.Mesh(new THREE.SphereBufferGeometry(radius_needed_for_intensity), new DeferredPointLightMaterial(light_intensity));\r\n        // sphere.position.y = 2;\r\n        // this.scene_lights.add(sphere);\r\n\r\n        // let sphere2 = sphere.clone();\r\n        // sphere2.position.x = 2;\r\n        // this.scene_lights.add(sphere2);\r\n\r\n        // let sphere3 = sphere.clone();\r\n        // sphere3.position.x = -2;\r\n        // this.scene_lights.add(sphere3);\r\n\r\n        // let sphere4 = sphere.clone();\r\n        // sphere4.position.z = -2;\r\n        // this.scene_lights.add(sphere4);\r\n\r\n        // let sphere5 = sphere.clone();\r\n        // sphere5.position.z = 2;\r\n        // this.scene_lights.add(sphere5);\r\n\r\n        let light_row = 2;\r\n        let light_col = 2;\r\n        for (let x = 0; x < light_row; x++)\r\n        {\r\n            for (let y = 0; y < light_col; y++)\r\n            {\r\n                let clone = sphere.clone();\r\n                clone.position.set(x*2 - light_row / 2, 1, y*2 - light_col/2);\r\n                this.scene_lights.add(clone);\r\n            }\r\n        }\r\n\r\n        this.camera_inverse_proj_mat = new THREE.Matrix4();\r\n    }\r\n\r\n    on_enter()\r\n    {\r\n        Graphics.generateDepthNormalTexture = true;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        this.__check_RT_size();\r\n\r\n        Graphics.clear(this.main_rt, CameraManager.current, true, false);\r\n\r\n        Graphics.render(SceneManager.current, CameraManager.current, this.main_rt);\r\n\r\n        // this.compose_mat.set_normal_depth_rt(Graphics.depth_normals_RT);\r\n        // this.compose_mat.set_proj_matrix(CameraManager.current.projectionMatrix);\r\n\r\n        // Graphics.blit(this.main_rt, undefined, this.compose_mat);\r\n\r\n        this.camera_inverse_proj_mat.getInverse(CameraManager.current.projectionMatrix);\r\n\r\n        let inverse_proj = this.camera_inverse_proj_mat;\r\n        let albedo_rt = this.main_rt;\r\n        let depth_normals_rt = Graphics.depth_normals_RT;\r\n        this.scene_lights.traverse((child)=>{\r\n            if(child.material)\r\n            {\r\n                child.material.set_inverse_proj_matrix(inverse_proj);\r\n                child.material.set_normal_depth_rt(depth_normals_rt);\r\n                child.material.set_albedo_rt(albedo_rt);\r\n            }\r\n\r\n        })\r\n        // Graphics.clear(undefined, CameraManager.current, true, true);\r\n        // Graphics.render(SceneManager.current, CameraManager.current);\r\n        Graphics.clear(undefined, CameraManager.current, true, true);\r\n        Graphics.render(this.scene_lights, CameraManager.current);\r\n\r\n    }\r\n\r\n\r\n    __check_RT_size() {\r\n        if (this.main_rt.width !== Screen.width || this.main_rt.height !== Screen.height) {\r\n            this.main_rt.setSize(Screen.width, Screen.height);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\n\\nvoid main()\\n{\\n    gl_FragColor = vec4(v_normal * 0.5 + vec3(0.5), 1.0);\\n}\\n\";","module.exports=\"#define GLSLIFY 1\\nvarying vec3 v_normal;\\nvoid main()\\n{\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    v_normal = (modelMatrix * vec4(normal, 0.0)).xyz;\\n}\\n\";","import frag from '/shaders/normal/normal.frag';\r\nimport vert from '/shaders/normal/normal.vert';\r\n\r\nexport default class NormalMaterial extends THREE.ShaderMaterial {\r\n    constructor() {\r\n        super({\r\n            uniforms: {\r\n            },\r\n            vertexShader: vert,\r\n            fragmentShader: frag\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","import CameraManager from '/CameraManager';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\nimport BaseRender from '/render_mode/BaseRender';\r\nimport Graphics from '/Graphics';\r\nimport NormalMaterial from '/materials/NormalMaterial';\r\nexport default class DebugNormalsRender extends BaseRender {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    render() {\r\n        Graphics.clear(undefined, CameraManager.current, true, true);\r\n\r\n        Graphics.render(SceneManager.current, CameraManager.current, undefined, new NormalMaterial());\r\n    }\r\n\r\n}\r\n","export default class ObjectUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n  // Changes XML to JSON\r\n  static xml_to_json(xml) {\r\n\r\n    // Create the return object\r\n    var obj = {};\r\n\r\n    if (xml.nodeType == 1) { // element\r\n      // do attributes\r\n      if (xml.attributes.length > 0) {\r\n        obj[\"@attributes\"] = {};\r\n        for (var j = 0; j < xml.attributes.length; j++) {\r\n          var attribute = xml.attributes.item(j);\r\n          obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\r\n        }\r\n      }\r\n    } else if (xml.nodeType == 3) { // text\r\n      obj = xml.nodeValue;\r\n    }\r\n\r\n    // do children\r\n    if (xml.hasChildNodes()) {\r\n      for (var i = 0; i < xml.childNodes.length; i++) {\r\n        var item = xml.childNodes.item(i);\r\n        var nodeName = item.nodeName;\r\n        if (typeof (obj[nodeName]) == \"undefined\") {\r\n          obj[nodeName] = this.xml_to_json(item);\r\n        } else {\r\n          if (typeof (obj[nodeName].push) == \"undefined\") {\r\n            var old = obj[nodeName];\r\n            obj[nodeName] = [];\r\n            obj[nodeName].push(old);\r\n          }\r\n          obj[nodeName].push(this.xml_to_json(item));\r\n        }\r\n      }\r\n    }\r\n    return obj;\r\n  };\r\n\r\n}\r\n\r\n","export default class PerspectiveCamera extends THREE.PerspectiveCamera\r\n{\r\n\tconstructor(fov, aspect, near, far)\r\n\t{\r\n\t\tsuper(fov, aspect, near, far);\r\n\r\n\t\tthis.clear_color = new THREE.Color(\"#000000\");\r\n\t\tthis.clear_alpha = 1;\r\n\t}\r\n}","import Input from '/Input';\r\nimport CameraManager from '/CameraManager';\r\nimport Graphics from '/Graphics';\r\nimport Screen from '/Screen';\r\n\r\n\r\n\r\nclass UI\r\n{\r\n\r\n    constructor()\r\n    {\r\n        this.ui_elements = [];\r\n        this._tmp_normalized_pos = new THREE.Vector2();\r\n        this.ss_scene = new THREE.Scene();\r\n        this.ss_scene.autoUpdate = false;\r\n        this.ss_scene.frustumCulled = false;\r\n\r\n        this.ws_scene = new THREE.Scene();\r\n        this.ws_scene.autoUpdate = false;\r\n        this.ws_scene.frustumCulled = false;\r\n\r\n        this.ss_camera = new THREE.OrthographicCamera(-1, 1, 1,-1, -100, 100);\r\n    }\r\n\r\n    delete_element(elem)\r\n    {\r\n        let index = this.ui_elements.indexOf(elem);\r\n        if (index > -1) {\r\n            this.ui_elements.splice(index, 1);\r\n        }\r\n\r\n        this.ss_scene.remove(elem);\r\n        this.ws_scene.remove(elem);\r\n\r\n        elem.dispose();\r\n    }\r\n\r\n    add_screen_space_element(elem)\r\n    {\r\n        this.ui_elements.push(elem);\r\n        this.ss_scene.add(elem);\r\n\r\n        elem.set_screen_space_coordinate_system()\r\n    }\r\n    add_world_space_element(elem)\r\n    {\r\n        this.ui_elements.push(elem);\r\n        this.ws_scene.add(elem);\r\n\r\n        elem.set_world_space_coordinate_system();\r\n    }\r\n\r\n\r\n    update()\r\n    {\r\n\r\n        // this.ss_camera.left     = -Screen.width / 2;\r\n        // this.ss_camera.right    = Screen.width / 2;\r\n        // this.ss_camera.top      = Screen.top / 2;\r\n        // this.ss_camera.right    = -Screen.bottom / 2;\r\n        this.ss_camera.updateProjectionMatrix();\r\n\r\n        this._tmp_normalized_pos.copy(Input.normalized_mouse_pos);\r\n        for(let i=0; i< this.ui_elements.length; i++)\r\n        {\r\n            this.ui_elements[i].update_state(this._tmp_normalized_pos)\r\n        }\r\n    }\r\n\r\n    render(renderer)\r\n    {\r\n        // renderer.render_ui(this.scene);\r\n        if(this.ss_scene.children.length > 0)\r\n            Graphics.render(this.ss_scene, this.ss_camera);\r\n        if (this.ws_scene.children.length > 0)\r\n            Graphics.render(this.ws_scene, CameraManager.current);\r\n    }\r\n\r\n    clear()\r\n    {\r\n        this.current_clicked_element = undefined\r\n    }\r\n}\r\n\r\nconst ui = new UI();\r\nmodule.exports = ui;\r\n","export default class GeometryBatch\r\n{\r\n\tconstructor(geometry, batch_width)\r\n\t{\r\n\t\tthis.geometry = geometry;\r\n\r\n\t\tthis.material = undefined;\r\n\t\tthis.uniforms = {};\r\n\t\tthis.batch_width = batch_width;\r\n\r\n\t\tthis.data_textures = [];\r\n\r\n\t\tthis.object_names = undefined;\r\n\r\n\r\n\t\tthis.zero_offset = new THREE.Vector2();\r\n\t\tthis.write_offset = new THREE.Vector2();\r\n\r\n\t\tthis.uniform_dirty_count = 0;\r\n\r\n\t\tthis.tmp_uploaded_data_count = 0;\r\n\r\n\t}\r\n\r\n\tinit(object_names, vert_shader, frag_shader)\r\n\t{\r\n\t\tthis.material = new THREE.ShaderMaterial({\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: vert_shader,\r\n\t\t\tfragmentShader: frag_shader\r\n\t\t});\r\n\t\tthis.object_names = object_names;\r\n\r\n\t}\r\n\r\n\tadd_global_uniform(name, data)\r\n\t{\r\n\t\tthis.uniforms[name] = {value: data};\r\n\t\tthis.material.needsUpdate = true;\r\n\t}\r\n\tset_global_uniform(name, data)\r\n\t{\r\n\t\tthis.uniforms[name].value = data;\r\n\t}\r\n\r\n\tadd_object_uniform_v3(uniform_name, default_value_v3)\r\n\t{\r\n\t\tlet src_tex \t\t= this.__create_rgb_texture(this.batch_width);\r\n\t\tlet dst_tex \t\t= this.__create_rgb_texture(this.batch_width);\r\n\t\tlet one_pixel_tex = this.__create_rgb_texture(1);\r\n\r\n\r\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\r\n\r\n\t\tif(default_value_v3)\r\n\t\t\tthis.__flood_data_texture_rgb(new_data_tex, default_value_v3);\r\n\t\r\n\t}\r\n\r\n\tadd_object_uniform_v4(uniform_name, default_value_v4)\r\n\t{\r\n\t\tlet src_tex \t\t= this.__create_rgba_texture(this.batch_width);\r\n\t\tlet dst_tex \t\t= this.__create_rgba_texture(this.batch_width);\r\n\t\tlet one_pixel_tex = this.__create_rgba_texture(1);\r\n\r\n\r\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\r\n\r\n\t\tif(default_value_v4)\r\n\t\t\tthis.__flood_data_texture_rgba(new_data_tex, default_value_v4);\r\n\t\r\n\t}\r\n\r\n\tadd_object_uniform_v4_float(uniform_name, default_value_v4)\r\n\t{\r\n\t\tlet src_tex \t\t= this.__create_rgba_float_texture(this.batch_width);\r\n\t\tlet dst_tex \t\t= this.__create_rgba_float_texture(this.batch_width);\r\n\t\tlet one_pixel_tex = this.__create_rgba_float_texture(1);\r\n\r\n\r\n\t\tlet new_data_tex = this.__add_data_texture(uniform_name, src_tex, dst_tex, one_pixel_tex);\r\n\r\n\t\tif(default_value_v4)\r\n\t\t\tthis.__flood_data_texture_rgba(new_data_tex, default_value_v4);\r\n\t\r\n\t}\r\n\r\n\tset_object_uniform_v3(object_name, uniform_name, vector3, use_r, use_g, use_b)\r\n\t{\r\n\t\tlet obj_index = this.__get_object_index(object_name);\r\n\t\tlet data_texture = this.__get_data_texture(uniform_name);\r\n\r\n\t\tthis.__set_pixel_rgb(data_texture.src, obj_index, vector3, use_r, use_g, use_b);\r\n\t\tthis.__set_pixel_rgb(data_texture.one_pixel, 0\t, vector3, use_r, use_g, use_b);\r\n\r\n\t\tdata_texture.last_accessed_index = obj_index;\r\n\r\n\t\tdata_texture.dirty_count++; \r\n\t}\r\n\r\n\tset_object_uniform_v4(object_name, uniform_name, vector4, use_r, use_g, use_b, use_a)\r\n\t{\r\n\t\tlet obj_index = this.__get_object_index(object_name);\r\n\t\tlet data_texture = this.__get_data_texture(uniform_name);\r\n\r\n\t\tthis.__set_pixel_rgba(data_texture.src, obj_index, vector4, use_r, use_g, use_b, use_a);\r\n\t\tthis.__set_pixel_rgba(data_texture.one_pixel, 0, vector4, use_r, use_g, use_b, use_a);\r\n\t\tdata_texture.last_accessed_index = obj_index;\r\n\r\n\t\tdata_texture.dirty_count++; \r\n\t}\r\n\r\n\r\n\tupload_texture_data(renderer, upload_budget)\r\n\t{\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tif(upload_budget > 0 && this.data_textures[i].dirty_count > 0)\r\n\t\t\t{\r\n\t\t\t\tif(this.data_textures[i].dirty_count === 1)\r\n\t\t\t\t\tthis.__partial_texture_data_upload(renderer, this.data_textures[i]);\r\n\t\t\t\tif(this.data_textures[i].dirty_count > 1)\r\n\t\t\t\t\tthis.__full_texture_data_upload(renderer, this.data_textures[i]);\r\n\r\n\t\t\t\tthis.data_textures[i].dirty_count = 0;\r\n\r\n\t\t\t\tupload_budget--;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tget_uniform_dirty_count()\r\n\t{\r\n\t\tthis.uniform_dirty_count = 0;\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tif(this.data_textures[i].dirty_count > 0)\r\n\t\t\t\tthis.uniform_dirty_count++;\r\n\t\t}\r\n\t\treturn this.uniform_dirty_count;\r\n\t}\r\n\r\n\r\n\t__full_texture_data_upload(renderer, texture_data)\r\n\t{\r\n\t\t// console.log(\"full texture update of\"+ texture_data.name);\r\n\t\ttexture_data.dst.needsUpdate = true;\r\n\t\trenderer.copyTextureToTexture(\r\n\t\t\t\t\tthis.zero_offset, \r\n\t\t\t\t\ttexture_data.src, \r\n\t\t\t\t\ttexture_data.dst\r\n\t\t\t);\r\n\t}\r\n\t__partial_texture_data_upload(renderer, texture_data)\r\n\t{\r\n\t\t// console.log(\"partial texture update\"+ texture_data.name);\r\n\t\tlet index = texture_data.last_accessed_index;\r\n\t\tif(index === -1)\r\n\t\t\treturn;\r\n\t\t\r\n  \tthis.write_offset.y = Math.floor(index/this.batch_width);\r\n  \tthis.write_offset.x = index - this.batch_width*this.write_offset.y;\r\n\t\trenderer.copyTextureToTexture(\r\n\t\t\tthis.write_offset, \r\n\t\t\ttexture_data.one_pixel, \r\n\t\t\ttexture_data.dst\r\n\t\t);\r\n\t}\r\n\r\n\tget_mesh()\r\n\t{\r\n\t\treturn new THREE.Mesh(this.geometry, this.material);\r\n\t}\r\n\r\n\t__set_pixel_rgb(data_texture, index, vector3, use_r, use_g, use_b)\r\n\t{\r\n\t\tif(use_r)\r\n\t\t\tdata_texture.image.data[index*3+0] = vector3.x;\t    \r\n\t\tif(use_g)\r\n\t\t\tdata_texture.image.data[index*3+1] = vector3.y;\t    \r\n\t\tif(use_b)\r\n\t\t\tdata_texture.image.data[index*3+2] = vector3.z;\t\r\n\t}\r\n\t__set_pixel_rgba(data_texture, index, vector4, use_r, use_g, use_b, use_a)\r\n\t{\r\n\t\tif(use_r)\r\n\t\t\tdata_texture.image.data[index*4+0] = vector4.x;\t    \r\n\t\tif(use_g)\r\n\t\t\tdata_texture.image.data[index*4+1] = vector4.y;\t    \r\n\t\tif(use_b)\r\n\t\t\tdata_texture.image.data[index*4+2] = vector4.z;\t\r\n\t\tif(use_a)\r\n\t\t\tdata_texture.image.data[index*4+3] = vector4.w;\r\n\t}\r\n\r\n\t__flood_data_texture_rgb(data_texture, v3)\r\n\t{\r\n\t\tfor(let i=0; i< this.batch_width * this.batch_width; i++)\r\n\t\t{\r\n\t\t\tthis.__set_pixel_rgb(data_texture.src, i, v3, true, true, true);\r\n\t\t\tdata_texture.dirty_count++;\r\n\t\t}\r\n\t}\r\n\r\n\t__flood_data_texture_rgba(data_texture, v4)\r\n\t{\r\n\t\tfor(let i=0; i< this.batch_width * this.batch_width; i++)\r\n\t\t{\r\n\t\t\tthis.__set_pixel_rgba(data_texture.src, i, v4, true, true, true, true);\r\n\t\t\tdata_texture.dirty_count++;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t__create_rgb_texture(width)\r\n\t{\r\n\t\tlet data = new Uint8Array( 3 * width * width );\r\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBFormat );\r\n\t}\r\n\t__create_rgba_texture(width)\r\n\t{\r\n\t\tlet data = new Uint8Array( 4 * width * width );\r\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBAFormat );\r\n\t}\r\n\r\n\t__create_rgba_float_texture(width)\r\n\t{\r\n\t\tlet data = new Float32Array( 4 * width * width );\r\n\t\treturn new THREE.DataTexture( data, width, width, THREE.RGBA, THREE.FloatType );\r\n\t}\r\n\r\n\t__get_data_texture(uniform_name)\r\n\t{\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tif(this.data_textures[i].name === uniform_name)\r\n\t\t\t\treturn this.data_textures[i];\r\n\t\t}\r\n\t\tconosle.error(\"Data texture \"+uniform_name+\" does not exist\");\r\n\t\treturn undefined;\r\n\t}\r\n\t__get_object_index(name)\r\n\t{\r\n\t\tfor(let i=0; i< this.object_names.length; i++)\r\n\t\t{\r\n\t\t\tif(this.object_names[i] === name)\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t\tconsole.error(\"the name \"+name+\" is not contained in this batch\");\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t__add_data_texture(uniform_name, src_texture, dst_texture, one_pixel_text)\r\n\t{\r\n\t\tdst_texture.needsUpdate = true;\r\n\r\n\t\tthis.data_textures.push({\r\n\t\t\tname: uniform_name,\r\n\t\t\tsrc: src_texture, \r\n\t\t\tdst: dst_texture,\r\n\t\t\tone_pixel: one_pixel_text,\r\n\t\t\tlast_accessed_index: -1,\r\n\t\t\tdirty_count: 0\r\n\t\t});\r\n\r\n\t\tthis.uniforms[uniform_name] = {value: dst_texture};\r\n\t\treturn this.data_textures[this.data_textures.length-1];\r\n\t}\r\n\r\n\tdispose()\r\n\t{\r\n\t\tfor(let i=0; i< this.data_textures.length; i++)\r\n\t\t{\r\n\t\t\tthis.data_textures[i].src.dispose();\r\n\t\t\tthis.data_textures[i].dst.dispose();\r\n\t\t\tthis.data_textures[i].one_pixel.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n}","import GeometryBatch from '/static_batcher/GeometryBatch'\r\n\r\nclass GeometryBatcher\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.batches = [];\r\n\t}\r\n\r\n\tbatch(buffer_geometries)\r\n\t{\r\n\t  let attr_accessor_uvs = [];\r\n\t  let texture_width = THREE.Math.ceilPowerOfTwo(Math.sqrt(buffer_geometries.length));\r\n\t  // console.log(\"Store count: \" + buffer_geometries.length + \", Texture size: \" +texture_width);\r\n\r\n\t  this.__init_uv_array(attr_accessor_uvs, texture_width);\r\n\r\n\r\n\t  let uv_index = 0;\r\n\r\n\t  for(let i=0; i< buffer_geometries.length; i++)\r\n\t  {\r\n\t    let vertex_count = buffer_geometries[i].getAttribute('position').count;\r\n\t    let y = Math.floor(i/texture_width);\r\n\t    let x = i - texture_width*y;\r\n\t    for(let count = 0; count < vertex_count; count++)\r\n\t    {\r\n\r\n\t      attr_accessor_uvs[uv_index] = (x/texture_width) + 0.5/texture_width;\r\n\t      attr_accessor_uvs[uv_index+1] = (y/texture_width) + 0.5/texture_width;\r\n\t      uv_index+=2;\r\n\t    }\r\n\t  }\r\n\r\n\t  let buffer_attribute = new THREE.BufferAttribute( new Float32Array( attr_accessor_uvs ), 2);\r\n\t  let buffer_geometry = THREE.BufferGeometryUtils.mergeBufferGeometries(buffer_geometries);\r\n\t  buffer_geometry.setAttribute( 'attr_accessor_uv', buffer_attribute);\r\n\r\n\t  this.batches.push(new GeometryBatch(buffer_geometry, texture_width));\r\n\t  return this.batches[this.batches.length-1];\r\n\r\n\t}\r\n\r\n\tupload_texture_data(renderer)\r\n\t{\r\n\t\tfor(let i=0; i< this.batches.length; i++)\r\n\t\t{\r\n\t\t\tthis.batches[i].upload_texture_data(renderer, 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t__init_uv_array(uvs, texture_width)\r\n\t{\r\n\t\tfor(let i=0; i< texture_width*texture_width*2; i++)\r\n\t  {\r\n\t    uvs.push(0);\r\n\t  }\r\n\t}\r\n}\r\n\r\n\r\nconst geometry_batcher = new GeometryBatcher();\r\nmodule.exports = geometry_batcher;\r\n","import Time from '/Time';\r\nimport Input from '/Input';\r\nimport UI from '/UI';\r\nimport Debug from '/Debug';\r\nimport GeometryBatcher from '/static_batcher/GeometryBatcher';\r\nimport BaseApplication from '/BaseApplication';\r\n\r\nexport default class RenderLoop {\r\n\r\n  constructor(target_application, renderer) {\r\n\r\n    target_application = target_application || new BaseApplication();\r\n\r\n    this._frame_id = -1;\r\n\r\n    this.target_application = target_application;\r\n    this.renderer = renderer;\r\n\r\n    this.is_running = true;\r\n    this.frames_passed = 0;\r\n\r\n  }\r\n\r\n  update() {\r\n\r\n    if(!this.is_running)\r\n      return;\r\n\r\n    Time.__update();\r\n    Debug.clear();\r\n\r\n    //###### START CYCLE ######\r\n    if (this.frames_passed === 5) {\r\n      this.target_application.post_start();\r\n    }\r\n\r\n    this.target_application.update();\r\n\r\n    this.target_application.on_pre_render();\r\n\r\n    this.renderer.update();     // render scene\r\n    UI.update();                // update after new camera matrix has been calculated\r\n    UI.render(this.renderer);   // render ui layer on top\r\n\r\n    this.target_application.on_post_render();\r\n\r\n    if(Debug.rt_debug)\r\n      this.renderer.blit(Debug.rt_debug);\r\n    //###### END  CYCLE #######\r\n    Input.clear();\r\n    UI.clear();\r\n\r\n    //   GeometryBatcher.upload_texture_data(this.renderer);\r\n\r\n    this._frame_id = requestAnimationFrame(this.update.bind(this));\r\n    this.frames_passed++;\r\n  }\r\n\r\n  start() {\r\n    this.target_application.start();\r\n    this.update();\r\n    this.is_running = true;\r\n\r\n\r\n  }\r\n\r\n  stop() {\r\n    this.is_running = false;\r\n    this.target_application.end();\r\n\r\n    cancelAnimationFrame(this._frame_id);\r\n  }\r\n}\r\n","export default class AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tthis.progress = 0;\r\n\t\tthis.resource_id = resource_id;\r\n\t\tthis.url = url;\r\n\r\n\t\tthis.has_finished = false;\r\n\t\tthis.has_error = false;\r\n\t\tthis.error_message = \"none\";\r\n\t}\r\n\r\n\t__update_progress(value)\r\n\t{\r\n\t\tthis.progress = value;\r\n\t}\r\n\t__loading_ended()\r\n\t{\r\n\t\tthis.has_finished = true;\r\n\t}\r\n\t__set_error(message)\r\n\t{\r\n\t\tthis.has_error = true;\r\n\t\tthis.error_message = message;\r\n\t}\r\n\r\n\tprint_error()\r\n\t{\r\n\t\tconsole.error(\"Error while loading \"+this.resource_id+\"\\n\\t path: \"+this.url+\"\\n\\t\\t\"+this.error_message);\r\n\t}\r\n\r\n\tload(resource_container) {\r\n\r\n\t}\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class TextureLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.TextureLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (image)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, image);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\t() => {\r\n\t\t\t\tctx.__set_error(\"Image could not  be loaded. Maybe wrong name or path, I don't know\" + '¯\\\\_(ツ)_/¯');\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class GLTFLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.GLTFLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (gltf)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, gltf);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\t(xhr) =>{\r\n\t\t\t\tctx.__update_progress(xhr.loaded/xhr.total);\r\n\t\t\t},\r\n\t\t\t(msg) => {\r\n\t\t\t\tctx.__set_error(msg +\"\\n\\n\\t If the error says something about unexpected token < in JSON then the probably the problem is related to the file not being found. Check the name and path of the resource\");\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class DAELoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.ColladaLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (gltf)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, gltf);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\t(xhr) =>{\r\n\t\t\t\tctx.__update_progress(xhr.loaded/xhr.total);\r\n\t\t\t},\r\n\t\t\t(msg) => {\r\n\t\t\t\tctx.__set_error(msg +\"\\n\\n\\t If the error says something about unexpected token < in JSON then the probably the problem is related to the file not being found. Check the name and path of the resource\");\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class TextLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.FileLoader();\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.url, (gltf)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, gltf);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\t(xhr) =>{\r\n\t\t\t\tctx.__update_progress(xhr.loaded/xhr.total);\r\n\t\t\t},\r\n\t\t\t(msg) => {\r\n\t\t\t\tctx.__set_error(msg);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class CubemapLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.CubeTextureLoader();\r\n\t\tthis.loader.setPath(url + \"/\");\r\n\t\tthis.urls = [\r\n\t\t\t'px.png',\r\n\t\t\t'nx.png',\r\n\t\t\t'py.png',\r\n\t\t\t'ny.png',\r\n\t\t\t'pz.png',\r\n\t\t\t'nz.png'\r\n\t\t]\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\r\n\t\tthis.loader.load(\tthis.urls, (image)=> {\r\n\t\t\tresource_container.set_resource(ctx.resource_id, image);\r\n\t\t\t\tctx.__update_progress(1);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t},\r\n\t\t\tundefined,\r\n\t\t\t(error) => {\r\n\t\t\t\tctx.__set_error(\"Image could not  be loaded. Maybe wrong name or path, I don't know\" + '¯\\\\_(ツ)_/¯', error);\r\n\t\t\t\tctx.__loading_ended()\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class AudioLoader extends AbstractLoader\r\n{\r\n\tconstructor(resource_id, url, listener, loop, volume)\r\n\t{\r\n\t\tsuper(resource_id, url);\r\n\t\tthis.loader = new THREE.AudioLoader();\r\n\t\tthis.loop = loop;\r\n\t\tthis.listener = listener;\r\n\t\tthis.voluem = volume;\r\n\t}\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tlet ctx = this;\r\n\t\tlet sound = new THREE.Audio(this.listener);\r\n\r\n\t\tthis.loader.load(this.url, (audio)=> {\r\n\t\t\tsound.setBuffer(audio);\r\n\t\t\tsound.setLoop(this.loop);\r\n\t\t\tsound.setVolume(this.voluem);\r\n\r\n\t\t\tresource_container.set_resource(ctx.resource_id, sound);\r\n\r\n\t\t\tif (!resource_container.get_resource('audio_listener')) {\r\n\t\t\t\tresource_container.set_resource('audio_listener', this.listener);\r\n\t\t\t}\r\n\r\n\t\t\tctx.__update_progress(1);\r\n\t\t\tctx.__loading_ended()\r\n\t\t},\r\n\t\tundefined,\r\n\t\t(error) => {\r\n\t\t\tctx.__set_error(\"Audio could not be loaded. Maybe wrong name or path, I don't know\" + '¯\\\\_(ツ)_/¯', error);\r\n\t\t\tctx.__loading_ended()\r\n\t\t});\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class JSONLoader extends AbstractLoader {\r\n\tconstructor(resource_id, url, username, password) {\r\n\t\tsuper(resource_id, url);\r\n\r\n\t\tthis.loader = new THREE.FileLoader();\r\n\t\tthis.username = username;\r\n\t\tthis.password = password;\r\n\t\tthis.resource_container = undefined;\r\n\t}\r\n\r\n\tload(resource_container) {\r\n\t\t// let headers = new Headers();\r\n\t\tlet headers = {};\r\n\t\tthis.resource_container = resource_container;\r\n\r\n\t\tif (this.username !== undefined && this.password !== undefined) {\r\n\t\t\theaders['Authorization'] = `Basic ${btoa(`${this.username}:${this.password}`)}`\r\n\t\t}\r\n\r\n\t\tfetch(this.url, { headers: headers })\r\n\t\t\t.then(this.__parse_to_json.bind(this))\r\n\t\t\t.then(this.__set_resource.bind(this))\r\n\t}\r\n\r\n\t__parse_to_json(response) {\r\n\t\treturn response.json();\r\n\t}\r\n\r\n\t__set_resource(data) {\r\n\t\tthis.resource_container.set_resource(this.resource_id, data);\r\n\r\n\t\tthis.__update_progress(1);\r\n\t\tthis.__loading_ended();\r\n\t}\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class OBJLoader extends AbstractLoader {\r\n    constructor(resource_id, url) {\r\n        super(resource_id, url);\r\n        this.loader = new THREE.OBJLoader();\r\n    }\r\n\r\n    load(resource_container) {\r\n        let ctx = this;\r\n\r\n        this.loader.load(this.url, (gltf) => {\r\n            resource_container.set_resource(ctx.resource_id, gltf);\r\n            ctx.__update_progress(1);\r\n            ctx.__loading_ended()\r\n        },\r\n            (xhr) => {\r\n                ctx.__update_progress(xhr.loaded / xhr.total);\r\n            },\r\n            (msg) => {\r\n                ctx.__set_error(msg + \"\\n\\n\\t If the error says something about unexpected token < in JSON then probably the problem is related to the file not being found. Check the name and path of the resource\");\r\n                ctx.__loading_ended()\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","import AbstractLoader from './AbstractLoader';\r\n\r\nexport default class RGBETextureLoader extends AbstractLoader\r\n{\r\n  constructor(resource_id, url)\r\n  {\r\n    super(resource_id, url);\r\n    this.loader = new THREE.RGBELoader();\r\n    this.loader.setDataType( THREE.UnsignedByteType );\r\n\r\n  }\r\n\r\n  load(resource_container)\r\n  {\r\n    let ctx = this;\r\n\r\n    this.loader.load( this.url, (hdr)=> {\r\n        resource_container.set_resource(ctx.resource_id, hdr);\r\n        ctx.__update_progress(1);\r\n        ctx.__loading_ended()\r\n      },\r\n      (xhr) =>{\r\n        ctx.__update_progress(xhr.loaded/xhr.total);\r\n      },\r\n      (msg) => {\r\n        ctx.__set_error(msg +\"\\n\\n\\t If the error says something about unexpected token < in JSON then the probably the problem is related to the file not being found. Check the name and path of the resource\");\r\n        ctx.__loading_ended()\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import AbstractLoader from '/resource_loader/AbstractLoader';\r\n\r\nexport default class PointArrayLoader extends AbstractLoader {\r\n    constructor(resource_id, url) {\r\n        super(resource_id, url);\r\n        this.loader = new THREE.FileLoader();\r\n    }\r\n\r\n    load(resource_container) {\r\n        let ctx = this;\r\n\r\n        this.loader.load(this.url, (text) => {\r\n            resource_container.set_resource(ctx.resource_id, ctx.parse_path(text));\r\n            ctx.__update_progress(1);\r\n            ctx.__loading_ended()\r\n        },\r\n            (xhr) => {\r\n                ctx.__update_progress(xhr.loaded / xhr.total);\r\n            },\r\n            (msg) => {\r\n                ctx.__set_error(msg);\r\n                ctx.__loading_ended()\r\n            }\r\n        );\r\n    }\r\n\r\n    parse_path(raw_data) {\r\n        let string_array = raw_data.split('\\n');\r\n\r\n        if (string_array[string_array.length - 1] === \"\") {\r\n            string_array.pop();\r\n        }\r\n\r\n        let positions = [];\r\n\r\n        for (let i = 0; i < string_array.length; i += 3) {\r\n            let x = parseFloat(string_array[i + 0]);\r\n            let y = parseFloat(string_array[i + 1]);\r\n            let z = parseFloat(string_array[i + 2]);\r\n            positions.push(new THREE.Vector3(x, y, z));\r\n        }\r\n        return positions;\r\n        // let curve = new THREE.CatmullRomCurve3(positions);\r\n        // return curve.getPoints(100);\r\n    }\r\n\r\n}\r\n","import EventManager from '/EventManager';\r\n\r\nclass ResourceContainer\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.resources = {};\r\n\t}\r\n\r\n\tset_resource(name, resource)\r\n\t{\r\n\t\tthis.resources[name] = resource;\r\n\t\tEventManager.fire_resource_loaded({name: name, value: resource});\r\n\t}\r\n\r\n\tget_resource(name)\r\n\t{\r\n\t\treturn this.resources[name];\r\n\t}\r\n\tget(name)\r\n\t{\r\n\t\treturn this.resources[name];\r\n\t}\r\n\r\n}\r\n\r\nconst resource_container = new ResourceContainer();\r\nmodule.exports = resource_container;\r\n","import TextureLoader from '/resource_loader/TextureLoader';\r\nimport GLTFLoader from '/resource_loader/GLTFLoader';\r\nimport DAELoader from '/resource_loader/DAELoader';\r\nimport TextLoader from '/resource_loader/TextLoader';\r\nimport CubemapLoader from '/resource_loader/CubemapLoader';\r\nimport AudioLoader from '/resource_loader/AudioLoader';\r\nimport JSONLoader from '/resource_loader/JSONLoader';\r\nimport OBJLoader from '/resource_loader/OBJLoader';\r\nimport RGBETextureLoader from '/resource_loader/RGBETextureLoader';\r\nimport PointArrayLoader from '/resource_loader/PointArrayLoader';\r\nimport ResourceContainer from '/ResourceContainer';\r\n\r\nexport default class ResourceBatch\r\n{\r\n\tconstructor(batch_name)\r\n\t{\r\n\t\tthis.resource_loaders = [];\r\n\t\tthis.batch_name = batch_name || \"unnamed batch\";\r\n\t}\r\n\r\n\tadd_texture(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new TextureLoader(resource_id, url));\r\n\t}\r\n\r\n\tadd_gltf(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new GLTFLoader(resource_id, url));\r\n\t}\r\n\tadd_dae(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new DAELoader(resource_id, url));\r\n\t}\r\n\tadd_obj(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new OBJLoader(resource_id, url));\r\n\t}\r\n\tadd_text(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new TextLoader(resource_id, url));\r\n\t}\r\n\tadd_cubemap(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new CubemapLoader(resource_id, url));\r\n\t}\r\n\tadd_audio(resource_id, url, listener, loop, volume) {\r\n\t\tthis.resource_loaders.push(new AudioLoader(resource_id, url, listener, loop, volume));\r\n\t}\r\n\tadd_json(resource_id, url, username, password) {\r\n\t\tthis.resource_loaders.push(new JSONLoader(resource_id, url, username, password));\r\n\t}\r\n\tadd_point_array(resource_id, url)\r\n\t{\r\n\t\tthis.resource_loaders.push(new PointArrayLoader(resource_id, url));\r\n\t}\r\n  add_hdr(resource_id, url)\r\n  {\r\n    this.resource_loaders.push(new RGBETextureLoader(resource_id, url));\r\n  }\r\n\r\n\tload(resource_container)\r\n\t{\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tthis.resource_loaders[i].load(resource_container || ResourceContainer);\r\n\t\t}\r\n\t}\r\n\r\n\tget loading_finished()\r\n\t{\r\n\t\tlet finished = true;\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tfinished = finished && this.resource_loaders[i].has_finished;\r\n\t\t}\r\n\t\treturn finished;\r\n\t}\r\n\r\n\tget has_errors()\r\n\t{\r\n\t\tlet has_error = false;\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\thas_error = has_error || this.resource_loaders[i].has_error;\r\n\t\t}\r\n\t\treturn has_error;\r\n\t}\r\n\r\n\tprint_errors()\r\n\t{\r\n\t\tconsole.error(\"Batch <\"+this.batch_name+\"> could not load successfully\")\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tif(this.resource_loaders[i].has_error)\r\n\t\t\t\tthis.resource_loaders[i].print_error();\r\n\t\t}\r\n\t}\r\n\r\n\tget_progress()\r\n\t{\r\n\t\tlet progress = 0;\r\n\t\tfor(let i=0; i< this.resource_loaders.length; i++)\r\n\t\t{\r\n\t\t\tprogress+=this.resource_loaders[i].progress;\r\n\t\t}\r\n\t\treturn progress/this.resource_loaders.length;\r\n\t}\r\n}\r\n","// This class helps with parsing an entire recording that spans several days, into one-day recordings\r\n// that start at 0:00:00 and ends at 23:59:59, except for the first and last day of a recording range\r\nexport default class TimeUtilities\r\n{\r\n\tconstructor(){}\r\n\r\n}\r\n\r\n","export default class ImageUtilities {\r\n    constructor() { }\r\n\r\n    static get_image_data(image) {\r\n\r\n        var canvas = document.createElement('canvas');\r\n        canvas.width = image.width;\r\n        canvas.height = image.height;\r\n\r\n        var context = canvas.getContext('2d');\r\n        context.drawImage(image, 0, 0);\r\n\r\n        return context.getImageData(0, 0, image.width, image.height);\r\n    }\r\n    static get_pixel(imagedata, x, y) {\r\n\r\n        let position = (x + imagedata.width * y) * 4;\r\n        let data = imagedata.data;\r\n        return new THREE.Vector4(data[position + 0], data[position + 1], data[position + 2], data[position + 3]);\r\n    }\r\n\r\n}\r\n","export class ModelUtilities\r\n{\r\n\r\n\tget_mesh(scene, result_callback)\r\n\t{\r\n\t\tscene.traverse((child)=>{\r\n\t\t\tif(child instanceof THREE.Mesh)\r\n\t\t\t{\r\n\t\t\t\tif(child.geometry instanceof THREE.Geometry)\r\n\t\t\t\t{\r\n\t\t\t\t\tchild.geometry = new THREE.BufferGeometry().fromGeometry(child.geometry);\r\n\t\t\t\t}\r\n\t\t\t\tresult_callback(child);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tget_geometries(scene)\r\n\t{\r\n\t\tlet geometries = [];\r\n\r\n\t\tthis.get_mesh(scene, (child)=>{\r\n\t\t\tgeometries.push(child.geometry);\r\n\t\t});\r\n\t\treturn geometries;\r\n\t}\r\n\r\n\r\n\tassign_material(scene, material, name)\r\n\t{\r\n\t\tscene.traverse((child) => {\r\n\t\t\tif(child instanceof THREE.Mesh)\r\n\t\t\t{\r\n\t\t\t\t// assign to all if no name is given\r\n\t\t\t\tif(name === undefined)\r\n\t\t\t\t\tchild.material = material;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// if name is given, assign only to that\r\n\t\t\t\t\tif(child.name === name )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchild.material = material;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tclone_animated_gltf(gltf)\r\n\t{\r\n\t\tconst clone = {\r\n\t\t\tanimations: gltf.animations,\r\n\t\t\tscene: gltf.scene.clone(true)\r\n\t\t};\r\n\r\n\t\tconst skinnedMeshes = {};\r\n\r\n\t\tgltf.scene.traverse(node => {\r\n\t\t\tif (node.isSkinnedMesh) {\r\n\t\t\t\tskinnedMeshes[node.name] = node;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst cloneBones = {};\r\n\t\tconst cloneSkinnedMeshes = {};\r\n\r\n\t\tclone.scene.traverse(node => {\r\n\t\t\tif (node.isBone) {\r\n\t\t\t\tcloneBones[node.name] = node;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.isSkinnedMesh) {\r\n\t\t\t\tcloneSkinnedMeshes[node.name] = node;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfor (let name in skinnedMeshes) {\r\n\t\t\tconst skinnedMesh = skinnedMeshes[name];\r\n\t\t\tconst skeleton = skinnedMesh.skeleton;\r\n\t\t\tconst cloneSkinnedMesh = cloneSkinnedMeshes[name];\r\n\r\n\t\t\tconst orderedCloneBones = [];\r\n\r\n\t\t\tfor (let i = 0; i < skeleton.bones.length; ++i) {\r\n\t\t\t\tconst cloneBone = cloneBones[skeleton.bones[i].name];\r\n\t\t\t\torderedCloneBones.push(cloneBone);\r\n\t\t\t}\r\n\r\n\t\t\tcloneSkinnedMesh.bind(\r\n\t\t\t\tnew THREE.Skeleton(orderedCloneBones, skeleton.boneInverses),\r\n\t\t\t\tcloneSkinnedMesh.matrixWorld);\r\n\t\t}\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tset_shadow_config(scene, cast, receive)\r\n\t{\r\n\t\tscene.traverse((child) => {\r\n\t\t\tif(child instanceof THREE.Mesh)\r\n\t\t\t{\r\n\t\t\t\tchild.castShadow = cast;\r\n\t\t\t\tchild.receiveShadow = receive;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t__find_object(scene, object_name, result_callback)\r\n\t{\r\n\r\n\t\tscene.traverse((obj)=>{\r\n\t\t\tif(obj.name === object_name)\r\n\t\t\t\tresult_callback(obj);\r\n\t\t});\r\n\t}\r\n\r\n\tget_object(scene, object_name)\r\n\t{\r\n\t\tlet object = undefined;\r\n\t\tscene.traverse((obj)=>{\r\n\t\t\tif(obj.name === object_name)\r\n\t\t\t\tobject = obj;\r\n\t\t});\r\n\t\treturn object;\r\n\t}\r\n\tget_object_by_type(scene, object_type)\r\n\t{\r\n\t\tlet object = undefined;\r\n\t\tscene.traverse((obj)=>{\r\n\t\t\tif(obj.constructor.name === object_type)\r\n\t\t\t\tobject = obj;\r\n\t\t});\r\n\t\treturn object;\r\n\t}\r\n\r\n}\r\n\r\nconst model_utilities = new ModelUtilities();\r\nmodule.exports = model_utilities;\r\n","export default class Validation\r\n{\r\n\tconstructor(){}\r\n\r\n  static is_int(n) {\r\n    return Number(n) === n && n % 1 === 0;\r\n  }\r\n\r\n  static is_float(n) {\r\n    return Number(n) === n && n % 1 !== 0;\r\n  }\r\n\r\n  static is_json(str)\r\n  {\r\n    try {\r\n      JSON.parse(str);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nuniform vec3 _Color;\\n\\nvarying vec3 vBarycentric;\\n\\nfloat edgeFactor(vec3 baryc ){\\n    vec3 d = fwidth(baryc);\\n    vec3 a3 = smoothstep(vec3(0.0), d*1.5, baryc);\\n    return min(min(a3.x, a3.y), a3.z);\\n}\\n\\nvoid main()\\n{\\t\\n\\tfloat alpha = edgeFactor(vBarycentric + vec3(1. , 1., 0.));\\n\\tgl_FragColor.rgb = mix(_Color, vec3(0.), alpha);\\n\\tgl_FragColor.a = 1.0 - alpha;\\n\\tgl_FragColor.a *= 0.2;\\n}\";","module.exports=\"#define GLSLIFY 1\\nattribute vec3 barycentric;\\nvarying vec3 vBarycentric;\\nvoid main()\\n{\\n\\n  mat4 VP = projectionMatrix * viewMatrix;\\n  vec3 pos = (modelMatrix * vec4(position, 1.0)).xyz;\\n  gl_Position = VP * vec4(pos, 1.0);\\n  vBarycentric = barycentric;\\n}\";","export default class GeometryUtilities\r\n{\r\n\tstatic convert_to_non_indexed_geometry(geometry_buffer)\r\n\t{\r\n\t\tlet indices = geometry_buffer.index;\r\n\t\tlet positions = geometry_buffer.getAttribute(\"position\");\r\n\r\n\t\tlet bar_coordinates = [];\r\n\t\tlet vertices = [];\r\n\r\n\t\tfor(let i=0; i< indices.count; i+=3)\r\n\t\t{\r\n\t\t\t// VERTEX 1\r\n\t\t\tvertices.push(positions.getX(indices.array[i+0]));\r\n\t\t\tvertices.push(positions.getY(indices.array[i+0]));\r\n\t\t\tvertices.push(positions.getZ(indices.array[i+0]));\r\n\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\r\n\t\t\t// VERTEX 2\r\n\r\n\t\t\tvertices.push(positions.getX(indices.array[i+1]));\r\n\t\t\tvertices.push(positions.getY(indices.array[i+1]));\r\n\t\t\tvertices.push(positions.getZ(indices.array[i+1]));\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\r\n\t\t\t// VERTEX 3\r\n\r\n\t\t\tvertices.push(positions.getX(indices.array[i+2]));\r\n\t\t\tvertices.push(positions.getY(indices.array[i+2]));\r\n\t\t\tvertices.push(positions.getZ(indices.array[i+2]));\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\r\n\r\n\t\t}\r\n\r\n\t\tlet geometry = new THREE.BufferGeometry();\r\n\t\t// geometry.setAttribute('barycentric', new THREE.BufferAttribute( new Float32Array(bar_coordinates), 3 ));\r\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute( new Float32Array(vertices), 3 ) );\r\n\t\tGeometryUtilities.add_barycentric_attribute(geometry);\r\n\t\treturn geometry;\r\n\t}\r\n\r\n\tstatic add_barycentric_attribute(non_indexed_geometry_buffer)\r\n\t{\r\n\t\tlet bar_coordinates = [];\r\n\t\tlet positions = non_indexed_geometry_buffer.getAttribute(\"position\");\r\n\r\n\t\tfor(let i=0; i< positions.count; i+=3)\r\n\t\t{\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\t\t\tbar_coordinates.push(0);\r\n\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(0);\r\n\t\t\tbar_coordinates.push(1);\r\n\r\n\t\t}\r\n\t\tnon_indexed_geometry_buffer.setAttribute('barycentric', new THREE.BufferAttribute( new Float32Array(bar_coordinates), 3 ));\r\n\t}\r\n}\r\n","import grid_frag from '/shaders/grid/grid_frag';\r\nimport grid_vert from '/shaders/grid/grid_vert';\r\nimport GeometryUtilities from '/utilities/GeometryUtilities';\r\n\r\nexport default class Grid extends THREE.Mesh {\r\n\tconstructor()\r\n\t{\r\n\r\n\t\tlet material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n      \t_Color: {value: new THREE.Color(\"#919191\")}\r\n      },\r\n      vertexShader: grid_vert,\r\n      fragmentShader: grid_frag,\r\n      extensions: {derivatives: true},\r\n      transparent: true,\r\n      depthWrite: false\r\n    });\r\n\r\n\r\n    let plane_geometry = new THREE.PlaneBufferGeometry( 100, 100, 100,100 );\r\n\r\n\t\tlet non_indexed_geometry = GeometryUtilities.convert_to_non_indexed_geometry(plane_geometry);\r\n\r\n\t\tsuper(non_indexed_geometry, material);\r\n\r\n\t\tthis.rotation.x = -3.14/2;\r\n\t}\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nuniform vec2 _ScreenSize;\\nuniform vec2 _TextureSize;\\nuniform vec2 _PixelOffset;\\nuniform vec3 _NDC;\\nuniform vec2 _PivotPoint;\\nuniform float _DepthOffset;\\nvarying vec2 vUv;\\n\\nvec2 add_pixel_offset(vec2 pos)\\n{\\n\\tpos = pos * 0.5 + 0.5;\\n\\tpos *= _ScreenSize;\\n\\tpos = ceil(pos+_PixelOffset)+0.5;\\n\\tpos /= _ScreenSize;\\n\\treturn pos * 2.0 - 1.0;\\n}\\nvoid main()\\n{\\n\\tvec4 projected_pos = projectionMatrix * viewMatrix * vec4(_NDC, 1.0);\\n  projected_pos.zw += _DepthOffset;\\n\\n\\tprojected_pos.xyz /= projected_pos.w;\\n\\n  vec2 normalized_size = _TextureSize/_ScreenSize;\\n  vec2 dir = uv * 2.0 - 1.0;\\n  dir -= _PivotPoint;\\n  vec2 pos = projected_pos.xy+dir * normalized_size;\\n  gl_Position = vec4(add_pixel_offset(pos), projected_pos.z, 1.0);\\n  vUv = uv;\\n\\n}\\n\";","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform vec2 _ScreenSize;\\nuniform vec2 _TextureSize;\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n\\tgl_FragColor = texture2D(_MainTex, vUv + vec2(0.5, 0.5)/_TextureSize);\\n}\\n\";","import vert from '/shaders/ui_element/ui_element.vert';\r\nimport frag from '/shaders/ui_element/ui_element.frag';\r\nimport BaseShaderMaterial from '/materials/BaseShaderMaterial';\r\n\r\nexport default class UIElementMaterial extends BaseShaderMaterial {\r\n    constructor(intensity = 1) {\r\n        super(vert, frag, {\r\n            _MainTex: { value: undefined },\r\n            _ScreenSize: { value: new THREE.Vector2(Screen.width, Screen.height) },\r\n            _TextureSize: { value: new THREE.Vector2() },\r\n            _PixelOffset: { value: new THREE.Vector2(0, 0) },\r\n            _NDC: { value: new THREE.Vector3() },\r\n            _PivotPoint: { value: new THREE.Vector2() },\r\n            _DepthOffset: { value: 0 }\r\n        });\r\n        this.transparent = true;\r\n        this.depthWrite = false;\r\n        this.depthTest = false;\r\n    }\r\n\r\n}\r\n","module.exports=\"#define GLSLIFY 1\\nuniform sampler2D _MainTex;\\nuniform vec2 _ScreenSize;\\nuniform vec2 _TextureSize;\\nvarying vec2 vUv;\\n\\nvoid main()\\n{\\n\\tgl_FragColor = texture2D(_MainTex, vUv + vec2(0.5, 0.5)/_TextureSize);\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec2 _ScreenSize;\\nuniform vec2 _TextureSize;\\nuniform vec2 _PixelOffset;\\nuniform vec3 _NDC;\\nuniform vec2 _PivotPoint;\\nuniform float _DepthOffset;\\nvarying vec2 vUv;\\n\\nvec2 round_to_ceil(vec2 pos)\\n{\\n\\tpos = pos * 0.5 + 0.5;\\n\\tpos *= _ScreenSize;\\n\\tpos = ceil(pos)+0.5;\\n\\tpos /= _ScreenSize;\\n\\treturn pos * 2.0 - 1.0;\\n}\\nvoid main()\\n{\\n\\tvec4 projected_pos = projectionMatrix * viewMatrix * vec4(_NDC, 1.0);\\n  projected_pos.zw += _DepthOffset;\\n\\n\\tprojected_pos.xyz /= projected_pos.w;\\n\\t\\n  vec2 normalized_size = _TextureSize/_ScreenSize;\\n  vec2 dir = uv * 2.0 - 1.0;\\n  dir -= _PivotPoint; \\n  vec2 pos = projected_pos.xy+ dir * normalized_size;\\n  gl_Position = vec4(round_to_ceil(pos), projected_pos.z, 1.0);\\n  vUv = uv;\\n\\n}\";","export default class ScreenSpacePosition\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.tmp_vec = new THREE.Vector2();\r\n\t}\r\n\r\n\tget_pos_NDC(position)\r\n\t{\r\n\t\treturn this.tmp_vec.set(position.x, position.y);\r\n\t}\r\n}","import CameraManager from '/CameraManager';\r\n\r\nexport default class WorldSpacePosition\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.tmp_vec3 = new THREE.Vector3();\r\n\t\tthis.tmp_vec2 = new THREE.Vector2();\r\n\t}\r\n\r\n\tget_pos_NDC(position)\r\n\t{\r\n\t\tthis.tmp_vec3.copy(position);\r\n    \tthis.tmp_vec3.project(CameraManager.current);\r\n\r\n\t\treturn this.tmp_vec2.set(this.tmp_vec3.x, this.tmp_vec3.y);\r\n\t}\r\n}\r\n","export default class UIElementState\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\r\n\t}\r\n\r\n\tupdate(ui_element, normalized_mouse_position)\r\n\t{\r\n\r\n\t}\r\n\r\n\ton_enter(ui_element){}\r\n\ton_exit(ui_element){}\r\n}","import UIElementState from '/ui/ui_element_state/UIElementState'\r\n\r\nexport default class OnIdle extends UIElementState\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tupdate(ui_element, normalized_mouse_position)\r\n\t{\r\n\t\tif(ui_element.is_mouse_over(normalized_mouse_position))\r\n\t\t{\r\n\t\t\tui_element.set_state(ui_element._on_enter_state);\r\n\t\t}\r\n\t}\r\n}\r\n","import UIElementState from '/ui/ui_element_state/UIElementState'\r\n\r\nexport default class OnMouseEnter extends UIElementState\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\ton_enter(ui_element)\r\n\t{\r\n\t\tui_element.on_mouse_enter();\r\n\t}\r\n\r\n\tupdate(ui_element, normalized_mouse_position)\r\n\t{\r\n\t\tif(ui_element.is_mouse_over(normalized_mouse_position))\r\n\t\t{\r\n\t\t\tui_element.set_state(ui_element._on_hover_state);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tui_element.set_state(ui_element._on_exit_state);\r\n\t\t}\r\n\t}\r\n}\r\n","import UIElementState from '/ui/ui_element_state/UIElementState'\r\n\r\nexport default class OnMouseExit extends UIElementState\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\ton_enter(ui_element)\r\n\t{\r\n\t\tui_element.on_mouse_exit();\r\n\t\tui_element.set_state(ui_element._on_idle_state);\r\n\t}\r\n\r\n}\r\n","import UIElementState from '/ui/ui_element_state/UIElementState'\r\n\r\nexport default class OnMouseHover extends UIElementState\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\ton_enter(ui_element)\r\n\t{\r\n\t\tthis.__trigger_on_hover(ui_element);\r\n\t}\r\n\r\n\tupdate(ui_element, normalized_mouse_position)\r\n\t{\r\n\t\tif(ui_element.is_mouse_over(normalized_mouse_position))\r\n\t\t{\r\n\t\t\tthis.__trigger_on_hover(ui_element);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tui_element.set_state(ui_element._on_exit_state);\r\n\t\t}\r\n\t}\r\n\r\n\t__trigger_on_hover(ui_element)\r\n\t{\r\n\t\tui_element.on_mouse_hover();\r\n\t}\r\n}\r\n","import UI from '/UI';\r\nimport CameraManager from '/CameraManager';\r\nimport Screen from '/Screen';\r\n\r\nimport UIElementMaterial from '/materials/UIElementMaterial';\r\nimport screen_space_text_frag from '/shaders/ui/ss_texture_frag';\r\nimport screen_space_text_vert from '/shaders/ui/ss_texture_vert';\r\n\r\nimport ScreenSpacePosition from '/ui/ui_element_position/ScreenSpacePosition';\r\nimport WorldSpacePosition from '/ui/ui_element_position/WorldSpacePosition';\r\n\r\nimport OnIdle from '/ui/ui_element_state/OnIdle';\r\nimport OnMouseEnter from '/ui/ui_element_state/OnMouseEnter';\r\nimport OnMouseExit from '/ui/ui_element_state/OnMouseExit';\r\nimport OnMouseHover from '/ui/ui_element_state/OnMouseHover';\r\n\r\n\r\nexport default class UIElement extends THREE.Mesh\r\n{\r\n  constructor(vert, frag)\r\n  {\r\n    super(new THREE.PlaneGeometry(1, 1), new UIElementMaterial());\r\n\r\n\r\n    this.is_clickable = false;\r\n\r\n    this.position_strategy = new WorldSpacePosition();\r\n    this.current_state = new OnIdle();\r\n\r\n    this._position = new THREE.Vector3();\r\n\r\n    this._on_idle_state = new OnIdle();\r\n    this._on_enter_state = new OnMouseEnter();\r\n    this._on_exit_state = new OnMouseExit();\r\n    this._on_hover_state = new OnMouseHover();\r\n\r\n    this.on_enter = undefined;\r\n    this.on_exit = undefined;\r\n    this.on_hover = undefined;\r\n\r\n    this.mouse_pos_tmp = new THREE.Vector2();\r\n    this.cached_NDC_position = new THREE.Vector2();\r\n    this.screen_pos_tmp = new THREE.Vector2();\r\n\r\n\r\n    this.texture_size = new THREE.Vector2(1,1);\r\n\r\n\r\n    this.frustumCulled = false;\r\n    this.matrixAutoUpdate = false;\r\n    this.renderOrder = 0;\r\n\r\n    this.size = 1;\r\n    this.pixel_offset = new THREE.Vector2();\r\n  }\r\n\r\n  set_render_order(value)\r\n  {\r\n    this.renderOrder = value;\r\n  }\r\n\r\n  get pivot_point()\r\n  {\r\n    return this.material.uniforms._PivotPoint.value;\r\n  }\r\n\r\n  set_pixel_offset(offset)\r\n  {\r\n    this.pixel_offset.copy(offset);\r\n    this.material.uniforms._PixelOffset.value.copy(offset);\r\n  }\r\n\r\n  set_state(new_state)\r\n  {\r\n    this.current_state.on_exit(this);\r\n    this.current_state = new_state;\r\n    this.current_state.on_enter(this);\r\n  }\r\n\r\n  get position()\r\n  {\r\n    return this._position;\r\n  }\r\n\r\n  set use_depth(boolean)\r\n  {\r\n    this.material.depthTest = boolean;\r\n  }\r\n\r\n  set depth_offset(value)\r\n  {\r\n    this.material.uniforms._DepthOffset.value = value;\r\n  }\r\n\r\n  clear_state()\r\n  {\r\n    this.visible = false;\r\n  }\r\n\r\n\r\n  set_world_space_coordinate_system()\r\n  {\r\n    this.position_strategy = new WorldSpacePosition();\r\n  }\r\n  set_screen_space_coordinate_system()\r\n  {\r\n    this.position_strategy = new ScreenSpacePosition();\r\n  }\r\n\r\n  set_texture(texture)\r\n  {\r\n    texture.minFilter = THREE.NearestFilter;\r\n    texture.magFilter = THREE.NearestFilter;\r\n    texture.needsUpdate = true;\r\n\r\n    this.texture_size.set(texture.image.width, texture.image.height);\r\n\r\n    this.material.uniforms._MainTex.value = texture;\r\n    this.get_size(this.material.uniforms._TextureSize.value);\r\n    this.visible = true;\r\n  }\r\n\r\n  update_state(normalized_mouse_pos)\r\n  {\r\n    this.material.uniforms._ScreenSize.value.set(Screen.width, Screen.height);\r\n    this.get_size(this.material.uniforms._TextureSize.value);\r\n\r\n    this.cached_NDC_position.copy(this.position_strategy.get_pos_NDC(this.position));\r\n    this.material.uniforms._NDC.value.copy(this.position);\r\n    this.current_state.update(this, normalized_mouse_pos);\r\n  }\r\n\r\n  is_mouse_over(normalized_mouse_pos)\r\n  {\r\n\r\n    this.screen_pos_tmp.copy(this.cached_NDC_position)\r\n    this.to_screen_position(this.screen_pos_tmp);\r\n    this.screen_pos_tmp.x += this.pixel_offset.x;\r\n    this.screen_pos_tmp.y += this.pixel_offset.y;\r\n\r\n    let rect = new THREE.Box2().setFromCenterAndSize(this.screen_pos_tmp, this.get_size());\r\n\r\n\r\n    this.mouse_pos_tmp.copy(normalized_mouse_pos);\r\n    this.to_screen_position(this.mouse_pos_tmp);\r\n\r\n    return rect.containsPoint(this.mouse_pos_tmp);\r\n  }\r\n\r\n  to_screen_position(projected_pos)\r\n  {\r\n    projected_pos.x = (projected_pos.x * 0.5 + 0.5) * Screen.width  + this.pixel_offset.x;\r\n    projected_pos.y = (projected_pos.y * 0.5 + 0.5) * Screen.height + this.pixel_offset.y;\r\n  }\r\n\r\n  get_screen_space_position()\r\n  {\r\n    let pos = this.cached_NDC_position.clone()\r\n    this.to_screen_position(pos);\r\n    return pos;\r\n  }\r\n  set_screen_space_position(screen_pos)\r\n  {\r\n    this.position.x = (screen_pos.x / Screen.width) * 2 - 1;\r\n    this.position.y = (screen_pos.y / Screen.height) * 2 - 1;\r\n  }\r\n\r\n  dispose()\r\n  {\r\n    if(this.material.uniforms._MainTex.value)\r\n    {\r\n      this.material.uniforms._MainTex.value.dispose();\r\n    }\r\n    Screen.remove_screen_material(this.material);\r\n    this.geometry.dispose();\r\n    this.material.dispose();\r\n  }\r\n\r\n  get_size(vector2)\r\n  {\r\n    if (vector2)\r\n    {\r\n      return vector2.copy(this.texture_size).multiplyScalar(this.size / Screen.dpr);\r\n    }\r\n    else\r\n    {\r\n      return new THREE.Vector2().copy(this.texture_size).multiplyScalar(this.size / Screen.dpr);\r\n    }\r\n  }\r\n\r\n  on_mouse_enter(){}\r\n  on_mouse_exit(){}\r\n  on_mouse_hover(){}\r\n\r\n}\r\n\r\n","module.exports=\"#define GLSLIFY 1\\nuniform float _Thickness;\\n\\nattribute vec3 next_position;\\nattribute vec3 previous_position;\\nattribute float orientation;\\nattribute float coverage;\\n\\nvarying float line_coverage;\\nvarying float uv_u;\\n\\nvec3 w_space_normal(vec3 from, vec3 to)\\n{\\n  vec3 w_from = (modelMatrix * vec4(from, 1.0)).xyz;\\n  vec3 w_to   = (modelMatrix * vec4(to, 1.0)).xyz;\\n\\n  vec3 z = normalize(w_to - w_from);\\n  return normalize(cross(z , normalize(cameraPosition - w_from)));\\n\\n}\\n\\nvoid main()\\n{\\n\\n  mat4 VP = projectionMatrix * viewMatrix;\\n\\n  vec3 pos = position;\\n  vec3 normal = w_space_normal(next_position ,previous_position);\\n  pos = (modelMatrix * vec4(pos, 1.0)).xyz;\\n  pos += normal * (_Thickness * 0.5) * orientation;\\n\\n  gl_Position = VP * vec4(pos, 1.0);\\n\\n  line_coverage = coverage;\\n  uv_u = orientation * 0.5 + 0.5;\\n\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform float _Length;\\nuniform float _ElapsedTime;\\nuniform float _Thickness;\\nuniform vec3  _Color;\\n\\nvarying float line_coverage;\\nvarying float uv_u;\\n\\nfloat aastep(float threshold, float value) {\\n  #ifdef GL_OES_standard_derivatives\\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\\n  #else\\n    return step(threshold, value);\\n  #endif  \\n}\\n\\nvoid main()\\n{\\n\\n    // float y = fract(line_coverage /_Thickness - _TrueElapsedTime) ;\\n\\n    // vec2 uv = vec2(uv_u, y);\\n\\n   \\n    // vec4 col = texture2D(_ArrowsTex,uv);\\n    // col.rgb *= _ForwardColor;\\n    // col.a = aastep(0.5, col.a);\\n    // gl_FragColor = col;\\n    float u = (1.0 - abs(uv_u * 2.0 - 1.0));\\n    float diffuse = dot(vec2(u, u), vec2(0.0, 1.0)) * 0.5+0.5;\\n    gl_FragColor = vec4(_Color * diffuse, 1.0);\\n\\n}\";","import line_vs from '/shaders/basic_line/basic_line_vert'\r\nimport line_fs from '/shaders/basic_line/basic_line_frag'\r\n\r\nexport default class Line extends THREE.Mesh {\r\n\r\n  constructor(points) {\r\n\r\n\r\n    let geometry = new THREE.BufferGeometry();\r\n    geometry.setAttribute('position',           new THREE.BufferAttribute(new Float32Array([]), 3));\r\n    geometry.setAttribute('next_position',      new THREE.BufferAttribute(new Float32Array([]), 3));\r\n    geometry.setAttribute('previous_position',  new THREE.BufferAttribute(new Float32Array([]), 3));\r\n    geometry.setAttribute('orientation',        new THREE.BufferAttribute(new Float32Array([]), 1));\r\n    geometry.setAttribute('coverage',           new THREE.BufferAttribute(new Float32Array([]), 1));\r\n\r\n    let material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        _Thickness: { value: 0.2 },\r\n        _Length: { value: 0 },\r\n        _ElapsedTime: { value: 0 },\r\n        _Color: {value: new THREE.Color(\"#FF0000\")},\r\n      },\r\n      vertexShader: line_vs,\r\n      fragmentShader: line_fs,\r\n      transparent: true,\r\n      depthWrite: false,\r\n      extensions: { derivatives: true}\r\n\r\n    });\r\n\r\n    super(geometry, material);\r\n\r\n    if(points)\r\n      this.setup(points);\r\n  }\r\n\r\n  setup(points)\r\n  {\r\n\r\n    let vertices = [];\r\n    let next_position = [];\r\n    let previous_position = [];\r\n    let orientation = [];\r\n    let coverage = [];\r\n    let accumulated_length = 0;\r\n\r\n\r\n    for (let i = 0; i < points.length; i++) {\r\n\r\n      vertices.push(points[i].x);\r\n      vertices.push(points[i].y);\r\n      vertices.push(points[i].z);\r\n      orientation.push(1);\r\n\r\n      vertices.push(points[i].x);\r\n      vertices.push(points[i].y);\r\n      vertices.push(points[i].z);\r\n      orientation.push(-1);\r\n\r\n      let next_point = this.__get_next_position(points, i);\r\n      next_position.push(next_point.x);\r\n      next_position.push(next_point.y);\r\n      next_position.push(next_point.z);\r\n\r\n      next_position.push(next_point.x);\r\n      next_position.push(next_point.y);\r\n      next_position.push(next_point.z);\r\n\r\n      let previous_point = this.__get_previous_position(points, i);\r\n      previous_position.push(previous_point.x);\r\n      previous_position.push(previous_point.y);\r\n      previous_position.push(previous_point.z);\r\n\r\n      previous_position.push(previous_point.x);\r\n      previous_position.push(previous_point.y);\r\n      previous_position.push(previous_point.z);\r\n\r\n\r\n      if(i < points.length -1)\r\n        accumulated_length += points[i].distanceTo(next_point);\r\n\r\n      coverage.push(accumulated_length);\r\n      coverage.push(accumulated_length);\r\n\r\n    }\r\n\r\n    let vertexList            = new Float32Array(vertices);\r\n    let nextPositionList      = new Float32Array(next_position);\r\n    let previousPositionList  = new Float32Array(previous_position);\r\n    let orientationList       = new Float32Array(orientation);\r\n    let coverageList          = new Float32Array(coverage);\r\n\r\n\r\n    let indices = [];\r\n    for (let i = 0; i < ((vertexList.length / 3) - 2) / 2; i++) {\r\n      let index = (i * 2) + 1;\r\n      indices.push(index);\r\n      indices.push(index + 1);\r\n      indices.push(index - 1);\r\n\r\n      indices.push(index);\r\n      indices.push(index + 2);\r\n      indices.push(index + 1);\r\n    }\r\n\r\n    this.geometry.setIndex(indices);\r\n    this.geometry.getAttribute('position').copy(          new THREE.BufferAttribute(vertexList, 3));\r\n    this.geometry.getAttribute('next_position').copy(     new THREE.BufferAttribute(nextPositionList, 3));\r\n    this.geometry.getAttribute('previous_position').copy( new THREE.BufferAttribute(previousPositionList, 3));\r\n    this.geometry.getAttribute('orientation').copy(       new THREE.BufferAttribute(orientationList, 1));\r\n    this.geometry.getAttribute('coverage').copy(          new THREE.BufferAttribute(coverageList, 1));\r\n\r\n    this.geometry.getAttribute('position').needsUpdate = true;\r\n    this.geometry.getAttribute('next_position').needsUpdate = true;\r\n    this.geometry.getAttribute('previous_position').needsUpdate = true;\r\n    this.geometry.getAttribute('orientation').needsUpdate = true;\r\n    this.geometry.getAttribute('coverage').needsUpdate = true;\r\n\r\n    this.material.uniforms._Length.value = accumulated_length;\r\n    this._length = accumulated_length;\r\n  }\r\n\r\n  set thickness(value)\r\n  {\r\n    this.material.uniforms._Thickness.value = value;\r\n  }\r\n\r\n\r\n\r\n  __get_previous_position(points, i)\r\n  {\r\n    if(i === 0)\r\n    {\r\n      return points[1].clone().sub(points[0]).multiplyScalar(-1).add(points[0]);\r\n    }\r\n    else\r\n    {\r\n      return points[i-1];\r\n    }\r\n  }\r\n  __get_next_position(points, i)\r\n  {\r\n    if(i === points.length-1)\r\n    {\r\n      return points[points.length-2].clone().sub(points[points.length-1]).multiplyScalar(-1).add(points[points.length-1]);\r\n    }\r\n    else\r\n    {\r\n      return points[i+1];\r\n    }\r\n  }\r\n\r\n  update() {\r\n  }\r\n\r\n  distance()\r\n  {\r\n    return this.accumulated_length;\r\n  }\r\n  total_length()\r\n  {\r\n    return this.accumulated_length;\r\n  }\r\n\r\n  dispose()\r\n  {\r\n    this.geometry.dispose();\r\n    this.material.dispose();\r\n    if(this.parent)\r\n      this.parent.remove(this);\r\n  }\r\n\r\n  set color(col)\r\n  {\r\n  \tthis.material.uniforms._Color.value.set(col);\r\n  }\r\n  copy_color(col)\r\n  {\r\n  \tthis.material.uniforms._Color.value.copy(col);\r\n  }\r\n}\r\n","import Grid from '/components/Grid';\r\nimport UIElement from '/components/UIElement';\r\nimport Line from '/components/Line';\r\nexport default {\r\n  Grid: Grid,\r\n  Line: Line,\r\n  UIElement: UIElement\r\n}\r\n","export default class CanvasDrawer\r\n{\r\n\tconstructor (uses_dynamic_font)\r\n  {\r\n    this.uses_dynamic_font = uses_dynamic_font;\r\n    this.__textHeight = null;\r\n\r\n    this.canvas = document.createElement('canvas');\r\n    this.ctx = this.canvas.getContext('2d');\r\n  }\r\n\r\n  getFontHeight (fontStyle = \"Arial\") {\r\n\r\n    if(this.__textHeight == null || this.uses_dynamic_font)\r\n    {\r\n      var body = document.getElementsByTagName('body')[0];\r\n      var dummy = document.createElement('div');\r\n      var dummyText = document.createTextNode('MÉqgOLAKTAL');\r\n      dummy.appendChild(dummyText);\r\n      dummy.setAttribute('style', `font:${ fontStyle };position:absolute;top:0;left:0`);\r\n      body.appendChild(dummy);\r\n      this.__textHeight = dummy.offsetHeight;\r\n      body.removeChild(dummy);\r\n    }\r\n    return this.__textHeight;\r\n\r\n  }\r\n\r\n\r\n\r\n  get_text_size(text, font = \"24px Arial\")\r\n  {\r\n\r\n\r\n  \tlet size = new THREE.Vector2();\r\n  \tthis.ctx.font = font;\r\n\t\tsize.x = Math.ceil(this.ctx.measureText(text).width) * window.devicePixelRatio;\r\n    size.y = Math.ceil(this.getFontHeight(font)) * window.devicePixelRatio;\r\n    return size;\r\n  }\r\n\r\n  draw_canvas (text, ctxOptions = {})\r\n  {\r\n    ctxOptions.font = ctxOptions.font || '24px Arial';\r\n    ctxOptions.font_color = ctxOptions.font_color || '#000000';\r\n\r\n  \tthis.__draw(text, ctxOptions, this.canvas, this.ctx);\r\n  \treturn this.canvas;\r\n  }\r\n\r\n  draw_on_texture(text, ctxOptions)\r\n  {\r\n    let canvas = this.draw_canvas(text, ctxOptions);\r\n    let canvas_texture = new THREE.CanvasTexture(canvas, THREE.UVMapping,\r\n                                          THREE.ClampToEdgeWrapping,\r\n                                          THREE.ClampToEdgeWrapping,\r\n                                          THREE.NearestFilter,\r\n                                          THREE.NearestFilter);\r\n    canvas_texture.generateMipMaps = false;\r\n    canvas_texture.needsUpdate = true;\r\n\r\n    return canvas_texture;\r\n  }\r\n\r\n  __draw(text, ctxOptions){};\r\n\r\n  roundRect(ctx, x, y, width, height, radius, fill, stroke) {\r\n      if (typeof stroke == 'undefined') {\r\n        stroke = true;\r\n      }\r\n      if (typeof radius === 'undefined') {\r\n        radius = 5;\r\n      }\r\n      if (typeof radius === 'number') {\r\n        radius = {tl: radius, tr: radius, br: radius, bl: radius};\r\n      } else {\r\n        var defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0};\r\n        for (var side in defaultRadius) {\r\n          radius[side] = radius[side] || defaultRadius[side];\r\n        }\r\n      }\r\n      ctx.beginPath();\r\n      ctx.moveTo(x + radius.tl, y);\r\n      ctx.lineTo(x + width - radius.tr, y);\r\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\r\n      ctx.lineTo(x + width, y + height - radius.br);\r\n      ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);\r\n      ctx.lineTo(x + radius.bl, y + height);\r\n      ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\r\n      ctx.lineTo(x, y + radius.tl);\r\n      ctx.quadraticCurveTo(x, y, x + radius.tl, y);\r\n      ctx.closePath();\r\n      if (fill) {\r\n        ctx.fill();\r\n      }\r\n      if (stroke) {\r\n        ctx.stroke();\r\n      }\r\n\r\n    }\r\n}\r\n","import CanvasDrawer from '/canvas_drawer/CanvasDrawer';\r\n\r\nexport default class SimpleTextDrawer extends CanvasDrawer{\r\n\r\n  constructor ()\r\n  {\r\n    super();\r\n    this.text_margin = new THREE.Vector2(2,0);\r\n  }\r\n\r\n  __draw (text, ctxOptions, canvas, ctx)\r\n  {\r\n    ctx.font = ctxOptions.font;\r\n\r\n    let text_size = this.get_text_size(text, ctxOptions.font);\r\n    // canvas.width = THREE.Math.ceilPowerOfTwo(text_size.x+this.text_margin.x*2);\r\n    // canvas.height = THREE.Math.ceilPowerOfTwo(text_size.y+ this.text_margin.y*2);\r\n    canvas.width = Math.ceil(text_size.x+this.text_margin.x*2);\r\n    canvas.height = Math.ceil(text_size.y+ this.text_margin.y*2);\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // ctx.globalAlpha = 0.2;\r\n    // ctx.fillStyle = \"#FF0000\";\r\n    // ctx.fillRect(0,0, canvas.width, canvas.height);\r\n\r\n\r\n\r\n    ctx.globalAlpha = 1;\r\n\r\n    ctx.font = ctxOptions.font;\r\n    ctx.fillStyle = ctxOptions.font_color || \"#000000\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.textAlignment = \"left\";\r\n    ctx.fillText(text, 0, canvas.height/2);\r\n  }\r\n\r\n}\r\n","import ArrayUtilities from '/utilities/ArrayUtilities.js';\r\nimport BaseApplication from '/BaseApplication';\r\nimport BaseShaderMaterial from '/materials/BaseShaderMaterial';\r\nimport CameraManager from '/CameraManager';\r\nimport CameraUtilities from '/utilities/CameraUtilities';\r\nimport Capabilities from '/Capabilities';\r\nimport Configuration from '/Configuration';\r\nimport EasingFunctions from '/utilities/EasingFunctions';\r\nimport EventManager from '/EventManager';\r\nimport Debug from '/Debug';\r\nimport Graphics from '/Graphics';\r\nimport Input from '/Input';\r\nimport MathUtilities from '/utilities/MathUtilities';\r\nimport NormalRender from '/render_mode/NormalRender';\r\nimport DeferredRender from '/render_mode/DeferredRender';\r\nimport DebugNormalsRender from '/render_mode/DebugNormalsRender';\r\nimport ObjectUtilities from '/utilities/ObjectUtilities';\r\nimport PerspectiveCamera from '/PerspectiveCamera';\r\nimport RenderLoop from '/RenderLoop';\r\nimport ResourceBatch from '/resource_loader/ResourceBatch';\r\nimport ResourceContainer from '/ResourceContainer';\r\nimport SceneManager from '/SceneManager';\r\nimport Screen from '/Screen';\r\nimport Time from '/Time';\r\nimport UI from '/UI';\r\nimport TimeUtilities from '/utilities/TimeUtilities';\r\nimport ImageUtilities from '/utilities/ImageUtilities';\r\nimport ModelUtilities from '/utilities/ModelUtilities';\r\nimport Validation from '/utilities/Validation';\r\nimport Components from '/Components';\r\nimport CanvasDrawer from '/canvas_drawer/CanvasDrawer';\r\nimport SimpleTextDrawer from '/canvas_drawer/SimpleTextDrawer';\r\n\r\nmodule.exports = {\r\n  ArrayUtilities: ArrayUtilities,\r\n  BaseApplication: BaseApplication,\r\n  BaseShaderMaterial: BaseShaderMaterial,\r\n  CameraManager: CameraManager,\r\n  CameraUtilities: CameraUtilities,\r\n  Capabilities: Capabilities,\r\n  Configuration: Configuration,\r\n  EasingFunctions: EasingFunctions,\r\n  EventManager: EventManager,\r\n  Debug: Debug,\r\n  Graphics: Graphics,\r\n  Input: Input,\r\n  MathUtilities: MathUtilities,\r\n  NormalRender: NormalRender,\r\n  DeferredRender: DeferredRender,\r\n  DebugNormalsRender: DebugNormalsRender,\r\n  ObjectUtilities: ObjectUtilities,\r\n  PerspectiveCamera: PerspectiveCamera,\r\n  RenderLoop: RenderLoop,\r\n  ResourceBatch: ResourceBatch,\r\n  ResourceContainer: ResourceContainer,\r\n  SceneManager: SceneManager,\r\n  Screen: Screen,\r\n  Time: Time,\r\n  TimeUtilities: TimeUtilities,\r\n  ImageUtilities: ImageUtilities,\r\n  ModelUtilities: ModelUtilities,\r\n  Validation: Validation,\r\n  Components: Components,\r\n  UI: UI,\r\n  CanvasDrawer: CanvasDrawer,\r\n  SimpleTextDrawer: SimpleTextDrawer\r\n}\r\n"]}